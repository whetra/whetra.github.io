!function(t,e){"function"==typeof define&&define.amd?define([],function(){return e()}):"object"==typeof exports?module.exports=e():e()}(this,function(){function t(t){"use strict";var e=t.storageKey(),n=t.storage(),a=function(){var a=t.preferredLanguage();angular.isString(a)?t.use(a):n.put(e,t.use())};a.displayName="fallbackFromIncorrectStorageValue",n?n.get(e)?t.use(n.get(e))["catch"](a):a():angular.isString(t.preferredLanguage())&&t.use(t.preferredLanguage())}function e(){"use strict";var t,e,n,a=null,i=!1,r=!1;n={sanitize:function(t,e){return"text"===e&&(t=s(t)),t},escape:function(t,e){return"text"===e&&(t=o(t)),t},sanitizeParameters:function(t,e){return"params"===e&&(t=c(t,s)),t},escapeParameters:function(t,e){return"params"===e&&(t=c(t,o)),t},sce:function(t,e,n){return"text"===e?t=l(t):"params"===e&&"filter"!==n&&(t=c(t,o)),t},sceParameters:function(t,e){return"params"===e&&(t=c(t,l)),t}},n.escaped=n.escapeParameters,this.addStrategy=function(t,e){return n[t]=e,this},this.removeStrategy=function(t){return delete n[t],this},this.useStrategy=function(t){return i=!0,a=t,this},this.$get=["$injector","$log",function(o,s){var l={},c=function(t,e,a,i){return angular.forEach(i,function(i){if(angular.isFunction(i))t=i(t,e,a);else if(angular.isFunction(n[i]))t=n[i](t,e,a);else{if(!angular.isString(n[i]))throw new Error("pascalprecht.translate.$translateSanitization: Unknown sanitization strategy: '"+i+"'");if(!l[n[i]])try{l[n[i]]=o.get(n[i])}catch(r){throw l[n[i]]=function(){},new Error("pascalprecht.translate.$translateSanitization: Unknown sanitization strategy: '"+i+"'")}t=l[n[i]](t,e,a)}}),t},u=function(){i||r||(s.warn("pascalprecht.translate.$translateSanitization: No sanitization strategy has been configured. This can have serious security implications. See http://angular-translate.github.io/docs/#/guide/19_security for details."),r=!0)};return o.has("$sanitize")&&(t=o.get("$sanitize")),o.has("$sce")&&(e=o.get("$sce")),{useStrategy:function(t){return function(e){t.useStrategy(e)}}(this),sanitize:function(t,e,n,i){if(a||u(),n||null===n||(n=a),!n)return t;i||(i="service");var r=angular.isArray(n)?n:[n];return c(t,e,i,r)}}}];var o=function(t){var e=angular.element("<div></div>");return e.text(t),e.html()},s=function(e){if(!t)throw new Error("pascalprecht.translate.$translateSanitization: Error cannot find $sanitize service. Either include the ngSanitize module (https://docs.angularjs.org/api/ngSanitize) or use a sanitization strategy which does not depend on $sanitize, such as 'escape'.");return t(e)},l=function(t){if(!e)throw new Error("pascalprecht.translate.$translateSanitization: Error cannot find $sce service.");return e.trustAsHtml(t)},c=function(t,e,n){if(angular.isDate(t))return t;if(angular.isObject(t)){var a=angular.isArray(t)?[]:{};if(n){if(n.indexOf(t)>-1)throw new Error("pascalprecht.translate.$translateSanitization: Error cannot interpolate parameter due recursive object")}else n=[];return n.push(t),angular.forEach(t,function(t,i){angular.isFunction(t)||(a[i]=c(t,e,n))}),n.splice(-1,1),a}return angular.isNumber(t)?t:e(t)}}function n(t,e,n,a){"use strict";var i,r,o,s,l,c,u,p,d,f,h,g,m,v,b,y,$={},w=[],x=t,k=[],C="translate-cloak",T=!1,D=!1,E=".",S=!1,O=!1,M=0,P=!0,A="default",I={"default":function(t){return(t||"").split("-").join("_")},java:function(t){var e=(t||"").split("-").join("_"),n=e.split("_");return n.length>1?n[0].toLowerCase()+"_"+n[1].toUpperCase():e},bcp47:function(t){var e=(t||"").split("_").join("-"),n=e.split("-");return n.length>1?n[0].toLowerCase()+"-"+n[1].toUpperCase():e},"iso639-1":function(t){var e=(t||"").split("_").join("-"),n=e.split("-");return n[0].toLowerCase()}},L="2.13.1",N=function(){if(angular.isFunction(a.getLocale))return a.getLocale();var t,n,i=e.$get().navigator,r=["language","browserLanguage","systemLanguage","userLanguage"];if(angular.isArray(i.languages))for(t=0;t<i.languages.length;t++)if(n=i.languages[t],n&&n.length)return n;for(t=0;t<r.length;t++)if(n=i[r[t]],n&&n.length)return n;return null};N.displayName="angular-translate/service: getFirstBrowserLanguage";var F=function(){var t=N()||"";return I[A]&&(t=I[A](t)),t};F.displayName="angular-translate/service: getLocale";var j=function(t,e){for(var n=0,a=t.length;a>n;n++)if(t[n]===e)return n;return-1},V=function(){return this.toString().replace(/^\s+|\s+$/g,"")},U=function(t){if(t){for(var e=[],n=angular.lowercase(t),a=0,i=w.length;i>a;a++)e.push(angular.lowercase(w[a]));if(j(e,n)>-1)return t;if(r){var o;for(var s in r)if(r.hasOwnProperty(s)){var l=!1,c=Object.prototype.hasOwnProperty.call(r,s)&&angular.lowercase(s)===angular.lowercase(t);if("*"===s.slice(-1)&&(l=s.slice(0,-1)===t.slice(0,s.length-1)),(c||l)&&(o=r[s],j(e,angular.lowercase(o))>-1))return o}}var u=t.split("_");return u.length>1&&j(e,angular.lowercase(u[0]))>-1?u[0]:void 0}},H=function(t,e){if(!t&&!e)return $;if(t&&!e){if(angular.isString(t))return $[t]}else angular.isObject($[t])||($[t]={}),angular.extend($[t],R(e));return this};this.translations=H,this.cloakClassName=function(t){return t?(C=t,this):C},this.nestedObjectDelimeter=function(t){return t?(E=t,this):E};var R=function(t,e,n,a){var i,r,o,s;e||(e=[]),n||(n={});for(i in t)Object.prototype.hasOwnProperty.call(t,i)&&(s=t[i],angular.isObject(s)?R(s,e.concat(i),n,i):(r=e.length?""+e.join(E)+E+i:i,e.length&&i===a&&(o=""+e.join(E),n[o]="@:"+r),n[r]=s));return n};R.displayName="flatObject",this.addInterpolation=function(t){return k.push(t),this},this.useMessageFormatInterpolation=function(){return this.useInterpolation("$translateMessageFormatInterpolation")},this.useInterpolation=function(t){return f=t,this},this.useSanitizeValueStrategy=function(t){return n.useStrategy(t),this},this.preferredLanguage=function(t){return t?(_(t),this):i};var _=function(t){return t&&(i=t),i};this.translationNotFoundIndicator=function(t){return this.translationNotFoundIndicatorLeft(t),this.translationNotFoundIndicatorRight(t),this},this.translationNotFoundIndicatorLeft=function(t){return t?(m=t,this):m},this.translationNotFoundIndicatorRight=function(t){return t?(v=t,this):v},this.fallbackLanguage=function(t){return q(t),this};var q=function(t){return t?(angular.isString(t)?(s=!0,o=[t]):angular.isArray(t)&&(s=!1,o=t),angular.isString(i)&&j(o,i)<0&&o.push(i),this):s?o[0]:o};this.use=function(t){if(t){if(!$[t]&&!h)throw new Error("$translateProvider couldn't find translationTable for langKey: '"+t+"'");return l=t,this}return l},this.resolveClientLocale=function(){return F()};var z=function(t){return t?(x=t,this):p?p+x:x};this.storageKey=z,this.useUrlLoader=function(t,e){return this.useLoader("$translateUrlLoader",angular.extend({url:t},e))},this.useStaticFilesLoader=function(t){return this.useLoader("$translateStaticFilesLoader",t)},this.useLoader=function(t,e){return h=t,g=e||{},this},this.useLocalStorage=function(){return this.useStorage("$translateLocalStorage")},this.useCookieStorage=function(){return this.useStorage("$translateCookieStorage")},this.useStorage=function(t){return u=t,this},this.storagePrefix=function(t){return t?(p=t,this):t},this.useMissingTranslationHandlerLog=function(){return this.useMissingTranslationHandler("$translateMissingTranslationHandlerLog")},this.useMissingTranslationHandler=function(t){return d=t,this},this.usePostCompiling=function(t){return T=!!t,this},this.forceAsyncReload=function(t){return D=!!t,this},this.uniformLanguageTag=function(t){return t?angular.isString(t)&&(t={standard:t}):t={},A=t.standard,this},this.determinePreferredLanguage=function(t){var e=t&&angular.isFunction(t)?t():F();return i=w.length?U(e)||e:e,this},this.registerAvailableLanguageKeys=function(t,e){return t?(w=t,e&&(r=e),this):w},this.useLoaderCache=function(t){return t===!1?b=void 0:t===!0?b=!0:"undefined"==typeof t?b="$translationCache":t&&(b=t),this},this.directivePriority=function(t){return void 0===t?M:(M=t,this)},this.statefulFilter=function(t){return void 0===t?P:(P=t,this)},this.postProcess=function(t){return y=t?t:void 0,this},this.keepContent=function(t){return O=!!t,this},this.$get=["$log","$injector","$rootScope","$q",function(t,e,n,a){var r,p,A,I=e.get(f||"$translateDefaultInterpolation"),N=!1,B={},W={},Y=function(t,e,n,s,c){!l&&i&&(l=i);var d=c&&c!==l?U(c)||c:l;if(c&&ue(c),angular.isArray(t)){var f=function(t){for(var i={},r=[],o=function(t){var r=a.defer(),o=function(e){i[t]=e,r.resolve([t,e])};return Y(t,e,n,s,c).then(o,o),r.promise},l=0,u=t.length;u>l;l++)r.push(o(t[l]));return a.all(r).then(function(){return i})};return f(t)}var h=a.defer();t&&(t=V.apply(t));var g=function(){var t=i?W[i]:W[d];if(p=0,u&&!t){var e=r.get(x);if(t=W[e],o&&o.length){var n=j(o,e);p=0===n?1:0,j(o,i)<0&&o.push(i)}}return t}();if(g){var m=function(){c||(d=l),oe(t,e,n,s,d).then(h.resolve,h.reject)};m.displayName="promiseResolved",g["finally"](m)}else oe(t,e,n,s,d).then(h.resolve,h.reject);return h.promise},G=function(t){return m&&(t=[m,t].join(" ")),v&&(t=[t,v].join(" ")),t},K=function(t){l=t,u&&r.put(Y.storageKey(),l),n.$emit("$translateChangeSuccess",{language:t}),I.setLocale(l);var e=function(t,e){B[e].setLocale(l)};e.displayName="eachInterpolatorLocaleSetter",angular.forEach(B,e),n.$emit("$translateChangeEnd",{language:t})},Q=function(t){if(!t)throw"No language key specified for loading.";var i=a.defer();n.$emit("$translateLoadingStart",{language:t}),N=!0;var r=b;"string"==typeof r&&(r=e.get(r));var o=angular.extend({},g,{key:t,$http:angular.extend({},{cache:r},g.$http)}),s=function(e){var a={};n.$emit("$translateLoadingSuccess",{language:t}),angular.isArray(e)?angular.forEach(e,function(t){angular.extend(a,R(t))}):angular.extend(a,R(e)),N=!1,i.resolve({key:t,table:a}),n.$emit("$translateLoadingEnd",{language:t})};s.displayName="onLoaderSuccess";var l=function(t){n.$emit("$translateLoadingError",{language:t}),i.reject(t),n.$emit("$translateLoadingEnd",{language:t})};return l.displayName="onLoaderError",e.get(h)(o).then(s,l),i.promise};if(u&&(r=e.get(u),!r.get||!r.put))throw new Error("Couldn't use storage '"+u+"', missing get() or put() method!");if(k.length){var X=function(t){var n=e.get(t);n.setLocale(i||l),B[n.getInterpolationIdentifier()]=n};X.displayName="interpolationFactoryAdder",angular.forEach(k,X)}var Z=function(t){var e=a.defer();if(Object.prototype.hasOwnProperty.call($,t))e.resolve($[t]);else if(W[t]){var n=function(t){H(t.key,t.table),e.resolve(t.table)};n.displayName="translationTableResolver",W[t].then(n,e.reject)}else e.reject();return e.promise},J=function(t,e,n,i){var r=a.defer(),o=function(a){if(Object.prototype.hasOwnProperty.call(a,e)){i.setLocale(t);var o=a[e];if("@:"===o.substr(0,2))J(t,o.substr(2),n,i).then(r.resolve,r.reject);else{var s=i.interpolate(a[e],n,"service");s=ce(e,a[e],s,n,t),r.resolve(s)}i.setLocale(l)}else r.reject()};return o.displayName="fallbackTranslationResolver",Z(t).then(o,r.reject),r.promise},te=function(t,e,n,a,i){var r,o=$[t];if(o&&Object.prototype.hasOwnProperty.call(o,e)){if(a.setLocale(t),r=a.interpolate(o[e],n,"filter",i),r=ce(e,o[e],r,n,t,i),!angular.isString(r)&&angular.isFunction(r.$$unwrapTrustedValue)){var s=r.$$unwrapTrustedValue();if("@:"===s.substr(0,2))return te(t,s.substr(2),n,a,i)}else if("@:"===r.substr(0,2))return te(t,r.substr(2),n,a,i);a.setLocale(l)}return r},ee=function(t,n,a,i){return d?e.get(d)(t,l,n,a,i):t},ne=function(t,e,n,i,r){var s=a.defer();if(t<o.length){var l=o[t];J(l,e,n,i).then(function(t){s.resolve(t)},function(){return ne(t+1,e,n,i,r).then(s.resolve,s.reject)})}else if(r)s.resolve(r);else{var c=ee(e,n,r);d&&c?s.resolve(c):s.reject(G(e))}return s.promise},ae=function(t,e,n,a,i){var r;if(t<o.length){var s=o[t];r=te(s,e,n,a,i),r||""===r||(r=ae(t+1,e,n,a))}return r},ie=function(t,e,n,a){return ne(A>0?A:p,t,e,n,a)},re=function(t,e,n,a){return ae(A>0?A:p,t,e,n,a)},oe=function(t,e,n,i,r){var s=a.defer(),l=r?$[r]:$,c=n?B[n]:I;if(l&&Object.prototype.hasOwnProperty.call(l,t)){var u=l[t];if("@:"===u.substr(0,2))Y(u.substr(2),e,n,i,r).then(s.resolve,s.reject);else{var p=c.interpolate(u,e,"service");p=ce(t,u,p,e,r),s.resolve(p)}}else{var f;d&&!N&&(f=ee(t,e,i)),r&&o&&o.length?ie(t,e,c,i).then(function(t){s.resolve(t)},function(t){s.reject(G(t))}):d&&!N&&f?i?s.resolve(i):s.resolve(f):i?s.resolve(i):s.reject(G(t))}return s.promise},se=function(t,e,n,a,i){var r,s=a?$[a]:$,l=I;if(B&&Object.prototype.hasOwnProperty.call(B,n)&&(l=B[n]),s&&Object.prototype.hasOwnProperty.call(s,t)){var c=s[t];"@:"===c.substr(0,2)?r=se(c.substr(2),e,n,a,i):(r=l.interpolate(c,e,"filter",i),r=ce(t,c,r,e,a,i))}else{var u;d&&!N&&(u=ee(t,e,i)),a&&o&&o.length?(p=0,r=re(t,e,l,i)):r=d&&!N&&u?u:G(t)}return r},le=function(t){c===t&&(c=void 0),W[t]=void 0},ce=function(t,n,a,i,r,o){var s=y;return s&&("string"==typeof s&&(s=e.get(s)),s)?s(t,n,a,i,r,o):a},ue=function(t){$[t]||!h||W[t]||(W[t]=Q(t).then(function(t){return H(t.key,t.table),t}))};Y.preferredLanguage=function(t){return t&&_(t),i},Y.cloakClassName=function(){return C},Y.nestedObjectDelimeter=function(){return E},Y.fallbackLanguage=function(t){if(void 0!==t&&null!==t){if(q(t),h&&o&&o.length)for(var e=0,n=o.length;n>e;e++)W[o[e]]||(W[o[e]]=Q(o[e]));Y.use(Y.use())}return s?o[0]:o},Y.useFallbackLanguage=function(t){if(void 0!==t&&null!==t)if(t){var e=j(o,t);e>-1&&(A=e)}else A=0},Y.proposedLanguage=function(){return c},Y.storage=function(){return r},Y.negotiateLocale=U,Y.use=function(t){if(!t)return l;var e=a.defer();n.$emit("$translateChangeStart",{language:t});var i=U(t);return w.length>0&&!i?a.reject(t):(i&&(t=i),c=t,!D&&$[t]||!h||W[t]?W[t]?W[t].then(function(t){return c===t.key&&K(t.key),e.resolve(t.key),t},function(t){return!l&&o&&o.length>0&&o[0]!==t?Y.use(o[0]).then(e.resolve,e.reject):e.reject(t)}):(e.resolve(t),K(t)):(W[t]=Q(t).then(function(n){return H(n.key,n.table),e.resolve(n.key),c===t&&K(n.key),n},function(t){return n.$emit("$translateChangeError",{language:t}),e.reject(t),n.$emit("$translateChangeEnd",{language:t}),a.reject(t)}),W[t]["finally"](function(){le(t)})),e.promise)},Y.resolveClientLocale=function(){return F()},Y.storageKey=function(){return z()},Y.isPostCompilingEnabled=function(){return T},Y.isForceAsyncReloadEnabled=function(){return D},Y.isKeepContent=function(){return O},Y.refresh=function(t){function e(){r.resolve(),n.$emit("$translateRefreshEnd",{language:t})}function i(){r.reject(),n.$emit("$translateRefreshEnd",{language:t})}if(!h)throw new Error("Couldn't refresh translation table, no loader registered!");var r=a.defer();if(n.$emit("$translateRefreshStart",{language:t}),t)if($[t]){var s=function(n){return H(n.key,n.table),t===l&&K(l),e(),n};s.displayName="refreshPostProcessor",Q(t).then(s,i)}else i();else{var c=[],u={};if(o&&o.length)for(var p=0,d=o.length;d>p;p++)c.push(Q(o[p])),u[o[p]]=!0;l&&!u[l]&&c.push(Q(l));var f=function(t){$={},angular.forEach(t,function(t){H(t.key,t.table)}),l&&K(l),e()};f.displayName="refreshPostProcessor",a.all(c).then(f,i)}return r.promise},Y.instant=function(t,e,n,a,r){var s=a&&a!==l?U(a)||a:l;if(null===t||angular.isUndefined(t))return t;if(a&&ue(a),angular.isArray(t)){for(var c={},u=0,p=t.length;p>u;u++)c[t[u]]=Y.instant(t[u],e,n,a,r);return c}if(angular.isString(t)&&t.length<1)return t;t&&(t=V.apply(t));var f,h=[];i&&h.push(i),s&&h.push(s),o&&o.length&&(h=h.concat(o));for(var g=0,b=h.length;b>g;g++){var y=h[g];if($[y]&&"undefined"!=typeof $[y][t]&&(f=se(t,e,n,s,r)),"undefined"!=typeof f)break}if(!f&&""!==f)if(m||v)f=G(t);else{f=I.interpolate(t,e,"filter",r);var w;d&&!N&&(w=ee(t,e,r)),d&&!N&&w&&(f=w)}return f},Y.versionInfo=function(){return L},Y.loaderCache=function(){return b},Y.directivePriority=function(){return M},Y.statefulFilter=function(){return P},Y.isReady=function(){return S};var pe=a.defer();pe.promise.then(function(){S=!0}),Y.onReady=function(t){var e=a.defer();return angular.isFunction(t)&&e.promise.then(t),S?e.resolve():pe.promise.then(e.resolve),e.promise},Y.getAvailableLanguageKeys=function(){return w.length>0?w:null},Y.getTranslationTable=function(t){return t=t||Y.use(),t&&$[t]?angular.copy($[t]):null};var de=n.$on("$translateReady",function(){pe.resolve(),de(),de=null}),fe=n.$on("$translateChangeEnd",function(){pe.resolve(),fe(),fe=null});if(h){if(angular.equals($,{})&&Y.use()&&Y.use(Y.use()),o&&o.length)for(var he=function(t){return H(t.key,t.table),n.$emit("$translateChangeEnd",{language:t.key}),t},ge=0,me=o.length;me>ge;ge++){var ve=o[ge];(D||!$[ve])&&(W[ve]=Q(ve).then(he))}}else n.$emit("$translateReady",{language:Y.use()});return Y}]}function a(t,e){"use strict";var n,a={},i="default";return a.setLocale=function(t){n=t},a.getInterpolationIdentifier=function(){return i},a.useSanitizeValueStrategy=function(t){return e.useStrategy(t),this},a.interpolate=function(n,a,i,r){a=a||{},a=e.sanitize(a,"params",r,i);var o;return angular.isNumber(n)?o=""+n:angular.isString(n)?(o=t(n)(a),o=e.sanitize(o,"text",r,i)):o="",o},a}function i(t,e,n,a,i){"use strict";var o=function(){return this.toString().replace(/^\s+|\s+$/g,"")};return{restrict:"AE",scope:!0,priority:t.directivePriority(),compile:function(s,l){var c=l.translateValues?l.translateValues:void 0,u=l.translateInterpolation?l.translateInterpolation:void 0,p=s[0].outerHTML.match(/translate-value-+/i),d="^(.*)("+e.startSymbol()+".*"+e.endSymbol()+")(.*)",f="^(.*)"+e.startSymbol()+"(.*)"+e.endSymbol()+"(.*)";return function(s,h,g){s.interpolateParams={},s.preText="",s.postText="",s.translateNamespace=r(s);var m={},v=function(t,e,n){if(e.translateValues&&angular.extend(t,a(e.translateValues)(s.$parent)),p)for(var i in n)if(Object.prototype.hasOwnProperty.call(e,i)&&"translateValue"===i.substr(0,14)&&"translateValues"!==i){var r=angular.lowercase(i.substr(14,1))+i.substr(15);t[r]=n[i]}},b=function(t){if(angular.isFunction(b._unwatchOld)&&(b._unwatchOld(),b._unwatchOld=void 0),angular.equals(t,"")||!angular.isDefined(t)){var n=o.apply(h.text()),a=n.match(d);if(angular.isArray(a)){s.preText=a[1],s.postText=a[3],m.translate=e(a[2])(s.$parent);var i=n.match(f);angular.isArray(i)&&i[2]&&i[2].length&&(b._unwatchOld=s.$watch(i[2],function(t){m.translate=t,C()}))}else m.translate=n?n:void 0}else m.translate=t;C()},y=function(t){g.$observe(t,function(e){m[t]=e,C()})};v(s.interpolateParams,g,l);var $=!0;g.$observe("translate",function(t){"undefined"==typeof t?b(""):""===t&&$||(m.translate=t,C()),$=!1});for(var w in g)g.hasOwnProperty(w)&&"translateAttr"===w.substr(0,13)&&w.length>13&&y(w);if(g.$observe("translateDefault",function(t){s.defaultText=t,C()}),c&&g.$observe("translateValues",function(t){t&&s.$parent.$watch(function(){angular.extend(s.interpolateParams,a(t)(s.$parent))})}),p){var x=function(t){g.$observe(t,function(e){var n=angular.lowercase(t.substr(14,1))+t.substr(15);s.interpolateParams[n]=e})};for(var k in g)Object.prototype.hasOwnProperty.call(g,k)&&"translateValue"===k.substr(0,14)&&"translateValues"!==k&&x(k)}var C=function(){for(var t in m)m.hasOwnProperty(t)&&void 0!==m[t]&&T(t,m[t],s,s.interpolateParams,s.defaultText,s.translateNamespace)},T=function(e,n,a,i,r,o){n?(o&&"."===n.charAt(0)&&(n=o+n),t(n,i,u,r,a.translateLanguage).then(function(t){D(t,a,!0,e)},function(t){D(t,a,!1,e)})):D(n,a,!1,e)},D=function(e,a,i,r){if(i||"undefined"!=typeof a.defaultText&&(e=a.defaultText),"translate"===r){(i||!i&&!t.isKeepContent()&&"undefined"==typeof g.translateKeepContent)&&h.empty().append(a.preText+e+a.postText);var o=t.isPostCompilingEnabled(),s="undefined"!=typeof l.translateCompile,c=s&&"false"!==l.translateCompile;(o&&!s||c)&&n(h.contents())(a)}else{var u=g.$attr[r];"data-"===u.substr(0,5)&&(u=u.substr(5)),u=u.substr(15),h.attr(u,e)}};(c||p||g.translateDefault)&&s.$watch("interpolateParams",C,!0),s.$on("translateLanguageChanged",C);var E=i.$on("$translateChangeSuccess",C);h.text().length?g.translate?b(g.translate):b(""):g.translate&&b(g.translate),C(),s.$on("$destroy",E)}}}}function r(t){"use strict";return t.translateNamespace?t.translateNamespace:t.$parent?r(t.$parent):void 0}function o(t,e){"use strict";return{restrict:"A",priority:t.directivePriority(),link:function(n,a,i){var r,o,l={},c=function(){angular.forEach(r,function(e,r){e&&(l[r]=!0,n.translateNamespace&&"."===e.charAt(0)&&(e=n.translateNamespace+e),t(e,o,i.translateInterpolation,void 0,n.translateLanguage).then(function(t){a.attr(r,t)},function(t){a.attr(r,t)}))}),angular.forEach(l,function(t,e){r[e]||(a.removeAttr(e),delete l[e])})};s(n,i.translateAttr,function(t){r=t},c),s(n,i.translateValues,function(t){o=t},c),i.translateValues&&n.$watch(i.translateValues,c,!0),n.$on("translateLanguageChanged",c);var u=e.$on("$translateChangeSuccess",c);c(),n.$on("$destroy",u)}}}function s(t,e,n,a){"use strict";e&&("::"===e.substr(0,2)?e=e.substr(2):t.$watch(e,function(t){n(t),a()},!0),n(t.$eval(e)))}function l(t,e){"use strict";return{compile:function(n){var a=function(){n.addClass(t.cloakClassName())},i=function(){n.removeClass(t.cloakClassName())};return t.onReady(function(){i()}),a(),function(n,r,o){o.translateCloak&&o.translateCloak.length&&(o.$observe("translateCloak",function(e){t(e).then(i,a)}),e.$on("$translateChangeSuccess",function(){t(o.translateCloak).then(i,a)}))}}}}function c(){"use strict";return{restrict:"A",scope:!0,compile:function(){return{pre:function(t,e,n){t.translateNamespace=r(t),t.translateNamespace&&"."===n.translateNamespace.charAt(0)?t.translateNamespace+=n.translateNamespace:t.translateNamespace=n.translateNamespace}}}}}function r(t){"use strict";return t.translateNamespace?t.translateNamespace:t.$parent?r(t.$parent):void 0}function u(){"use strict";return{restrict:"A",scope:!0,compile:function(){return function(t,e,n){n.$observe("translateLanguage",function(e){t.translateLanguage=e}),t.$watch("translateLanguage",function(){t.$broadcast("translateLanguageChanged")})}}}}function p(t,e){"use strict";var n=function(n,a,i,r){return angular.isObject(a)||(a=t(a)(this)),e.instant(n,a,i,r)};return e.statefulFilter()&&(n.$stateful=!0),n}function d(t){"use strict";return t("translations")}return t.$inject=["$translate"],n.$inject=["$STORAGE_KEY","$windowProvider","$translateSanitizationProvider","pascalprechtTranslateOverrider"],a.$inject=["$interpolate","$translateSanitization"],i.$inject=["$translate","$interpolate","$compile","$parse","$rootScope"],o.$inject=["$translate","$rootScope"],l.$inject=["$translate","$rootScope"],p.$inject=["$parse","$translate"],d.$inject=["$cacheFactory"],angular.module("pascalprecht.translate",["ng"]).run(t),t.displayName="runTranslate",angular.module("pascalprecht.translate").provider("$translateSanitization",e),angular.module("pascalprecht.translate").constant("pascalprechtTranslateOverrider",{}).provider("$translate",n),n.displayName="displayName",angular.module("pascalprecht.translate").factory("$translateDefaultInterpolation",a),a.displayName="$translateDefaultInterpolation",angular.module("pascalprecht.translate").constant("$STORAGE_KEY","NG_TRANSLATE_LANG_KEY"),angular.module("pascalprecht.translate").directive("translate",i),i.displayName="translateDirective",angular.module("pascalprecht.translate").directive("translateAttr",o),o.displayName="translateAttrDirective",angular.module("pascalprecht.translate").directive("translateCloak",l),l.displayName="translateCloakDirective",angular.module("pascalprecht.translate").directive("translateNamespace",c),c.displayName="translateNamespaceDirective",angular.module("pascalprecht.translate").directive("translateLanguage",u),u.displayName="translateLanguageDirective",angular.module("pascalprecht.translate").filter("translate",p),p.displayName="translateFilterFactory",angular.module("pascalprecht.translate").factory("$translationCache",d),d.displayName="$translationCache","pascalprecht.translate"}),function(t,e){"function"==typeof define&&define.amd?define([],function(){return e()}):"object"==typeof exports?module.exports=e():e()}(this,function(){function t(t,e){"use strict";return function(n){if(!(n&&(angular.isArray(n.files)||angular.isString(n.prefix)&&angular.isString(n.suffix))))throw new Error("Couldn't load static files, no files and prefix or suffix specified!");n.files||(n.files=[{prefix:n.prefix,suffix:n.suffix}]);for(var a=function(a){if(!a||!angular.isString(a.prefix)||!angular.isString(a.suffix))throw new Error("Couldn't load static file, no prefix or suffix specified!");var i=[a.prefix,n.key,a.suffix].join("");return angular.isObject(n.fileMap)&&n.fileMap[i]&&(i=n.fileMap[i]),e(angular.extend({url:i,method:"GET",params:""},n.$http)).then(function(t){return t.data},function(){return t.reject(n.key)})},i=[],r=n.files.length,o=0;r>o;o++)i.push(a({prefix:n.files[o].prefix,key:n.key,suffix:n.files[o].suffix}));return t.all(i).then(function(t){for(var e=t.length,n={},a=0;e>a;a++)for(var i in t[a])n[i]=t[a][i];return n})}}return t.$inject=["$q","$http"],angular.module("pascalprecht.translate").factory("$translateStaticFilesLoader",t),t.displayName="$translateStaticFilesLoader","pascalprecht.translate"});try{angular.module("risevision.common.i18n.config")}catch(err){angular.module("risevision.common.i18n.config",[])}angular.module("pascalprecht.translate").factory("$translateStaticFilesLoader",["$q","$http",function(t,e){function n(t,a){e(angular.extend({url:[t.prefix,t.key.toLowerCase(),t.suffix].join(""),method:"GET",params:""},t.$http)).then(function(t){a.resolve(t.data)},function(){if(t.key.indexOf("_")>=0){var e=t.key.substr(0,t.key.lastIndexOf("_")),i=angular.extend({},t,{key:e});n(i,a)}else a.resolve("{}")})}return function(e){if(!e||!angular.isString(e.prefix)||!angular.isString(e.suffix))throw new Error('Couldn"t load static files, no prefix or suffix specified!');var a=t.defer();return n(e,a),a.promise}}]),angular.module("risevision.common.i18n",["pascalprecht.translate","risevision.common.i18n.config"]).config(["$translateProvider","LOCALES_PREFIX","LOCALES_SUFIX",function(t,e,n){t.useStaticFilesLoader({prefix:e,suffix:n}),t.determinePreferredLanguage().fallbackLanguage("en").useSanitizeValueStrategy(null)}]),+function(t){"use strict";function e(e){return this.each(function(){var a=t(this),i=a.data("bs.affix"),r="object"==typeof e&&e;i||a.data("bs.affix",i=new n(this,r)),"string"==typeof e&&i[e]()})}var n=function(e,a){this.options=t.extend({},n.DEFAULTS,a),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=this.unpin=this.pinnedOffset=null,this.checkPosition()};n.VERSION="3.2.0",n.RESET="affix affix-top affix-bottom",n.DEFAULTS={offset:0,target:window},n.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(n.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},n.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},n.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=t(document).height(),a=this.$target.scrollTop(),i=this.$element.offset(),r=this.options.offset,o=r.top,s=r.bottom;"object"!=typeof r&&(s=o=r),"function"==typeof o&&(o=r.top(this.$element)),"function"==typeof s&&(s=r.bottom(this.$element));var l=null!=this.unpin&&a+this.unpin<=i.top?!1:null!=s&&i.top+this.$element.height()>=e-s?"bottom":null!=o&&o>=a?"top":!1;if(this.affixed!==l){null!=this.unpin&&this.$element.css("top","");var c="affix"+(l?"-"+l:""),u=t.Event(c+".bs.affix");this.$element.trigger(u),u.isDefaultPrevented()||(this.affixed=l,this.unpin="bottom"==l?this.getPinnedOffset():null,this.$element.removeClass(n.RESET).addClass(c).trigger(t.Event(c.replace("affix","affixed"))),"bottom"==l&&this.$element.offset({top:e-this.$element.height()-s}))}}};var a=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=n,t.fn.affix.noConflict=function(){return t.fn.affix=a,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var n=t(this),a=n.data();a.offset=a.offset||{},a.offsetBottom&&(a.offset.bottom=a.offsetBottom),a.offsetTop&&(a.offset.top=a.offsetTop),e.call(n,a)})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var n=t(this),i=n.data("bs.alert");i||n.data("bs.alert",i=new a(this)),"string"==typeof e&&i[e].call(n)})}var n='[data-dismiss="alert"]',a=function(e){t(e).on("click",n,this.close)};a.VERSION="3.2.0",a.prototype.close=function(e){function n(){r.detach().trigger("closed.bs.alert").remove()}var a=t(this),i=a.attr("data-target");i||(i=a.attr("href"),i=i&&i.replace(/.*(?=#[^\s]*$)/,""));var r=t(i);e&&e.preventDefault(),r.length||(r=a.hasClass("alert")?a:a.parent()),r.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(r.removeClass("in"),t.support.transition&&r.hasClass("fade")?r.one("bsTransitionEnd",n).emulateTransitionEnd(150):n())};var i=t.fn.alert;t.fn.alert=e,t.fn.alert.Constructor=a,t.fn.alert.noConflict=function(){return t.fn.alert=i,this},t(document).on("click.bs.alert.data-api",n,a.prototype.close)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var a=t(this),i=a.data("bs.button"),r="object"==typeof e&&e;i||a.data("bs.button",i=new n(this,r)),"toggle"==e?i.toggle():e&&i.setState(e)})}var n=function(e,a){this.$element=t(e),this.options=t.extend({},n.DEFAULTS,a),this.isLoading=!1};n.VERSION="3.2.0",n.DEFAULTS={loadingText:"loading..."},n.prototype.setState=function(e){var n="disabled",a=this.$element,i=a.is("input")?"val":"html",r=a.data();e+="Text",null==r.resetText&&a.data("resetText",a[i]()),a[i](null==r[e]?this.options[e]:r[e]),setTimeout(t.proxy(function(){"loadingText"==e?(this.isLoading=!0,a.addClass(n).attr(n,n)):this.isLoading&&(this.isLoading=!1,a.removeClass(n).removeAttr(n))},this),0)},n.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var n=this.$element.find("input");"radio"==n.prop("type")&&(n.prop("checked")&&this.$element.hasClass("active")?t=!1:e.find(".active").removeClass("active")),t&&n.prop("checked",!this.$element.hasClass("active")).trigger("change")}t&&this.$element.toggleClass("active")};var a=t.fn.button;t.fn.button=e,t.fn.button.Constructor=n,t.fn.button.noConflict=function(){return t.fn.button=a,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(n){var a=t(n.target);a.hasClass("btn")||(a=a.closest(".btn")),e.call(a,"toggle"),n.preventDefault()})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var a=t(this),i=a.data("bs.carousel"),r=t.extend({},n.DEFAULTS,a.data(),"object"==typeof e&&e),o="string"==typeof e?e:r.slide;i||a.data("bs.carousel",i=new n(this,r)),"number"==typeof e?i.to(e):o?i[o]():r.interval&&i.pause().cycle()})}var n=function(e,n){this.$element=t(e).on("keydown.bs.carousel",t.proxy(this.keydown,this)),this.$indicators=this.$element.find(".carousel-indicators"),this.options=n,this.paused=this.sliding=this.interval=this.$active=this.$items=null,"hover"==this.options.pause&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};n.VERSION="3.2.0",n.DEFAULTS={interval:5e3,pause:"hover",wrap:!0},n.prototype.keydown=function(t){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()},n.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},n.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},n.prototype.to=function(e){var n=this,a=this.getItemIndex(this.$active=this.$element.find(".item.active"));return e>this.$items.length-1||0>e?void 0:this.sliding?this.$element.one("slid.bs.carousel",function(){n.to(e)}):a==e?this.pause().cycle():this.slide(e>a?"next":"prev",t(this.$items[e]))},n.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this
},n.prototype.next=function(){return this.sliding?void 0:this.slide("next")},n.prototype.prev=function(){return this.sliding?void 0:this.slide("prev")},n.prototype.slide=function(e,n){var a=this.$element.find(".item.active"),i=n||a[e](),r=this.interval,o="next"==e?"left":"right",s="next"==e?"first":"last",l=this;if(!i.length){if(!this.options.wrap)return;i=this.$element.find(".item")[s]()}if(i.hasClass("active"))return this.sliding=!1;var c=i[0],u=t.Event("slide.bs.carousel",{relatedTarget:c,direction:o});if(this.$element.trigger(u),!u.isDefaultPrevented()){if(this.sliding=!0,r&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var p=t(this.$indicators.children()[this.getItemIndex(i)]);p&&p.addClass("active")}var d=t.Event("slid.bs.carousel",{relatedTarget:c,direction:o});return t.support.transition&&this.$element.hasClass("slide")?(i.addClass(e),i[0].offsetWidth,a.addClass(o),i.addClass(o),a.one("bsTransitionEnd",function(){i.removeClass([e,o].join(" ")).addClass("active"),a.removeClass(["active",o].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger(d)},0)}).emulateTransitionEnd(1e3*a.css("transition-duration").slice(0,-1))):(a.removeClass("active"),i.addClass("active"),this.sliding=!1,this.$element.trigger(d)),r&&this.cycle(),this}};var a=t.fn.carousel;t.fn.carousel=e,t.fn.carousel.Constructor=n,t.fn.carousel.noConflict=function(){return t.fn.carousel=a,this},t(document).on("click.bs.carousel.data-api","[data-slide], [data-slide-to]",function(n){var a,i=t(this),r=t(i.attr("data-target")||(a=i.attr("href"))&&a.replace(/.*(?=#[^\s]+$)/,""));if(r.hasClass("carousel")){var o=t.extend({},r.data(),i.data()),s=i.attr("data-slide-to");s&&(o.interval=!1),e.call(r,o),s&&r.data("bs.carousel").to(s),n.preventDefault()}}),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var n=t(this);e.call(n,n.data())})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var a=t(this),i=a.data("bs.collapse"),r=t.extend({},n.DEFAULTS,a.data(),"object"==typeof e&&e);!i&&r.toggle&&"show"==e&&(e=!e),i||a.data("bs.collapse",i=new n(this,r)),"string"==typeof e&&i[e]()})}var n=function(e,a){this.$element=t(e),this.options=t.extend({},n.DEFAULTS,a),this.transitioning=null,this.options.parent&&(this.$parent=t(this.options.parent)),this.options.toggle&&this.toggle()};n.VERSION="3.2.0",n.DEFAULTS={toggle:!0},n.prototype.dimension=function(){var t=this.$element.hasClass("width");return t?"width":"height"},n.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var n=t.Event("show.bs.collapse");if(this.$element.trigger(n),!n.isDefaultPrevented()){var a=this.$parent&&this.$parent.find("> .panel > .in");if(a&&a.length){var i=a.data("bs.collapse");if(i&&i.transitioning)return;e.call(a,"hide"),i||a.data("bs.collapse",null)}var r=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[r](0),this.transitioning=1;var o=function(){this.$element.removeClass("collapsing").addClass("collapse in")[r](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return o.call(this);var s=t.camelCase(["scroll",r].join("-"));this.$element.one("bsTransitionEnd",t.proxy(o,this)).emulateTransitionEnd(350)[r](this.$element[0][s])}}},n.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var n=this.dimension();this.$element[n](this.$element[n]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse").removeClass("in"),this.transitioning=1;var a=function(){this.transitioning=0,this.$element.trigger("hidden.bs.collapse").removeClass("collapsing").addClass("collapse")};return t.support.transition?(this.$element[n](0).one("bsTransitionEnd",t.proxy(a,this)).emulateTransitionEnd(350),void 0):a.call(this)}}},n.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()};var a=t.fn.collapse;t.fn.collapse=e,t.fn.collapse.Constructor=n,t.fn.collapse.noConflict=function(){return t.fn.collapse=a,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(n){var a,i=t(this),r=i.attr("data-target")||n.preventDefault()||(a=i.attr("href"))&&a.replace(/.*(?=#[^\s]+$)/,""),o=t(r),s=o.data("bs.collapse"),l=s?"toggle":i.data(),c=i.attr("data-parent"),u=c&&t(c);s&&s.transitioning||(u&&u.find('[data-toggle="collapse"][data-parent="'+c+'"]').not(i).addClass("collapsed"),i[o.hasClass("in")?"addClass":"removeClass"]("collapsed")),e.call(o,l)})}(jQuery),+function(t){"use strict";function e(e){e&&3===e.which||(t(i).remove(),t(r).each(function(){var a=n(t(this)),i={relatedTarget:this};a.hasClass("open")&&(a.trigger(e=t.Event("hide.bs.dropdown",i)),e.isDefaultPrevented()||a.removeClass("open").trigger("hidden.bs.dropdown",i))}))}function n(e){var n=e.attr("data-target");n||(n=e.attr("href"),n=n&&/#[A-Za-z]/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,""));var a=n&&t(n);return a&&a.length?a:e.parent()}function a(e){return this.each(function(){var n=t(this),a=n.data("bs.dropdown");a||n.data("bs.dropdown",a=new o(this)),"string"==typeof e&&a[e].call(n)})}var i=".dropdown-backdrop",r='[data-toggle="dropdown"]',o=function(e){t(e).on("click.bs.dropdown",this.toggle)};o.VERSION="3.2.0",o.prototype.toggle=function(a){var i=t(this);if(!i.is(".disabled, :disabled")){var r=n(i),o=r.hasClass("open");if(e(),!o){"ontouchstart"in document.documentElement&&!r.closest(".navbar-nav").length&&t('<div class="dropdown-backdrop"/>').insertAfter(t(this)).on("click",e);var s={relatedTarget:this};if(r.trigger(a=t.Event("show.bs.dropdown",s)),a.isDefaultPrevented())return;i.trigger("focus"),r.toggleClass("open").trigger("shown.bs.dropdown",s)}return!1}},o.prototype.keydown=function(e){if(/(38|40|27)/.test(e.keyCode)){var a=t(this);if(e.preventDefault(),e.stopPropagation(),!a.is(".disabled, :disabled")){var i=n(a),o=i.hasClass("open");if(!o||o&&27==e.keyCode)return 27==e.which&&i.find(r).trigger("focus"),a.trigger("click");var s=" li:not(.divider):visible a",l=i.find('[role="menu"]'+s+', [role="listbox"]'+s);if(l.length){var c=l.index(l.filter(":focus"));38==e.keyCode&&c>0&&c--,40==e.keyCode&&c<l.length-1&&c++,~c||(c=0),l.eq(c).trigger("focus")}}}};var s=t.fn.dropdown;t.fn.dropdown=a,t.fn.dropdown.Constructor=o,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=s,this},t(document).on("click.bs.dropdown.data-api",e).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",r,o.prototype.toggle).on("keydown.bs.dropdown.data-api",r+', [role="menu"], [role="listbox"]',o.prototype.keydown)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var a=t(this),i=a.data("bs.tab");i||a.data("bs.tab",i=new n(this)),"string"==typeof e&&i[e]()})}var n=function(e){this.element=t(e)};n.VERSION="3.2.0",n.prototype.show=function(){var e=this.element,n=e.closest("ul:not(.dropdown-menu)"),a=e.data("target");if(a||(a=e.attr("href"),a=a&&a.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var i=n.find(".active:last a")[0],r=t.Event("show.bs.tab",{relatedTarget:i});if(e.trigger(r),!r.isDefaultPrevented()){var o=t(a);this.activate(e.closest("li"),n),this.activate(o,o.parent(),function(){e.trigger({type:"shown.bs.tab",relatedTarget:i})})}}},n.prototype.activate=function(e,n,a){function i(){r.removeClass("active").find("> .dropdown-menu > .active").removeClass("active"),e.addClass("active"),o?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu")&&e.closest("li.dropdown").addClass("active"),a&&a()}var r=n.find("> .active"),o=a&&t.support.transition&&r.hasClass("fade");o?r.one("bsTransitionEnd",i).emulateTransitionEnd(150):i(),r.removeClass("in")};var a=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=n,t.fn.tab.noConflict=function(){return t.fn.tab=a,this},t(document).on("click.bs.tab.data-api",'[data-toggle="tab"], [data-toggle="pill"]',function(n){n.preventDefault(),e.call(t(this),"show")})}(jQuery),+function(t){"use strict";function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in e)if(void 0!==t.style[n])return{end:e[n]};return!1}t.fn.emulateTransitionEnd=function(e){var n=!1,a=this;t(this).one("bsTransitionEnd",function(){n=!0});var i=function(){n||t(a).trigger(t.support.transition.end)};return setTimeout(i,e),this},t(function(){t.support.transition=e(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){return t(e.target).is(this)?e.handleObj.handler.apply(this,arguments):void 0}})})}(jQuery),+function(t){"use strict";function e(n,a){var i=t.proxy(this.process,this);this.$body=t("body"),this.$scrollElement=t(n).is("body")?t(window):t(n),this.options=t.extend({},e.DEFAULTS,a),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",i),this.refresh(),this.process()}function n(n){return this.each(function(){var a=t(this),i=a.data("bs.scrollspy"),r="object"==typeof n&&n;i||a.data("bs.scrollspy",i=new e(this,r)),"string"==typeof n&&i[n]()})}e.VERSION="3.2.0",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e="offset",n=0;t.isWindow(this.$scrollElement[0])||(e="position",n=this.$scrollElement.scrollTop()),this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight();var a=this;this.$body.find(this.selector).map(function(){var a=t(this),i=a.data("target")||a.attr("href"),r=/^#./.test(i)&&t(i);return r&&r.length&&r.is(":visible")&&[[r[e]().top+n,i]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){a.offsets.push(this[0]),a.targets.push(this[1])})},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,n=this.getScrollHeight(),a=this.options.offset+n-this.$scrollElement.height(),i=this.offsets,r=this.targets,o=this.activeTarget;if(this.scrollHeight!=n&&this.refresh(),e>=a)return o!=(t=r[r.length-1])&&this.activate(t);if(o&&e<=i[0])return o!=(t=r[0])&&this.activate(t);for(t=i.length;t--;)o!=r[t]&&e>=i[t]&&(!i[t+1]||e<=i[t+1])&&this.activate(r[t])},e.prototype.activate=function(e){this.activeTarget=e,t(this.selector).parentsUntil(this.options.target,".active").removeClass("active");var n=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',a=t(n).parents("li").addClass("active");a.parent(".dropdown-menu").length&&(a=a.closest("li.dropdown").addClass("active")),a.trigger("activate.bs.scrollspy")};var a=t.fn.scrollspy;t.fn.scrollspy=n,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=a,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);n.call(e,e.data())})})}(jQuery),+function(t){"use strict";function e(e,a){return this.each(function(){var i=t(this),r=i.data("bs.modal"),o=t.extend({},n.DEFAULTS,i.data(),"object"==typeof e&&e);r||i.data("bs.modal",r=new n(this,o)),"string"==typeof e?r[e](a):o.show&&r.show(a)})}var n=function(e,n){this.options=n,this.$body=t(document.body),this.$element=t(e),this.$backdrop=this.isShown=null,this.scrollbarWidth=0,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};n.VERSION="3.2.0",n.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},n.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},n.prototype.show=function(e){var n=this,a=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(a),this.isShown||a.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.$body.addClass("modal-open"),this.setScrollbar(),this.escape(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.backdrop(function(){var a=t.support.transition&&n.$element.hasClass("fade");n.$element.parent().length||n.$element.appendTo(n.$body),n.$element.show().scrollTop(0),a&&n.$element[0].offsetWidth,n.$element.addClass("in").attr("aria-hidden",!1),n.enforceFocus();var i=t.Event("shown.bs.modal",{relatedTarget:e});a?n.$element.find(".modal-dialog").one("bsTransitionEnd",function(){n.$element.trigger("focus").trigger(i)}).emulateTransitionEnd(300):n.$element.trigger("focus").trigger(i)}))},n.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.$body.removeClass("modal-open"),this.resetScrollbar(),this.escape(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").attr("aria-hidden",!0).off("click.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(300):this.hideModal())},n.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},n.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keyup.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keyup.dismiss.bs.modal")},n.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$element.trigger("hidden.bs.modal")})},n.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},n.prototype.backdrop=function(e){var n=this,a=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var i=t.support.transition&&a;if(this.$backdrop=t('<div class="modal-backdrop '+a+'" />').appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus.call(this.$element[0]):this.hide.call(this))},this)),i&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;i?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(150):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var r=function(){n.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",r).emulateTransitionEnd(150):r()}else e&&e()},n.prototype.checkScrollbar=function(){document.body.clientWidth>=window.innerWidth||(this.scrollbarWidth=this.scrollbarWidth||this.measureScrollbar())},n.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.scrollbarWidth&&this.$body.css("padding-right",t+this.scrollbarWidth)},n.prototype.resetScrollbar=function(){this.$body.css("padding-right","")},n.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var a=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=n,t.fn.modal.noConflict=function(){return t.fn.modal=a,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(n){var a=t(this),i=a.attr("href"),r=t(a.attr("data-target")||i&&i.replace(/.*(?=#[^\s]+$)/,"")),o=r.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(i)&&i},r.data(),a.data());a.is("a")&&n.preventDefault(),r.one("show.bs.modal",function(t){t.isDefaultPrevented()||r.one("hidden.bs.modal",function(){a.is(":visible")&&a.trigger("focus")})}),e.call(r,o,this)})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var a=t(this),i=a.data("bs.tooltip"),r="object"==typeof e&&e;(i||"destroy"!=e)&&(i||a.data("bs.tooltip",i=new n(this,r)),"string"==typeof e&&i[e]())})}var n=function(t,e){this.type=this.options=this.enabled=this.timeout=this.hoverState=this.$element=null,this.init("tooltip",t,e)};n.VERSION="3.2.0",n.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},n.prototype.init=function(e,n,a){this.enabled=!0,this.type=e,this.$element=t(n),this.options=this.getOptions(a),this.$viewport=this.options.viewport&&t(this.options.viewport.selector||this.options.viewport);for(var i=this.options.trigger.split(" "),r=i.length;r--;){var o=i[r];if("click"==o)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=o){var s="hover"==o?"mouseenter":"focusin",l="hover"==o?"mouseleave":"focusout";this.$element.on(s+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.getOptions=function(e){return e=t.extend({},this.getDefaults(),this.$element.data(),e),e.delay&&"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e},n.prototype.getDelegateOptions=function(){var e={},n=this.getDefaults();return this._options&&t.each(this._options,function(t,a){n[t]!=a&&(e[t]=a)}),e},n.prototype.enter=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),clearTimeout(n.timeout),n.hoverState="in",n.options.delay&&n.options.delay.show?(n.timeout=setTimeout(function(){"in"==n.hoverState&&n.show()},n.options.delay.show),void 0):n.show()},n.prototype.leave=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),clearTimeout(n.timeout),n.hoverState="out",n.options.delay&&n.options.delay.hide?(n.timeout=setTimeout(function(){"out"==n.hoverState&&n.hide()},n.options.delay.hide),void 0):n.hide()},n.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var n=t.contains(document.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!n)return;var a=this,i=this.tip(),r=this.getUID(this.type);this.setContent(),i.attr("id",r),this.$element.attr("aria-describedby",r),this.options.animation&&i.addClass("fade");var o="function"==typeof this.options.placement?this.options.placement.call(this,i[0],this.$element[0]):this.options.placement,s=/\s?auto?\s?/i,l=s.test(o);l&&(o=o.replace(s,"")||"top"),i.detach().css({top:0,left:0,display:"block"}).addClass(o).data("bs."+this.type,this),this.options.container?i.appendTo(this.options.container):i.insertAfter(this.$element);var c=this.getPosition(),u=i[0].offsetWidth,p=i[0].offsetHeight;if(l){var d=o,f=this.$element.parent(),h=this.getPosition(f);o="bottom"==o&&c.top+c.height+p-h.scroll>h.height?"top":"top"==o&&c.top-h.scroll-p<0?"bottom":"right"==o&&c.right+u>h.width?"left":"left"==o&&c.left-u<h.left?"right":o,i.removeClass(d).addClass(o)}var g=this.getCalculatedOffset(o,c,u,p);this.applyPlacement(g,o);var m=function(){a.$element.trigger("shown.bs."+a.type),a.hoverState=null};t.support.transition&&this.$tip.hasClass("fade")?i.one("bsTransitionEnd",m).emulateTransitionEnd(150):m()}},n.prototype.applyPlacement=function(e,n){var a=this.tip(),i=a[0].offsetWidth,r=a[0].offsetHeight,o=parseInt(a.css("margin-top"),10),s=parseInt(a.css("margin-left"),10);isNaN(o)&&(o=0),isNaN(s)&&(s=0),e.top=e.top+o,e.left=e.left+s,t.offset.setOffset(a[0],t.extend({using:function(t){a.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),a.addClass("in");var l=a[0].offsetWidth,c=a[0].offsetHeight;"top"==n&&c!=r&&(e.top=e.top+r-c);var u=this.getViewportAdjustedDelta(n,e,l,c);u.left?e.left+=u.left:e.top+=u.top;var p=u.left?2*u.left-i+l:2*u.top-r+c,d=u.left?"left":"top",f=u.left?"offsetWidth":"offsetHeight";a.offset(e),this.replaceArrow(p,a[0][f],d)},n.prototype.replaceArrow=function(t,e,n){this.arrow().css(n,t?50*(1-t/e)+"%":"")},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},n.prototype.hide=function(){function e(){"in"!=n.hoverState&&a.detach(),n.$element.trigger("hidden.bs."+n.type)}var n=this,a=this.tip(),i=t.Event("hide.bs."+this.type);return this.$element.removeAttr("aria-describedby"),this.$element.trigger(i),i.isDefaultPrevented()?void 0:(a.removeClass("in"),t.support.transition&&this.$tip.hasClass("fade")?a.one("bsTransitionEnd",e).emulateTransitionEnd(150):e(),this.hoverState=null,this)},n.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},n.prototype.hasContent=function(){return this.getTitle()},n.prototype.getPosition=function(e){e=e||this.$element;var n=e[0],a="BODY"==n.tagName;return t.extend({},"function"==typeof n.getBoundingClientRect?n.getBoundingClientRect():null,{scroll:a?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop(),width:a?t(window).width():e.outerWidth(),height:a?t(window).height():e.outerHeight()},a?{top:0,left:0}:e.offset())},n.prototype.getCalculatedOffset=function(t,e,n,a){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-n/2}:"top"==t?{top:e.top-a,left:e.left+e.width/2-n/2}:"left"==t?{top:e.top+e.height/2-a/2,left:e.left-n}:{top:e.top+e.height/2-a/2,left:e.left+e.width}},n.prototype.getViewportAdjustedDelta=function(t,e,n,a){var i={top:0,left:0};if(!this.$viewport)return i;var r=this.options.viewport&&this.options.viewport.padding||0,o=this.getPosition(this.$viewport);if(/right|left/.test(t)){var s=e.top-r-o.scroll,l=e.top+r-o.scroll+a;s<o.top?i.top=o.top-s:l>o.top+o.height&&(i.top=o.top+o.height-l)}else{var c=e.left-r,u=e.left+r+n;c<o.left?i.left=o.left-c:u>o.width&&(i.left=o.left+o.width-u)}return i},n.prototype.getTitle=function(){var t,e=this.$element,n=this.options;return t=e.attr("data-original-title")||("function"==typeof n.title?n.title.call(e[0]):n.title)},n.prototype.getUID=function(t){do t+=~~(1e6*Math.random());while(document.getElementById(t));return t},n.prototype.tip=function(){return this.$tip=this.$tip||t(this.options.template)},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},n.prototype.validate=function(){this.$element[0].parentNode||(this.hide(),this.$element=null,this.options=null)},n.prototype.enable=function(){this.enabled=!0},n.prototype.disable=function(){this.enabled=!1},n.prototype.toggleEnabled=function(){this.enabled=!this.enabled},n.prototype.toggle=function(e){var n=this;e&&(n=t(e.currentTarget).data("bs."+this.type),n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n))),n.tip().hasClass("in")?n.leave(n):n.enter(n)},n.prototype.destroy=function(){clearTimeout(this.timeout),this.hide().$element.off("."+this.type).removeData("bs."+this.type)};var a=t.fn.tooltip;t.fn.tooltip=e,t.fn.tooltip.Constructor=n,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=a,this}}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var a=t(this),i=a.data("bs.popover"),r="object"==typeof e&&e;(i||"destroy"!=e)&&(i||a.data("bs.popover",i=new n(this,r)),"string"==typeof e&&i[e]())})}var n=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");n.VERSION="3.2.0",n.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),n.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),n.prototype.constructor=n,n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),n=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").empty()[this.options.html?"string"==typeof n?"html":"append":"text"](n),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},n.prototype.hasContent=function(){return this.getTitle()||this.getContent()},n.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")},n.prototype.tip=function(){return this.$tip||(this.$tip=t(this.options.template)),this.$tip};var a=t.fn.popover;t.fn.popover=e,t.fn.popover.Constructor=n,t.fn.popover.noConflict=function(){return t.fn.popover=a,this}}(jQuery),angular.module("ui.bootstrap",["ui.bootstrap.tpls","ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.bindHtml","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.position","ui.bootstrap.datepicker","ui.bootstrap.dropdown","ui.bootstrap.modal","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.transition","ui.bootstrap.typeahead"]),angular.module("ui.bootstrap.tpls",["template/accordion/accordion-group.html","template/accordion/accordion.html","template/alert/alert.html","template/carousel/carousel.html","template/carousel/slide.html","template/datepicker/datepicker.html","template/datepicker/day.html","template/datepicker/month.html","template/datepicker/popup.html","template/datepicker/year.html","template/modal/backdrop.html","template/modal/window.html","template/pagination/pager.html","template/pagination/pagination.html","template/tooltip/tooltip-html-popup.html","template/tooltip/tooltip-html-unsafe-popup.html","template/tooltip/tooltip-popup.html","template/tooltip/tooltip-template-popup.html","template/popover/popover-template.html","template/popover/popover.html","template/progressbar/bar.html","template/progressbar/progress.html","template/progressbar/progressbar.html","template/rating/rating.html","template/tabs/tab.html","template/tabs/tabset.html","template/timepicker/timepicker.html","template/typeahead/typeahead-match.html","template/typeahead/typeahead-popup.html"]),angular.module("ui.bootstrap.collapse",[]).directive("collapse",["$animate",function(t){return{link:function(e,n,a){function i(){n.removeClass("collapse").addClass("collapsing").attr("aria-expanded",!0).attr("aria-hidden",!1),t.addClass(n,"in",{to:{height:n[0].scrollHeight+"px"}}).then(r)}function r(){n.removeClass("collapsing"),n.css({height:"auto"})}function o(){return n.hasClass("collapse")||n.hasClass("in")?(n.css({height:n[0].scrollHeight+"px"}).removeClass("collapse").addClass("collapsing").attr("aria-expanded",!1).attr("aria-hidden",!0),t.removeClass(n,"in",{to:{height:"0"}}).then(s),void 0):s()}function s(){n.css({height:"0"}),n.removeClass("collapsing"),n.addClass("collapse")}e.$watch(a.collapse,function(t){t?o():i()})}}}]),angular.module("ui.bootstrap.accordion",["ui.bootstrap.collapse"]).constant("accordionConfig",{closeOthers:!0}).controller("AccordionController",["$scope","$attrs","accordionConfig",function(t,e,n){this.groups=[],this.closeOthers=function(a){var i=angular.isDefined(e.closeOthers)?t.$eval(e.closeOthers):n.closeOthers;i&&angular.forEach(this.groups,function(t){t!==a&&(t.isOpen=!1)})},this.addGroup=function(t){var e=this;this.groups.push(t),t.$on("$destroy",function(){e.removeGroup(t)})},this.removeGroup=function(t){var e=this.groups.indexOf(t);-1!==e&&this.groups.splice(e,1)}}]).directive("accordion",function(){return{restrict:"EA",controller:"AccordionController",transclude:!0,replace:!1,templateUrl:"template/accordion/accordion.html"}}).directive("accordionGroup",function(){return{require:"^accordion",restrict:"EA",transclude:!0,replace:!0,templateUrl:"template/accordion/accordion-group.html",scope:{heading:"@",isOpen:"=?",isDisabled:"=?"},controller:function(){this.setHeading=function(t){this.heading=t}},link:function(t,e,n,a){a.addGroup(t),t.$watch("isOpen",function(e){e&&a.closeOthers(t)}),t.toggleOpen=function(){t.isDisabled||(t.isOpen=!t.isOpen)}}}}).directive("accordionHeading",function(){return{restrict:"EA",transclude:!0,template:"",replace:!0,require:"^accordionGroup",link:function(t,e,n,a,i){a.setHeading(i(t,angular.noop))}}}).directive("accordionTransclude",function(){return{require:"^accordionGroup",link:function(t,e,n,a){t.$watch(function(){return a[n.accordionTransclude]},function(t){t&&(e.html(""),e.append(t))})}}}),angular.module("ui.bootstrap.alert",[]).controller("AlertController",["$scope","$attrs",function(t,e){t.closeable=!!e.close,this.close=t.close}]).directive("alert",function(){return{restrict:"EA",controller:"AlertController",templateUrl:"template/alert/alert.html",transclude:!0,replace:!0,scope:{type:"@",close:"&"}}}).directive("dismissOnTimeout",["$timeout",function(t){return{require:"alert",link:function(e,n,a,i){t(function(){i.close()},parseInt(a.dismissOnTimeout,10))}}}]),angular.module("ui.bootstrap.bindHtml",[]).value("$bindHtmlUnsafeSuppressDeprecated",!1).directive("bindHtmlUnsafe",["$log","$bindHtmlUnsafeSuppressDeprecated",function(t,e){return function(n,a,i){e||t.warn("bindHtmlUnsafe is now deprecated. Use ngBindHtml instead"),a.addClass("ng-binding").data("$binding",i.bindHtmlUnsafe),n.$watch(i.bindHtmlUnsafe,function(t){a.html(t||"")})}}]),angular.module("ui.bootstrap.buttons",[]).constant("buttonConfig",{activeClass:"active",toggleEvent:"click"}).controller("ButtonsController",["buttonConfig",function(t){this.activeClass=t.activeClass||"active",this.toggleEvent=t.toggleEvent||"click"}]).directive("btnRadio",function(){return{require:["btnRadio","ngModel"],controller:"ButtonsController",link:function(t,e,n,a){var i=a[0],r=a[1];r.$render=function(){e.toggleClass(i.activeClass,angular.equals(r.$modelValue,t.$eval(n.btnRadio)))},e.bind(i.toggleEvent,function(){var a=e.hasClass(i.activeClass);(!a||angular.isDefined(n.uncheckable))&&t.$apply(function(){r.$setViewValue(a?null:t.$eval(n.btnRadio)),r.$render()})})}}}).directive("btnCheckbox",function(){return{require:["btnCheckbox","ngModel"],controller:"ButtonsController",link:function(t,e,n,a){function i(){return o(n.btnCheckboxTrue,!0)}function r(){return o(n.btnCheckboxFalse,!1)}function o(e,n){var a=t.$eval(e);return angular.isDefined(a)?a:n}var s=a[0],l=a[1];l.$render=function(){e.toggleClass(s.activeClass,angular.equals(l.$modelValue,i()))},e.bind(s.toggleEvent,function(){t.$apply(function(){l.$setViewValue(e.hasClass(s.activeClass)?r():i()),l.$render()})})}}}),angular.module("ui.bootstrap.carousel",[]).controller("CarouselController",["$scope","$element","$interval","$animate",function(t,e,n,a){function i(e,n,i){m||(angular.extend(e,{direction:i,active:!0}),angular.extend(p.currentSlide||{},{direction:i,active:!1}),a.enabled()&&!t.noTransition&&!t.$currentTransition&&e.$element&&(e.$element.data(h,e.direction),t.$currentTransition=!0,e.$element.one("$animate:close",function(){t.$currentTransition=null})),p.currentSlide=e,g=n,o())}function r(t){if(angular.isUndefined(d[t].index))return d[t];{var e;d.length}for(e=0;e<d.length;++e)if(d[e].index==t)return d[e]}function o(){s();var e=+t.interval;!isNaN(e)&&e>0&&(c=n(l,e))
}function s(){c&&(n.cancel(c),c=null)}function l(){var e=+t.interval;u&&!isNaN(e)&&e>0&&d.length?t.next():t.pause()}var c,u,p=this,d=p.slides=t.slides=[],f="uib-noTransition",h="uib-slideDirection",g=-1;p.currentSlide=null;var m=!1;p.select=t.select=function(e,n){var a=p.indexOfSlide(e);void 0===n&&(n=a>p.getCurrentIndex()?"next":"prev"),e&&e!==p.currentSlide&&!t.$currentTransition&&i(e,a,n)},t.$on("$destroy",function(){m=!0}),p.getCurrentIndex=function(){return p.currentSlide&&angular.isDefined(p.currentSlide.index)?+p.currentSlide.index:g},p.indexOfSlide=function(t){return angular.isDefined(t.index)?+t.index:d.indexOf(t)},t.next=function(){var e=(p.getCurrentIndex()+1)%d.length;return 0===e&&t.noWrap()?(t.pause(),void 0):p.select(r(e),"next")},t.prev=function(){var e=p.getCurrentIndex()-1<0?d.length-1:p.getCurrentIndex()-1;return t.noWrap()&&e===d.length-1?(t.pause(),void 0):p.select(r(e),"prev")},t.isActive=function(t){return p.currentSlide===t},t.$watch("interval",o),t.$on("$destroy",s),t.play=function(){u||(u=!0,o())},t.pause=function(){t.noPause||(u=!1,s())},p.addSlide=function(e,n){e.$element=n,d.push(e),1===d.length||e.active?(p.select(d[d.length-1]),1==d.length&&t.play()):e.active=!1},p.removeSlide=function(t){angular.isDefined(t.index)&&d.sort(function(t,e){return+t.index>+e.index});var e=d.indexOf(t);d.splice(e,1),d.length>0&&t.active?e>=d.length?p.select(d[e-1]):p.select(d[e]):g>e&&g--},t.$watch("noTransition",function(t){e.data(f,t)})}]).directive("carousel",[function(){return{restrict:"EA",transclude:!0,replace:!0,controller:"CarouselController",require:"carousel",templateUrl:"template/carousel/carousel.html",scope:{interval:"=",noTransition:"=",noPause:"=",noWrap:"&"}}}]).directive("slide",function(){return{require:"^carousel",restrict:"EA",transclude:!0,replace:!0,templateUrl:"template/carousel/slide.html",scope:{active:"=?",index:"=?"},link:function(t,e,n,a){a.addSlide(t,e),t.$on("$destroy",function(){a.removeSlide(t)}),t.$watch("active",function(e){e&&a.select(t)})}}}).animation(".item",["$animate",function(t){var e="uib-noTransition",n="uib-slideDirection";return{beforeAddClass:function(a,i,r){if("active"==i&&a.parent()&&!a.parent().data(e)){var o=!1,s=a.data(n),l="next"==s?"left":"right";return a.addClass(s),t.addClass(a,l).then(function(){o||a.removeClass(l+" "+s),r()}),function(){o=!0}}r()},beforeRemoveClass:function(a,i,r){if("active"==i&&a.parent()&&!a.parent().data(e)){var o=!1,s=a.data(n),l="next"==s?"left":"right";return t.addClass(a,l).then(function(){o||a.removeClass(l),r()}),function(){o=!0}}r()}}}]),angular.module("ui.bootstrap.dateparser",[]).service("dateParser",["$locale","orderByFilter",function(t,e){function n(t){var n=[],a=t.split("");return angular.forEach(r,function(e,i){var r=t.indexOf(i);if(r>-1){t=t.split(""),a[r]="("+e.regex+")",t[r]="$";for(var o=r+1,s=r+i.length;s>o;o++)a[o]="",t[o]="$";t=t.join(""),n.push({index:r,apply:e.apply})}}),{regex:new RegExp("^"+a.join("")+"$"),map:e(n,"index")}}function a(t,e,n){return 1>n?!1:1===e&&n>28?29===n&&(t%4===0&&t%100!==0||t%400===0):3===e||5===e||8===e||10===e?31>n:!0}var i=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;this.parsers={};var r={yyyy:{regex:"\\d{4}",apply:function(t){this.year=+t}},yy:{regex:"\\d{2}",apply:function(t){this.year=+t+2e3}},y:{regex:"\\d{1,4}",apply:function(t){this.year=+t}},MMMM:{regex:t.DATETIME_FORMATS.MONTH.join("|"),apply:function(e){this.month=t.DATETIME_FORMATS.MONTH.indexOf(e)}},MMM:{regex:t.DATETIME_FORMATS.SHORTMONTH.join("|"),apply:function(e){this.month=t.DATETIME_FORMATS.SHORTMONTH.indexOf(e)}},MM:{regex:"0[1-9]|1[0-2]",apply:function(t){this.month=t-1}},M:{regex:"[1-9]|1[0-2]",apply:function(t){this.month=t-1}},dd:{regex:"[0-2][0-9]{1}|3[0-1]{1}",apply:function(t){this.date=+t}},d:{regex:"[1-2]?[0-9]{1}|3[0-1]{1}",apply:function(t){this.date=+t}},EEEE:{regex:t.DATETIME_FORMATS.DAY.join("|")},EEE:{regex:t.DATETIME_FORMATS.SHORTDAY.join("|")},HH:{regex:"(?:0|1)[0-9]|2[0-3]",apply:function(t){this.hours=+t}},H:{regex:"1?[0-9]|2[0-3]",apply:function(t){this.hours=+t}},mm:{regex:"[0-5][0-9]",apply:function(t){this.minutes=+t}},m:{regex:"[0-9]|[1-5][0-9]",apply:function(t){this.minutes=+t}},sss:{regex:"[0-9][0-9][0-9]",apply:function(t){this.milliseconds=+t}},ss:{regex:"[0-5][0-9]",apply:function(t){this.seconds=+t}},s:{regex:"[0-9]|[1-5][0-9]",apply:function(t){this.seconds=+t}}};this.parse=function(e,r,o){if(!angular.isString(e)||!r)return e;r=t.DATETIME_FORMATS[r]||r,r=r.replace(i,"\\$&"),this.parsers[r]||(this.parsers[r]=n(r));var s=this.parsers[r],l=s.regex,c=s.map,u=e.match(l);if(u&&u.length){var p,d;p=o?{year:o.getFullYear(),month:o.getMonth(),date:o.getDate(),hours:o.getHours(),minutes:o.getMinutes(),seconds:o.getSeconds(),milliseconds:o.getMilliseconds()}:{year:1900,month:0,date:1,hours:0,minutes:0,seconds:0,milliseconds:0};for(var f=1,h=u.length;h>f;f++){var g=c[f-1];g.apply&&g.apply.call(p,u[f])}return a(p.year,p.month,p.date)&&(d=new Date(p.year,p.month,p.date,p.hours,p.minutes,p.seconds,p.milliseconds||0)),d}}}]),angular.module("ui.bootstrap.position",[]).factory("$position",["$document","$window",function(t,e){function n(t,n){return t.currentStyle?t.currentStyle[n]:e.getComputedStyle?e.getComputedStyle(t)[n]:t.style[n]}function a(t){return"static"===(n(t,"position")||"static")}var i=function(e){for(var n=t[0],i=e.offsetParent||n;i&&i!==n&&a(i);)i=i.offsetParent;return i||n};return{position:function(e){var n=this.offset(e),a={top:0,left:0},r=i(e[0]);r!=t[0]&&(a=this.offset(angular.element(r)),a.top+=r.clientTop-r.scrollTop,a.left+=r.clientLeft-r.scrollLeft);var o=e[0].getBoundingClientRect();return{width:o.width||e.prop("offsetWidth"),height:o.height||e.prop("offsetHeight"),top:n.top-a.top,left:n.left-a.left}},offset:function(n){var a=n[0].getBoundingClientRect();return{width:a.width||n.prop("offsetWidth"),height:a.height||n.prop("offsetHeight"),top:a.top+(e.pageYOffset||t[0].documentElement.scrollTop),left:a.left+(e.pageXOffset||t[0].documentElement.scrollLeft)}},positionElements:function(t,e,n,a){var i,r,o,s,l=n.split("-"),c=l[0],u=l[1]||"center";i=a?this.offset(t):this.position(t),r=e.prop("offsetWidth"),o=e.prop("offsetHeight");var p={center:function(){return i.left+i.width/2-r/2},left:function(){return i.left},right:function(){return i.left+i.width}},d={center:function(){return i.top+i.height/2-o/2},top:function(){return i.top},bottom:function(){return i.top+i.height}};switch(c){case"right":s={top:d[u](),left:p[c]()};break;case"left":s={top:d[u](),left:i.left-r};break;case"bottom":s={top:d[c](),left:p[u]()};break;default:s={top:i.top-o,left:p[u]()}}return s}}}]),angular.module("ui.bootstrap.datepicker",["ui.bootstrap.dateparser","ui.bootstrap.position"]).constant("datepickerConfig",{formatDay:"dd",formatMonth:"MMMM",formatYear:"yyyy",formatDayHeader:"EEE",formatDayTitle:"MMMM yyyy",formatMonthTitle:"yyyy",datepickerMode:"day",minMode:"day",maxMode:"year",showWeeks:!0,startingDay:0,yearRange:20,minDate:null,maxDate:null,shortcutPropagation:!1}).controller("DatepickerController",["$scope","$attrs","$parse","$interpolate","$log","dateFilter","datepickerConfig",function(t,e,n,a,i,r,o){var s=this,l={$setViewValue:angular.noop};this.modes=["day","month","year"],angular.forEach(["formatDay","formatMonth","formatYear","formatDayHeader","formatDayTitle","formatMonthTitle","minMode","maxMode","showWeeks","startingDay","yearRange","shortcutPropagation"],function(n,i){s[n]=angular.isDefined(e[n])?8>i?a(e[n])(t.$parent):t.$parent.$eval(e[n]):o[n]}),angular.forEach(["minDate","maxDate"],function(a){e[a]?t.$parent.$watch(n(e[a]),function(t){s[a]=t?new Date(t):null,s.refreshView()}):s[a]=o[a]?new Date(o[a]):null}),t.datepickerMode=t.datepickerMode||o.datepickerMode,t.maxMode=s.maxMode,t.uniqueId="datepicker-"+t.$id+"-"+Math.floor(1e4*Math.random()),angular.isDefined(e.initDate)?(this.activeDate=t.$parent.$eval(e.initDate)||new Date,t.$parent.$watch(e.initDate,function(t){t&&(l.$isEmpty(l.$modelValue)||l.$invalid)&&(s.activeDate=t,s.refreshView())})):this.activeDate=new Date,t.isActive=function(e){return 0===s.compare(e.date,s.activeDate)?(t.activeDateId=e.uid,!0):!1},this.init=function(t){l=t,l.$render=function(){s.render()}},this.render=function(){if(l.$viewValue){var t=new Date(l.$viewValue),e=!isNaN(t);e?this.activeDate=t:i.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.'),l.$setValidity("date",e)}this.refreshView()},this.refreshView=function(){if(this.element){this._refreshView();var t=l.$viewValue?new Date(l.$viewValue):null;l.$setValidity("date-disabled",!t||this.element&&!this.isDisabled(t))}},this.createDateObject=function(t,e){var n=l.$viewValue?new Date(l.$viewValue):null;return{date:t,label:r(t,e),selected:n&&0===this.compare(t,n),disabled:this.isDisabled(t),current:0===this.compare(t,new Date),customClass:this.customClass(t)}},this.isDisabled=function(n){return this.minDate&&this.compare(n,this.minDate)<0||this.maxDate&&this.compare(n,this.maxDate)>0||e.dateDisabled&&t.dateDisabled({date:n,mode:t.datepickerMode})},this.customClass=function(e){return t.customClass({date:e,mode:t.datepickerMode})},this.split=function(t,e){for(var n=[];t.length>0;)n.push(t.splice(0,e));return n},this.fixTimeZone=function(t){var e=t.getHours();t.setHours(23===e?e+2:0)},t.select=function(e){if(t.datepickerMode===s.minMode){var n=l.$viewValue?new Date(l.$viewValue):new Date(0,0,0,0,0,0,0);n.setFullYear(e.getFullYear(),e.getMonth(),e.getDate()),l.$setViewValue(n),l.$render()}else s.activeDate=e,t.datepickerMode=s.modes[s.modes.indexOf(t.datepickerMode)-1]},t.move=function(t){var e=s.activeDate.getFullYear()+t*(s.step.years||0),n=s.activeDate.getMonth()+t*(s.step.months||0);s.activeDate.setFullYear(e,n,1),s.refreshView()},t.toggleMode=function(e){e=e||1,t.datepickerMode===s.maxMode&&1===e||t.datepickerMode===s.minMode&&-1===e||(t.datepickerMode=s.modes[s.modes.indexOf(t.datepickerMode)+e])},t.keys={13:"enter",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down"};var c=function(){s.element[0].focus()};t.$on("datepicker.focus",c),t.keydown=function(e){var n=t.keys[e.which];if(n&&!e.shiftKey&&!e.altKey)if(e.preventDefault(),s.shortcutPropagation||e.stopPropagation(),"enter"===n||"space"===n){if(s.isDisabled(s.activeDate))return;t.select(s.activeDate),c()}else!e.ctrlKey||"up"!==n&&"down"!==n?(s.handleKeyDown(n,e),s.refreshView()):(t.toggleMode("up"===n?1:-1),c())}}]).directive("datepicker",function(){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/datepicker.html",scope:{datepickerMode:"=?",dateDisabled:"&",customClass:"&",shortcutPropagation:"&?"},require:["datepicker","?^ngModel"],controller:"DatepickerController",link:function(t,e,n,a){var i=a[0],r=a[1];r&&i.init(r)}}}).directive("daypicker",["dateFilter",function(t){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/day.html",require:"^datepicker",link:function(e,n,a,i){function r(t,e){return 1!==e||t%4!==0||t%100===0&&t%400!==0?l[e]:29}function o(t,e){for(var n,a=new Array(e),r=new Date(t),o=0;e>o;)n=new Date(r),i.fixTimeZone(n),a[o++]=n,r.setDate(r.getDate()+1);return a}function s(t){var e=new Date(t);e.setDate(e.getDate()+4-(e.getDay()||7));var n=e.getTime();return e.setMonth(0),e.setDate(1),Math.floor(Math.round((n-e)/864e5)/7)+1}e.showWeeks=i.showWeeks,i.step={months:1},i.element=n;var l=[31,28,31,30,31,30,31,31,30,31,30,31];i._refreshView=function(){var n=i.activeDate.getFullYear(),a=i.activeDate.getMonth(),r=new Date(n,a,1),l=i.startingDay-r.getDay(),c=l>0?7-l:-l,u=new Date(r);c>0&&u.setDate(-c+1);for(var p=o(u,42),d=0;42>d;d++)p[d]=angular.extend(i.createDateObject(p[d],i.formatDay),{secondary:p[d].getMonth()!==a,uid:e.uniqueId+"-"+d});e.labels=new Array(7);for(var f=0;7>f;f++)e.labels[f]={abbr:t(p[f].date,i.formatDayHeader),full:t(p[f].date,"EEEE")};if(e.title=t(i.activeDate,i.formatDayTitle),e.rows=i.split(p,7),e.showWeeks){e.weekNumbers=[];for(var h=(11-i.startingDay)%7,g=e.rows.length,m=0;g>m;m++)e.weekNumbers.push(s(e.rows[m][h].date))}},i.compare=function(t,e){return new Date(t.getFullYear(),t.getMonth(),t.getDate())-new Date(e.getFullYear(),e.getMonth(),e.getDate())},i.handleKeyDown=function(t){var e=i.activeDate.getDate();if("left"===t)e-=1;else if("up"===t)e-=7;else if("right"===t)e+=1;else if("down"===t)e+=7;else if("pageup"===t||"pagedown"===t){var n=i.activeDate.getMonth()+("pageup"===t?-1:1);i.activeDate.setMonth(n,1),e=Math.min(r(i.activeDate.getFullYear(),i.activeDate.getMonth()),e)}else"home"===t?e=1:"end"===t&&(e=r(i.activeDate.getFullYear(),i.activeDate.getMonth()));i.activeDate.setDate(e)},i.refreshView()}}}]).directive("monthpicker",["dateFilter",function(t){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/month.html",require:"^datepicker",link:function(e,n,a,i){i.step={years:1},i.element=n,i._refreshView=function(){for(var n,a=new Array(12),r=i.activeDate.getFullYear(),o=0;12>o;o++)n=new Date(r,o,1),i.fixTimeZone(n),a[o]=angular.extend(i.createDateObject(n,i.formatMonth),{uid:e.uniqueId+"-"+o});e.title=t(i.activeDate,i.formatMonthTitle),e.rows=i.split(a,3)},i.compare=function(t,e){return new Date(t.getFullYear(),t.getMonth())-new Date(e.getFullYear(),e.getMonth())},i.handleKeyDown=function(t){var e=i.activeDate.getMonth();if("left"===t)e-=1;else if("up"===t)e-=3;else if("right"===t)e+=1;else if("down"===t)e+=3;else if("pageup"===t||"pagedown"===t){var n=i.activeDate.getFullYear()+("pageup"===t?-1:1);i.activeDate.setFullYear(n)}else"home"===t?e=0:"end"===t&&(e=11);i.activeDate.setMonth(e)},i.refreshView()}}}]).directive("yearpicker",["dateFilter",function(){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/year.html",require:"^datepicker",link:function(t,e,n,a){function i(t){return parseInt((t-1)/r,10)*r+1}var r=a.yearRange;a.step={years:r},a.element=e,a._refreshView=function(){for(var e,n=new Array(r),o=0,s=i(a.activeDate.getFullYear());r>o;o++)e=new Date(s+o,0,1),a.fixTimeZone(e),n[o]=angular.extend(a.createDateObject(e,a.formatYear),{uid:t.uniqueId+"-"+o});t.title=[n[0].label,n[r-1].label].join(" - "),t.rows=a.split(n,5)},a.compare=function(t,e){return t.getFullYear()-e.getFullYear()},a.handleKeyDown=function(t){var e=a.activeDate.getFullYear();"left"===t?e-=1:"up"===t?e-=5:"right"===t?e+=1:"down"===t?e+=5:"pageup"===t||"pagedown"===t?e+=("pageup"===t?-1:1)*a.step.years:"home"===t?e=i(a.activeDate.getFullYear()):"end"===t&&(e=i(a.activeDate.getFullYear())+r-1),a.activeDate.setFullYear(e)},a.refreshView()}}}]).constant("datepickerPopupConfig",{datepickerPopup:"yyyy-MM-dd",html5Types:{date:"yyyy-MM-dd","datetime-local":"yyyy-MM-ddTHH:mm:ss.sss",month:"yyyy-MM"},currentText:"Today",clearText:"Clear",closeText:"Done",closeOnDateSelection:!0,appendToBody:!1,showButtonBar:!0}).directive("datepickerPopup",["$compile","$parse","$document","$position","dateFilter","dateParser","datepickerPopupConfig","$timeout",function(t,e,n,a,i,r,o,s){return{restrict:"EA",require:"ngModel",scope:{isOpen:"=?",currentText:"@",clearText:"@",closeText:"@",dateDisabled:"&",customClass:"&"},link:function(l,c,u,p){function d(t){return t.replace(/([A-Z])/g,function(t){return"-"+t.toLowerCase()})}function f(t){if(angular.isNumber(t)&&(t=new Date(t)),t){if(angular.isDate(t)&&!isNaN(t))return t;if(angular.isString(t)){var e=r.parse(t,g,l.date)||new Date(t);return isNaN(e)?void 0:e}return void 0}return null}function h(t,e){var n=t||e;if(angular.isNumber(n)&&(n=new Date(n)),n){if(angular.isDate(n)&&!isNaN(n))return!0;if(angular.isString(n)){var a=r.parse(n,g)||new Date(n);return!isNaN(a)}return!1}return!0}var g,m=angular.isDefined(u.closeOnDateSelection)?l.$parent.$eval(u.closeOnDateSelection):o.closeOnDateSelection,v=angular.isDefined(u.datepickerAppendToBody)?l.$parent.$eval(u.datepickerAppendToBody):o.appendToBody;l.showButtonBar=angular.isDefined(u.showButtonBar)?l.$parent.$eval(u.showButtonBar):o.showButtonBar,l.getText=function(t){return l[t+"Text"]||o[t+"Text"]};var b=!1;if(o.html5Types[u.type]?(g=o.html5Types[u.type],b=!0):(g=u.datepickerPopup||o.datepickerPopup,u.$observe("datepickerPopup",function(t){var e=t||o.datepickerPopup;if(e!==g&&(g=e,p.$modelValue=null,!g))throw new Error("datepickerPopup must have a date format specified.")})),!g)throw new Error("datepickerPopup must have a date format specified.");if(b&&u.datepickerPopup)throw new Error("HTML5 date input types do not support custom formats.");var y=angular.element("<div datepicker-popup-wrap><div datepicker></div></div>");y.attr({"ng-model":"date","ng-change":"dateSelection(date)"});var $=angular.element(y.children()[0]);if(b&&"month"==u.type&&($.attr("datepicker-mode",'"month"'),$.attr("min-mode","month")),u.datepickerOptions){var w=l.$parent.$eval(u.datepickerOptions);w.initDate&&(l.initDate=w.initDate,$.attr("init-date","initDate"),delete w.initDate),angular.forEach(w,function(t,e){$.attr(d(e),t)})}l.watchData={},angular.forEach(["minDate","maxDate","datepickerMode","initDate","shortcutPropagation"],function(t){if(u[t]){var n=e(u[t]);if(l.$parent.$watch(n,function(e){l.watchData[t]=e}),$.attr(d(t),"watchData."+t),"datepickerMode"===t){var a=n.assign;l.$watch("watchData."+t,function(t,e){angular.isFunction(a)&&t!==e&&a(l.$parent,t)})}}}),u.dateDisabled&&$.attr("date-disabled","dateDisabled({ date: date, mode: mode })"),u.showWeeks&&$.attr("show-weeks",u.showWeeks),u.customClass&&$.attr("custom-class","customClass({ date: date, mode: mode })"),b?p.$formatters.push(function(t){return l.date=t,t}):(p.$$parserName="date",p.$validators.date=h,p.$parsers.unshift(f),p.$formatters.push(function(t){return l.date=t,p.$isEmpty(t)?t:i(t,g)})),l.dateSelection=function(t){angular.isDefined(t)&&(l.date=t);var e=l.date?i(l.date,g):"";c.val(e),p.$setViewValue(e),m&&(l.isOpen=!1,c[0].focus())},p.$viewChangeListeners.push(function(){l.date=r.parse(p.$viewValue,g,l.date)||new Date(p.$viewValue)});var x=function(t){l.isOpen&&t.target!==c[0]&&l.$apply(function(){l.isOpen=!1})},k=function(t){27===t.which&&l.isOpen?(t.preventDefault(),t.stopPropagation(),l.$apply(function(){l.isOpen=!1}),c[0].focus()):40!==t.which||l.isOpen||(t.preventDefault(),t.stopPropagation(),l.$apply(function(){l.isOpen=!0}))};c.bind("keydown",k),l.keydown=function(t){27===t.which&&(l.isOpen=!1,c[0].focus())},l.$watch("isOpen",function(t){t?(l.position=v?a.offset(c):a.position(c),l.position.top=l.position.top+c.prop("offsetHeight"),n.bind("click",x),s(function(){l.$broadcast("datepicker.focus")},0,!1)):n.unbind("click",x)}),l.select=function(t){if("today"===t){var e=new Date;angular.isDate(l.date)?(t=new Date(l.date),t.setFullYear(e.getFullYear(),e.getMonth(),e.getDate())):t=new Date(e.setHours(0,0,0,0))}l.dateSelection(t)},l.close=function(){l.isOpen=!1,c[0].focus()};var C=t(y)(l);y.remove(),v?n.find("body").append(C):c.after(C),l.$on("$destroy",function(){l.isOpen===!0&&l.$apply(function(){l.isOpen=!1}),C.remove(),c.unbind("keydown",k),n.unbind("click",x)})}}}]).directive("datepickerPopupWrap",function(){return{restrict:"EA",replace:!0,transclude:!0,templateUrl:"template/datepicker/popup.html"}}),angular.module("ui.bootstrap.dropdown",["ui.bootstrap.position"]).constant("dropdownConfig",{openClass:"open"}).service("dropdownService",["$document","$rootScope",function(t,e){var n=null;this.open=function(e){n||(t.bind("click",a),t.bind("keydown",i)),n&&n!==e&&(n.isOpen=!1),n=e},this.close=function(e){n===e&&(n=null,t.unbind("click",a),t.unbind("keydown",i))};var a=function(t){if(n&&(!t||"disabled"!==n.getAutoClose())){var a=n.getToggleElement();if(!(t&&a&&a[0].contains(t.target))){var i=n.getDropdownElement();t&&"outsideClick"===n.getAutoClose()&&i&&i[0].contains(t.target)||(n.isOpen=!1,e.$$phase||n.$apply())}}},i=function(t){27===t.which?(n.focusToggleElement(),a()):n.isKeynavEnabled()&&/(38|40)/.test(t.which)&&n.isOpen&&(t.preventDefault(),t.stopPropagation(),n.focusDropdownEntry(t.which))}}]).controller("DropdownController",["$scope","$attrs","$parse","dropdownConfig","dropdownService","$animate","$position","$document","$compile","$templateRequest",function(t,e,n,a,i,r,o,s,l,c){var u,p,d=this,f=t.$new(),h=a.openClass,g=angular.noop,m=e.onToggle?n(e.onToggle):angular.noop,v=!1,b=!1;this.init=function(a){d.$element=a,e.isOpen&&(p=n(e.isOpen),g=p.assign,t.$watch(p,function(t){f.isOpen=!!t})),v=angular.isDefined(e.dropdownAppendToBody),b=angular.isDefined(e.keyboardNav),v&&d.dropdownMenu&&(s.find("body").append(d.dropdownMenu),a.on("$destroy",function(){d.dropdownMenu.remove()}))},this.toggle=function(t){return f.isOpen=arguments.length?!!t:!f.isOpen},this.isOpen=function(){return f.isOpen},f.getToggleElement=function(){return d.toggleElement},f.getAutoClose=function(){return e.autoClose||"always"},f.getElement=function(){return d.$element},f.isKeynavEnabled=function(){return b},f.focusDropdownEntry=function(t){var e=d.dropdownMenu?angular.element(d.dropdownMenu).find("a"):angular.element(d.$element).find("ul").eq(0).find("a");switch(t){case 40:d.selectedOption=angular.isNumber(d.selectedOption)?d.selectedOption===e.length-1?d.selectedOption:d.selectedOption+1:0;break;case 38:if(!angular.isNumber(d.selectedOption))return;d.selectedOption=0===d.selectedOption?0:d.selectedOption-1}e[d.selectedOption].focus()},f.getDropdownElement=function(){return d.dropdownMenu},f.focusToggleElement=function(){d.toggleElement&&d.toggleElement[0].focus()},f.$watch("isOpen",function(e,n){if(v&&d.dropdownMenu){var a=o.positionElements(d.$element,d.dropdownMenu,"bottom-left",!0),s={top:a.top+"px",display:e?"block":"none"},p=d.dropdownMenu.hasClass("dropdown-menu-right");p?(s.left="auto",s.right=window.innerWidth-(a.left+d.$element.prop("offsetWidth"))+"px"):(s.left=a.left+"px",s.right="auto"),d.dropdownMenu.css(s)}if(r[e?"addClass":"removeClass"](d.$element,h).then(function(){angular.isDefined(e)&&e!==n&&m(t,{open:!!e})}),e)d.dropdownMenuTemplateUrl&&c(d.dropdownMenuTemplateUrl).then(function(t){u=f.$new(),l(t.trim())(u,function(t){var e=t;d.dropdownMenu.replaceWith(e),d.dropdownMenu=e})}),f.focusToggleElement(),i.open(f);else{if(d.dropdownMenuTemplateUrl){u&&u.$destroy();var b=angular.element('<ul class="dropdown-menu"></ul>');d.dropdownMenu.replaceWith(b),d.dropdownMenu=b}i.close(f),d.selectedOption=null}g(t,e)}),t.$on("$locationChangeSuccess",function(){"disabled"!==f.getAutoClose()&&(f.isOpen=!1)}),t.$on("$destroy",function(){f.$destroy()})}]).directive("dropdown",function(){return{controller:"DropdownController",link:function(t,e,n,a){a.init(e),e.addClass("dropdown")}}}).directive("dropdownMenu",function(){return{restrict:"AC",require:"?^dropdown",link:function(t,e,n,a){if(a){var i=n.templateUrl;i&&(a.dropdownMenuTemplateUrl=i),a.dropdownMenu||(a.dropdownMenu=e)}}}}).directive("keyboardNav",function(){return{restrict:"A",require:"?^dropdown",link:function(t,e,n,a){e.bind("keydown",function(t){if(-1!==[38,40].indexOf(t.which)){t.preventDefault(),t.stopPropagation();var n=angular.element(e).find("a");switch(t.keyCode){case 40:a.selectedOption=angular.isNumber(a.selectedOption)?a.selectedOption===n.length-1?a.selectedOption:a.selectedOption+1:0;break;case 38:a.selectedOption=0===a.selectedOption?0:a.selectedOption-1}n[a.selectedOption].focus()}})}}}).directive("dropdownToggle",function(){return{require:"?^dropdown",link:function(t,e,n,a){if(a){e.addClass("dropdown-toggle"),a.toggleElement=e;var i=function(i){i.preventDefault(),e.hasClass("disabled")||n.disabled||t.$apply(function(){a.toggle()})};e.bind("click",i),e.attr({"aria-haspopup":!0,"aria-expanded":!1}),t.$watch(a.isOpen,function(t){e.attr("aria-expanded",!!t)}),t.$on("$destroy",function(){e.unbind("click",i)})}}}}),angular.module("ui.bootstrap.modal",[]).factory("$$stackedMap",function(){return{createNew:function(){var t=[];return{add:function(e,n){t.push({key:e,value:n})},get:function(e){for(var n=0;n<t.length;n++)if(e==t[n].key)return t[n]},keys:function(){for(var e=[],n=0;n<t.length;n++)e.push(t[n].key);return e},top:function(){return t[t.length-1]},remove:function(e){for(var n=-1,a=0;a<t.length;a++)if(e==t[a].key){n=a;break}return t.splice(n,1)[0]},removeTop:function(){return t.splice(t.length-1,1)[0]},length:function(){return t.length}}}}}).directive("modalBackdrop",["$animate","$modalStack",function(t,e){function n(n,a,i){i.modalInClass&&(t.addClass(a,i.modalInClass),n.$on(e.NOW_CLOSING_EVENT,function(e,n){var r=n();t.removeClass(a,i.modalInClass).then(r)}))}return{restrict:"EA",replace:!0,templateUrl:"template/modal/backdrop.html",compile:function(t,e){return t.addClass(e.backdropClass),n}}}]).directive("modalWindow",["$modalStack","$q","$animate",function(t,e,n){return{restrict:"EA",scope:{index:"@"},replace:!0,transclude:!0,templateUrl:function(t,e){return e.templateUrl||"template/modal/window.html"},link:function(a,i,r){i.addClass(r.windowClass||""),a.size=r.size,a.close=function(e){var n=t.getTop();n&&n.value.backdrop&&"static"!=n.value.backdrop&&e.target===e.currentTarget&&(e.preventDefault(),e.stopPropagation(),t.dismiss(n.key,"backdrop click"))},a.$isRendered=!0;var o=e.defer();r.$observe("modalRender",function(t){"true"==t&&o.resolve()}),o.promise.then(function(){r.modalInClass&&(n.addClass(i,r.modalInClass),a.$on(t.NOW_CLOSING_EVENT,function(t,e){var a=e();n.removeClass(i,r.modalInClass).then(a)}));var e=i[0].querySelectorAll("[autofocus]");e.length?e[0].focus():i[0].focus();var o=t.getTop();o&&t.modalRendered(o.key)})}}}]).directive("modalAnimationClass",[function(){return{compile:function(t,e){e.modalAnimation&&t.addClass(e.modalAnimationClass)}}}]).directive("modalTransclude",function(){return{link:function(t,e,n,a,i){i(t.$parent,function(t){e.empty(),e.append(t)})}}}).factory("$modalStack",["$animate","$timeout","$document","$compile","$rootScope","$q","$$stackedMap",function(t,e,n,a,i,r,o){function s(){for(var t=-1,e=g.keys(),n=0;n<e.length;n++)g.get(e[n]).value.backdrop&&(t=n);return t}function l(t,e){var a=n.find("body").eq(0),i=g.get(t).value;g.remove(t),u(i.modalDomEl,i.modalScope,function(){a.toggleClass(h,g.length()>0),c()}),e&&e.focus?e.focus():a.focus()}function c(){if(d&&-1==s()){var t=f;u(d,f,function(){t=null}),d=void 0,f=void 0}}function u(t,e,n){function a(){a.done||(a.done=!0,t.remove(),e.$destroy(),n&&n())}var i,o=null,s=function(){return i||(i=r.defer(),o=i.promise),function(){i.resolve()}};return e.$broadcast(m.NOW_CLOSING_EVENT,s),r.when(o).then(a)}function p(t,e,n){return!t.value.modalScope.$broadcast("modal.closing",e,n).defaultPrevented}var d,f,h="modal-open",g=o.createNew(),m={NOW_CLOSING_EVENT:"modal.stack.now-closing"};return i.$watch(s,function(t){f&&(f.index=t)}),n.bind("keydown",function(t){var e;27===t.which&&(e=g.top(),e&&e.value.keyboard&&(t.preventDefault(),i.$apply(function(){m.dismiss(e.key,"escape key press")})))}),m.open=function(t,e){var r=n[0].activeElement;g.add(t,{deferred:e.deferred,renderDeferred:e.renderDeferred,modalScope:e.scope,backdrop:e.backdrop,keyboard:e.keyboard});var o=n.find("body").eq(0),l=s();if(l>=0&&!d){f=i.$new(!0),f.index=l;var c=angular.element('<div modal-backdrop="modal-backdrop"></div>');c.attr("backdrop-class",e.backdropClass),e.animation&&c.attr("modal-animation","true"),d=a(c)(f),o.append(d)}var u=angular.element('<div modal-window="modal-window"></div>');u.attr({"template-url":e.windowTemplateUrl,"window-class":e.windowClass,size:e.size,index:g.length()-1,animate:"animate"}).html(e.content),e.animation&&u.attr("modal-animation","true");var p=a(u)(e.scope);g.top().value.modalDomEl=p,g.top().value.modalOpener=r,o.append(p),o.addClass(h)},m.close=function(t,e){var n=g.get(t);return n&&p(n,e,!0)?(n.value.deferred.resolve(e),l(t,n.value.modalOpener),!0):!n},m.dismiss=function(t,e){var n=g.get(t);return n&&p(n,e,!1)?(n.value.deferred.reject(e),l(t,n.value.modalOpener),!0):!n},m.dismissAll=function(t){for(var e=this.getTop();e&&this.dismiss(e.key,t);)e=this.getTop()},m.getTop=function(){return g.top()},m.modalRendered=function(t){var e=g.get(t);e&&e.value.renderDeferred.resolve()},m}]).provider("$modal",function(){var t={options:{animation:!0,backdrop:!0,keyboard:!0},$get:["$injector","$rootScope","$q","$templateRequest","$controller","$modalStack",function(e,n,a,i,r,o){function s(t){return t.template?a.when(t.template):i(angular.isFunction(t.templateUrl)?t.templateUrl():t.templateUrl)}function l(t){var n=[];return angular.forEach(t,function(t){(angular.isFunction(t)||angular.isArray(t))&&n.push(a.when(e.invoke(t)))}),n}var c={};return c.open=function(e){var i=a.defer(),c=a.defer(),u=a.defer(),p={result:i.promise,opened:c.promise,rendered:u.promise,close:function(t){return o.close(p,t)},dismiss:function(t){return o.dismiss(p,t)}};if(e=angular.extend({},t.options,e),e.resolve=e.resolve||{},!e.template&&!e.templateUrl)throw new Error("One of template or templateUrl options is required.");var d=a.all([s(e)].concat(l(e.resolve)));return d.then(function(t){var a=(e.scope||n).$new();a.$close=p.close,a.$dismiss=p.dismiss;var s,l={},c=1;e.controller&&(l.$scope=a,l.$modalInstance=p,angular.forEach(e.resolve,function(e,n){l[n]=t[c++]}),s=r(e.controller,l),e.controllerAs&&(e.bindToController?angular.extend(a,s):a[e.controllerAs]=s)),o.open(p,{scope:a,deferred:i,renderDeferred:u,content:t[0],animation:e.animation,backdrop:e.backdrop,keyboard:e.keyboard,backdropClass:e.backdropClass,windowClass:e.windowClass,windowTemplateUrl:e.windowTemplateUrl,size:e.size})},function(t){i.reject(t)}),d.then(function(){c.resolve(!0)},function(t){c.reject(t)}),p},c}]};return t}),angular.module("ui.bootstrap.pagination",[]).controller("PaginationController",["$scope","$attrs","$parse",function(t,e,n){var a=this,i={$setViewValue:angular.noop},r=e.numPages?n(e.numPages).assign:angular.noop;this.init=function(o,s){i=o,this.config=s,i.$render=function(){a.render()},e.itemsPerPage?t.$parent.$watch(n(e.itemsPerPage),function(e){a.itemsPerPage=parseInt(e,10),t.totalPages=a.calculateTotalPages()}):this.itemsPerPage=s.itemsPerPage,t.$watch("totalItems",function(){t.totalPages=a.calculateTotalPages()}),t.$watch("totalPages",function(e){r(t.$parent,e),t.page>e?t.selectPage(e):i.$render()})},this.calculateTotalPages=function(){var e=this.itemsPerPage<1?1:Math.ceil(t.totalItems/this.itemsPerPage);return Math.max(e||0,1)},this.render=function(){t.page=parseInt(i.$viewValue,10)||1},t.selectPage=function(e,n){var a=!t.ngDisabled||!n;a&&t.page!==e&&e>0&&e<=t.totalPages&&(n&&n.target&&n.target.blur(),i.$setViewValue(e),i.$render())},t.getText=function(e){return t[e+"Text"]||a.config[e+"Text"]},t.noPrevious=function(){return 1===t.page},t.noNext=function(){return t.page===t.totalPages}}]).constant("paginationConfig",{itemsPerPage:10,boundaryLinks:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0}).directive("pagination",["$parse","paginationConfig",function(t,e){return{restrict:"EA",scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@",ngDisabled:"="},require:["pagination","?ngModel"],controller:"PaginationController",templateUrl:"template/pagination/pagination.html",replace:!0,link:function(n,a,i,r){function o(t,e,n){return{number:t,text:e,active:n}}function s(t,e){var n=[],a=1,i=e,r=angular.isDefined(u)&&e>u;r&&(p?(a=Math.max(t-Math.floor(u/2),1),i=a+u-1,i>e&&(i=e,a=i-u+1)):(a=(Math.ceil(t/u)-1)*u+1,i=Math.min(a+u-1,e)));for(var s=a;i>=s;s++){var l=o(s,s,s===t);n.push(l)}if(r&&!p){if(a>1){var c=o(a-1,"...",!1);n.unshift(c)}if(e>i){var d=o(i+1,"...",!1);n.push(d)}}return n}var l=r[0],c=r[1];if(c){var u=angular.isDefined(i.maxSize)?n.$parent.$eval(i.maxSize):e.maxSize,p=angular.isDefined(i.rotate)?n.$parent.$eval(i.rotate):e.rotate;n.boundaryLinks=angular.isDefined(i.boundaryLinks)?n.$parent.$eval(i.boundaryLinks):e.boundaryLinks,n.directionLinks=angular.isDefined(i.directionLinks)?n.$parent.$eval(i.directionLinks):e.directionLinks,l.init(c,e),i.maxSize&&n.$parent.$watch(t(i.maxSize),function(t){u=parseInt(t,10),l.render()});var d=l.render;l.render=function(){d(),n.page>0&&n.page<=n.totalPages&&(n.pages=s(n.page,n.totalPages))
}}}}}]).constant("pagerConfig",{itemsPerPage:10,previousText:"« Previous",nextText:"Next »",align:!0}).directive("pager",["pagerConfig",function(t){return{restrict:"EA",scope:{totalItems:"=",previousText:"@",nextText:"@"},require:["pager","?ngModel"],controller:"PaginationController",templateUrl:"template/pagination/pager.html",replace:!0,link:function(e,n,a,i){var r=i[0],o=i[1];o&&(e.align=angular.isDefined(a.align)?e.$parent.$eval(a.align):t.align,r.init(o,t))}}}]),angular.module("ui.bootstrap.tooltip",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).provider("$tooltip",function(){function t(t){var e=/[A-Z]/g,n="-";return t.replace(e,function(t,e){return(e?n:"")+t.toLowerCase()})}var e={placement:"top",animation:!0,popupDelay:0,useContentExp:!1},n={mouseenter:"mouseleave",click:"click",focus:"blur"},a={};this.options=function(t){angular.extend(a,t)},this.setTriggers=function(t){angular.extend(n,t)},this.$get=["$window","$compile","$timeout","$document","$position","$interpolate",function(i,r,o,s,l,c){return function(i,u,p,d){function f(t){var e=t||d.trigger||p,a=n[e]||e;return{show:e,hide:a}}d=angular.extend({},e,a,d);var h=t(i),g=c.startSymbol(),m=c.endSymbol(),v="<div "+h+'-popup title="'+g+"title"+m+'" '+(d.useContentExp?'content-exp="contentExp()" ':'content="'+g+"content"+m+'" ')+'placement="'+g+"placement"+m+'" popup-class="'+g+"popupClass"+m+'" animation="animation" is-open="isOpen"origin-scope="origScope" ></div>';return{restrict:"EA",compile:function(){var t=r(v);return function(e,n,a){function r(){M.isOpen?p():c()}function c(){(!O||e.$eval(a[u+"Enable"]))&&(b(),M.popupDelay?D||(D=o(h,M.popupDelay,!1),D.then(function(t){t()})):h()())}function p(){e.$apply(function(){g()})}function h(){return D=null,T&&(o.cancel(T),T=null),(d.useContentExp?M.contentExp():M.content)?(m(),k.css({top:0,left:0,display:"block"}),M.$digest(),P(),M.isOpen=!0,M.$apply(),P):angular.noop}function g(){M.isOpen=!1,o.cancel(D),D=null,M.animation?T||(T=o(v,500)):v()}function m(){k&&v(),C=M.$new(),k=t(C,function(t){E?s.find("body").append(t):n.after(t)}),C.$watch(function(){o(P,0,!1)}),d.useContentExp&&C.$watch("contentExp()",function(t){!t&&M.isOpen&&g()})}function v(){T=null,k&&(k.remove(),k=null),C&&(C.$destroy(),C=null)}function b(){y(),$(),w()}function y(){M.popupClass=a[u+"Class"]}function $(){var t=a[u+"Placement"];M.placement=angular.isDefined(t)?t:d.placement}function w(){var t=a[u+"PopupDelay"],e=parseInt(t,10);M.popupDelay=isNaN(e)?d.popupDelay:e}function x(){var t=a[u+"Trigger"];A(),S=f(t),S.show===S.hide?n.bind(S.show,r):(n.bind(S.show,c),n.bind(S.hide,p))}var k,C,T,D,E=angular.isDefined(d.appendToBody)?d.appendToBody:!1,S=f(void 0),O=angular.isDefined(a[u+"Enable"]),M=e.$new(!0),P=function(){if(k){var t=l.positionElements(n,k,M.placement,E);t.top+="px",t.left+="px",k.css(t)}};M.origScope=e,M.isOpen=!1,M.contentExp=function(){return e.$eval(a[i])},d.useContentExp||a.$observe(i,function(t){M.content=t,!t&&M.isOpen&&g()}),a.$observe("disabled",function(t){t&&M.isOpen&&g()}),a.$observe(u+"Title",function(t){M.title=t});var A=function(){n.unbind(S.show,c),n.unbind(S.hide,p)};x();var I=e.$eval(a[u+"Animation"]);M.animation=angular.isDefined(I)?!!I:d.animation;var L=e.$eval(a[u+"AppendToBody"]);E=angular.isDefined(L)?L:E,E&&e.$on("$locationChangeSuccess",function(){M.isOpen&&g()}),e.$on("$destroy",function(){o.cancel(T),o.cancel(D),A(),v(),M=null})}}}}}]}).directive("tooltipTemplateTransclude",["$animate","$sce","$compile","$templateRequest",function(t,e,n,a){return{link:function(i,r,o){var s,l,c,u=i.$eval(o.tooltipTemplateTranscludeScope),p=0,d=function(){l&&(l.remove(),l=null),s&&(s.$destroy(),s=null),c&&(t.leave(c).then(function(){l=null}),l=c,c=null)};i.$watch(e.parseAsResourceUrl(o.tooltipTemplateTransclude),function(e){var o=++p;e?(a(e,!0).then(function(a){if(o===p){var i=u.$new(),l=a,f=n(l)(i,function(e){d(),t.enter(e,r)});s=i,c=f,s.$emit("$includeContentLoaded",e)}},function(){o===p&&(d(),i.$emit("$includeContentError",e))}),i.$emit("$includeContentRequested",e)):d()}),i.$on("$destroy",d)}}}]).directive("tooltipClasses",function(){return{restrict:"A",link:function(t,e,n){t.placement&&e.addClass(t.placement),t.popupClass&&e.addClass(t.popupClass),t.animation()&&e.addClass(n.tooltipAnimationClass)}}}).directive("tooltipPopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-popup.html"}}).directive("tooltip",["$tooltip",function(t){return t("tooltip","tooltip","mouseenter")}]).directive("tooltipTemplatePopup",function(){return{restrict:"EA",replace:!0,scope:{contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&",originScope:"&"},templateUrl:"template/tooltip/tooltip-template-popup.html"}}).directive("tooltipTemplate",["$tooltip",function(t){return t("tooltipTemplate","tooltip","mouseenter",{useContentExp:!0})}]).directive("tooltipHtmlPopup",function(){return{restrict:"EA",replace:!0,scope:{contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-html-popup.html"}}).directive("tooltipHtml",["$tooltip",function(t){return t("tooltipHtml","tooltip","mouseenter",{useContentExp:!0})}]).directive("tooltipHtmlUnsafePopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-html-unsafe-popup.html"}}).value("tooltipHtmlUnsafeSuppressDeprecated",!1).directive("tooltipHtmlUnsafe",["$tooltip","tooltipHtmlUnsafeSuppressDeprecated","$log",function(t,e,n){return e||n.warn("tooltip-html-unsafe is now deprecated. Use tooltip-html or tooltip-template instead."),t("tooltipHtmlUnsafe","tooltip","mouseenter")}]),angular.module("ui.bootstrap.popover",["ui.bootstrap.tooltip"]).directive("popoverTemplatePopup",function(){return{restrict:"EA",replace:!0,scope:{title:"@",contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&",originScope:"&"},templateUrl:"template/popover/popover-template.html"}}).directive("popoverTemplate",["$tooltip",function(t){return t("popoverTemplate","popover","click",{useContentExp:!0})}]).directive("popoverPopup",function(){return{restrict:"EA",replace:!0,scope:{title:"@",content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/popover/popover.html"}}).directive("popover",["$tooltip",function(t){return t("popover","popover","click")}]),angular.module("ui.bootstrap.progressbar",[]).constant("progressConfig",{animate:!0,max:100}).controller("ProgressController",["$scope","$attrs","progressConfig",function(t,e,n){var a=this,i=angular.isDefined(e.animate)?t.$parent.$eval(e.animate):n.animate;this.bars=[],t.max=angular.isDefined(t.max)?t.max:n.max,this.addBar=function(e,n){i||n.css({transition:"none"}),this.bars.push(e),e.max=t.max,e.$watch("value",function(){e.recalculatePercentage()}),e.recalculatePercentage=function(){e.percent=+(100*e.value/e.max).toFixed(2)},e.$on("$destroy",function(){n=null,a.removeBar(e)})},this.removeBar=function(t){this.bars.splice(this.bars.indexOf(t),1)},t.$watch("max",function(){a.bars.forEach(function(e){e.max=t.max,e.recalculatePercentage()})})}]).directive("progress",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",require:"progress",scope:{max:"=?"},templateUrl:"template/progressbar/progress.html"}}).directive("bar",function(){return{restrict:"EA",replace:!0,transclude:!0,require:"^progress",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/bar.html",link:function(t,e,n,a){a.addBar(t,e)}}}).directive("progressbar",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",scope:{value:"=",max:"=?",type:"@"},templateUrl:"template/progressbar/progressbar.html",link:function(t,e,n,a){a.addBar(t,angular.element(e.children()[0]))}}}),angular.module("ui.bootstrap.rating",[]).constant("ratingConfig",{max:5,stateOn:null,stateOff:null}).controller("RatingController",["$scope","$attrs","ratingConfig",function(t,e,n){var a={$setViewValue:angular.noop};this.init=function(i){a=i,a.$render=this.render,a.$formatters.push(function(t){return angular.isNumber(t)&&t<<0!==t&&(t=Math.round(t)),t}),this.stateOn=angular.isDefined(e.stateOn)?t.$parent.$eval(e.stateOn):n.stateOn,this.stateOff=angular.isDefined(e.stateOff)?t.$parent.$eval(e.stateOff):n.stateOff;var r=angular.isDefined(e.ratingStates)?t.$parent.$eval(e.ratingStates):new Array(angular.isDefined(e.max)?t.$parent.$eval(e.max):n.max);t.range=this.buildTemplateObjects(r)},this.buildTemplateObjects=function(t){for(var e=0,n=t.length;n>e;e++)t[e]=angular.extend({index:e},{stateOn:this.stateOn,stateOff:this.stateOff},t[e]);return t},t.rate=function(e){!t.readonly&&e>=0&&e<=t.range.length&&(a.$setViewValue(a.$viewValue===e?0:e),a.$render())},t.enter=function(e){t.readonly||(t.value=e),t.onHover({value:e})},t.reset=function(){t.value=a.$viewValue,t.onLeave()},t.onKeydown=function(e){/(37|38|39|40)/.test(e.which)&&(e.preventDefault(),e.stopPropagation(),t.rate(t.value+(38===e.which||39===e.which?1:-1)))},this.render=function(){t.value=a.$viewValue}}]).directive("rating",function(){return{restrict:"EA",require:["rating","ngModel"],scope:{readonly:"=?",onHover:"&",onLeave:"&"},controller:"RatingController",templateUrl:"template/rating/rating.html",replace:!0,link:function(t,e,n,a){var i=a[0],r=a[1];i.init(r)}}}),angular.module("ui.bootstrap.tabs",[]).controller("TabsetController",["$scope",function(t){var e=this,n=e.tabs=t.tabs=[];e.select=function(t){angular.forEach(n,function(e){e.active&&e!==t&&(e.active=!1,e.onDeselect())}),t.active=!0,t.onSelect()},e.addTab=function(t){n.push(t),1===n.length&&t.active!==!1?t.active=!0:t.active?e.select(t):t.active=!1},e.removeTab=function(t){var i=n.indexOf(t);if(t.active&&n.length>1&&!a){var r=i==n.length-1?i-1:i+1;e.select(n[r])}n.splice(i,1)};var a;t.$on("$destroy",function(){a=!0})}]).directive("tabset",function(){return{restrict:"EA",transclude:!0,replace:!0,scope:{type:"@"},controller:"TabsetController",templateUrl:"template/tabs/tabset.html",link:function(t,e,n){t.vertical=angular.isDefined(n.vertical)?t.$parent.$eval(n.vertical):!1,t.justified=angular.isDefined(n.justified)?t.$parent.$eval(n.justified):!1}}}).directive("tab",["$parse","$log",function(t,e){return{require:"^tabset",restrict:"EA",replace:!0,templateUrl:"template/tabs/tab.html",transclude:!0,scope:{active:"=?",heading:"@",onSelect:"&select",onDeselect:"&deselect"},controller:function(){},compile:function(n,a,i){return function(n,a,r,o){n.$watch("active",function(t){t&&o.select(n)}),n.disabled=!1,r.disable&&n.$parent.$watch(t(r.disable),function(t){n.disabled=!!t}),r.disabled&&(e.warn('Use of "disabled" attribute has been deprecated, please use "disable"'),n.$parent.$watch(t(r.disabled),function(t){n.disabled=!!t})),n.select=function(){n.disabled||(n.active=!0)},o.addTab(n),n.$on("$destroy",function(){o.removeTab(n)}),n.$transcludeFn=i}}}}]).directive("tabHeadingTransclude",[function(){return{restrict:"A",require:"^tab",link:function(t,e){t.$watch("headingElement",function(t){t&&(e.html(""),e.append(t))})}}}]).directive("tabContentTransclude",function(){function t(t){return t.tagName&&(t.hasAttribute("tab-heading")||t.hasAttribute("data-tab-heading")||"tab-heading"===t.tagName.toLowerCase()||"data-tab-heading"===t.tagName.toLowerCase())}return{restrict:"A",require:"^tabset",link:function(e,n,a){var i=e.$eval(a.tabContentTransclude);i.$transcludeFn(i.$parent,function(e){angular.forEach(e,function(e){t(e)?i.headingElement=e:n.append(e)})})}}}),angular.module("ui.bootstrap.timepicker",[]).constant("timepickerConfig",{hourStep:1,minuteStep:1,showMeridian:!0,meridians:null,readonlyInput:!1,mousewheel:!0,arrowkeys:!0,showSpinners:!0}).controller("TimepickerController",["$scope","$attrs","$parse","$log","$locale","timepickerConfig",function(t,e,n,a,i,r){function o(){var e=parseInt(t.hours,10),n=t.showMeridian?e>0&&13>e:e>=0&&24>e;return n?(t.showMeridian&&(12===e&&(e=0),t.meridian===g[1]&&(e+=12)),e):void 0}function s(){var e=parseInt(t.minutes,10);return e>=0&&60>e?e:void 0}function l(t){return angular.isDefined(t)&&t.toString().length<2?"0"+t:t.toString()}function c(t){u(),h.$setViewValue(new Date(f)),p(t)}function u(){h.$setValidity("time",!0),t.invalidHours=!1,t.invalidMinutes=!1}function p(e){var n=f.getHours(),a=f.getMinutes();t.showMeridian&&(n=0===n||12===n?12:n%12),t.hours="h"===e?n:l(n),"m"!==e&&(t.minutes=l(a)),t.meridian=f.getHours()<12?g[0]:g[1]}function d(t){var e=new Date(f.getTime()+6e4*t);f.setHours(e.getHours(),e.getMinutes()),c()}var f=new Date,h={$setViewValue:angular.noop},g=angular.isDefined(e.meridians)?t.$parent.$eval(e.meridians):r.meridians||i.DATETIME_FORMATS.AMPMS;this.init=function(n,a){h=n,h.$render=this.render,h.$formatters.unshift(function(t){return t?new Date(t):null});var i=a.eq(0),o=a.eq(1),s=angular.isDefined(e.mousewheel)?t.$parent.$eval(e.mousewheel):r.mousewheel;s&&this.setupMousewheelEvents(i,o);var l=angular.isDefined(e.arrowkeys)?t.$parent.$eval(e.arrowkeys):r.arrowkeys;l&&this.setupArrowkeyEvents(i,o),t.readonlyInput=angular.isDefined(e.readonlyInput)?t.$parent.$eval(e.readonlyInput):r.readonlyInput,this.setupInputEvents(i,o)};var m=r.hourStep;e.hourStep&&t.$parent.$watch(n(e.hourStep),function(t){m=parseInt(t,10)});var v=r.minuteStep;e.minuteStep&&t.$parent.$watch(n(e.minuteStep),function(t){v=parseInt(t,10)}),t.showMeridian=r.showMeridian,e.showMeridian&&t.$parent.$watch(n(e.showMeridian),function(e){if(t.showMeridian=!!e,h.$error.time){var n=o(),a=s();angular.isDefined(n)&&angular.isDefined(a)&&(f.setHours(n),c())}else p()}),this.setupMousewheelEvents=function(e,n){var a=function(t){t.originalEvent&&(t=t.originalEvent);var e=t.wheelDelta?t.wheelDelta:-t.deltaY;return t.detail||e>0};e.bind("mousewheel wheel",function(e){t.$apply(a(e)?t.incrementHours():t.decrementHours()),e.preventDefault()}),n.bind("mousewheel wheel",function(e){t.$apply(a(e)?t.incrementMinutes():t.decrementMinutes()),e.preventDefault()})},this.setupArrowkeyEvents=function(e,n){e.bind("keydown",function(e){38===e.which?(e.preventDefault(),t.incrementHours(),t.$apply()):40===e.which&&(e.preventDefault(),t.decrementHours(),t.$apply())}),n.bind("keydown",function(e){38===e.which?(e.preventDefault(),t.incrementMinutes(),t.$apply()):40===e.which&&(e.preventDefault(),t.decrementMinutes(),t.$apply())})},this.setupInputEvents=function(e,n){if(t.readonlyInput)return t.updateHours=angular.noop,t.updateMinutes=angular.noop,void 0;var a=function(e,n){h.$setViewValue(null),h.$setValidity("time",!1),angular.isDefined(e)&&(t.invalidHours=e),angular.isDefined(n)&&(t.invalidMinutes=n)};t.updateHours=function(){var t=o();angular.isDefined(t)?(f.setHours(t),c("h")):a(!0)},e.bind("blur",function(){!t.invalidHours&&t.hours<10&&t.$apply(function(){t.hours=l(t.hours)})}),t.updateMinutes=function(){var t=s();angular.isDefined(t)?(f.setMinutes(t),c("m")):a(void 0,!0)},n.bind("blur",function(){!t.invalidMinutes&&t.minutes<10&&t.$apply(function(){t.minutes=l(t.minutes)})})},this.render=function(){var t=h.$viewValue;isNaN(t)?(h.$setValidity("time",!1),a.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')):(t&&(f=t),u(),p())},t.showSpinners=angular.isDefined(e.showSpinners)?t.$parent.$eval(e.showSpinners):r.showSpinners,t.incrementHours=function(){d(60*m)},t.decrementHours=function(){d(60*-m)},t.incrementMinutes=function(){d(v)},t.decrementMinutes=function(){d(-v)},t.toggleMeridian=function(){d(720*(f.getHours()<12?1:-1))}}]).directive("timepicker",function(){return{restrict:"EA",require:["timepicker","?^ngModel"],controller:"TimepickerController",replace:!0,scope:{},templateUrl:"template/timepicker/timepicker.html",link:function(t,e,n,a){var i=a[0],r=a[1];r&&i.init(r,e.find("input"))}}}),angular.module("ui.bootstrap.transition",[]).value("$transitionSuppressDeprecated",!1).factory("$transition",["$q","$timeout","$rootScope","$log","$transitionSuppressDeprecated",function(t,e,n,a,i){function r(t){for(var e in t)if(void 0!==s.style[e])return t[e]}i||a.warn("$transition is now deprecated. Use $animate from ngAnimate instead.");var o=function(a,i,r){r=r||{};var s=t.defer(),l=o[r.animation?"animationEndEventName":"transitionEndEventName"],c=function(){n.$apply(function(){a.unbind(l,c),s.resolve(a)})};return l&&a.bind(l,c),e(function(){angular.isString(i)?a.addClass(i):angular.isFunction(i)?i(a):angular.isObject(i)&&a.css(i),l||s.resolve(a)}),s.promise.cancel=function(){l&&a.unbind(l,c),s.reject("Transition cancelled")},s.promise},s=document.createElement("trans"),l={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"},c={WebkitTransition:"webkitAnimationEnd",MozTransition:"animationend",OTransition:"oAnimationEnd",transition:"animationend"};return o.transitionEndEventName=r(l),o.animationEndEventName=r(c),o}]),angular.module("ui.bootstrap.typeahead",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).factory("typeaheadParser",["$parse",function(t){var e=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;return{parse:function(n){var a=n.match(e);if(!a)throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "'+n+'".');return{itemName:a[3],source:t(a[4]),viewMapper:t(a[2]||a[1]),modelMapper:t(a[1])}}}}]).directive("typeahead",["$compile","$parse","$q","$timeout","$document","$window","$rootScope","$position","typeaheadParser",function(t,e,n,a,i,r,o,s,l){var c=[9,13,27,38,40],u=200;return{require:"ngModel",link:function(p,d,f,h){function g(){M.moveInProgress||(M.moveInProgress=!0,M.$digest()),F&&a.cancel(F),F=a(function(){M.matches.length&&m(),M.moveInProgress=!1,M.$digest()},u)}function m(){M.position=D?s.offset(d):s.position(d),M.position.top+=d.prop("offsetHeight")}var v=p.$eval(f.typeaheadMinLength);v||0===v||(v=1);var b,y,$=p.$eval(f.typeaheadWaitMs)||0,w=p.$eval(f.typeaheadEditable)!==!1,x=e(f.typeaheadLoading).assign||angular.noop,k=e(f.typeaheadOnSelect),C=angular.isDefined(f.typeaheadSelectOnBlur)?p.$eval(f.typeaheadSelectOnBlur):!1,T=f.typeaheadInputFormatter?e(f.typeaheadInputFormatter):void 0,D=f.typeaheadAppendToBody?p.$eval(f.typeaheadAppendToBody):!1,E=p.$eval(f.typeaheadFocusFirst)!==!1,S=e(f.ngModel).assign,O=l.parse(f.typeahead),M=p.$new();p.$on("$destroy",function(){M.$destroy()});var P="typeahead-"+M.$id+"-"+Math.floor(1e4*Math.random());d.attr({"aria-autocomplete":"list","aria-expanded":!1,"aria-owns":P});var A=angular.element("<div typeahead-popup></div>");A.attr({id:P,matches:"matches",active:"activeIdx",select:"select(activeIdx)","move-in-progress":"moveInProgress",query:"query",position:"position"}),angular.isDefined(f.typeaheadTemplateUrl)&&A.attr("template-url",f.typeaheadTemplateUrl);var I=function(){M.matches=[],M.activeIdx=-1,d.attr("aria-expanded",!1)},L=function(t){return P+"-option-"+t};M.$watch("activeIdx",function(t){0>t?d.removeAttr("aria-activedescendant"):d.attr("aria-activedescendant",L(t))});var N=function(t){var e={$viewValue:t};x(p,!0),n.when(O.source(p,e)).then(function(n){var a=t===h.$viewValue;if(a&&b)if(n&&n.length>0){M.activeIdx=E?0:-1,M.matches.length=0;for(var i=0;i<n.length;i++)e[O.itemName]=n[i],M.matches.push({id:L(i),label:O.viewMapper(M,e),model:n[i]});M.query=t,m(),d.attr("aria-expanded",!0)}else I();a&&x(p,!1)},function(){I(),x(p,!1)})};D&&(angular.element(r).bind("resize",g),i.find("body").bind("scroll",g));var F;M.moveInProgress=!1,I(),M.query=void 0;var j,V=function(t){j=a(function(){N(t)},$)},U=function(){j&&a.cancel(j)};h.$parsers.unshift(function(t){return b=!0,0===v||t&&t.length>=v?$>0?(U(),V(t)):N(t):(x(p,!1),U(),I()),w?t:t?(h.$setValidity("editable",!1),void 0):(h.$setValidity("editable",!0),t)}),h.$formatters.push(function(t){var e,n,a={};return w||h.$setValidity("editable",!0),T?(a.$model=t,T(p,a)):(a[O.itemName]=t,e=O.viewMapper(p,a),a[O.itemName]=void 0,n=O.viewMapper(p,a),e!==n?e:t)}),M.select=function(t){var e,n,i={};y=!0,i[O.itemName]=n=M.matches[t].model,e=O.modelMapper(p,i),S(p,e),h.$setValidity("editable",!0),h.$setValidity("parse",!0),k(p,{$item:n,$model:e,$label:O.viewMapper(p,i)}),I(),a(function(){d[0].focus()},0,!1)},d.bind("keydown",function(t){if(0!==M.matches.length&&-1!==c.indexOf(t.which)&&(-1!==M.activeIdx||13!==t.which)){if(-1===M.activeIdx&&9===t.which)return I(),M.$digest(),void 0;t.preventDefault(),40===t.which?(M.activeIdx=(M.activeIdx+1)%M.matches.length,M.$digest()):38===t.which?(M.activeIdx=(M.activeIdx>0?M.activeIdx:M.matches.length)-1,M.$digest()):13===t.which||9===t.which?M.$apply(function(){M.select(M.activeIdx)}):27===t.which&&(t.stopPropagation(),I(),M.$digest())}}),d.bind("blur",function(){C&&M.matches.length&&-1!==M.activeIdx&&!y&&(y=!0,M.$apply(function(){M.select(M.activeIdx)})),b=!1,y=!1});var H=function(t){d[0]!==t.target&&3!==t.which&&(I(),o.$$phase||M.$digest())};i.bind("click",H),p.$on("$destroy",function(){i.unbind("click",H),D&&R.remove(),A.remove()});var R=t(A)(M);D?i.find("body").append(R):d.after(R)}}}]).directive("typeaheadPopup",function(){return{restrict:"EA",scope:{matches:"=",query:"=",active:"=",position:"&",moveInProgress:"=",select:"&"},replace:!0,templateUrl:"template/typeahead/typeahead-popup.html",link:function(t,e,n){t.templateUrl=n.templateUrl,t.isOpen=function(){return t.matches.length>0},t.isActive=function(e){return t.active==e},t.selectActive=function(e){t.active=e},t.selectMatch=function(e){t.select({activeIdx:e})}}}}).directive("typeaheadMatch",["$templateRequest","$compile","$parse",function(t,e,n){return{restrict:"EA",scope:{index:"=",match:"=",query:"="},link:function(a,i,r){var o=n(r.templateUrl)(a.$parent)||"template/typeahead/typeahead-match.html";t(o).then(function(t){e(t.trim())(a,function(t){i.replaceWith(t)})})}}}]).filter("typeaheadHighlight",function(){function t(t){return t.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")}return function(e,n){return n?(""+e).replace(new RegExp(t(n),"gi"),"<strong>$&</strong>"):e}}),angular.module("template/accordion/accordion-group.html",[]).run(["$templateCache",function(t){t.put("template/accordion/accordion-group.html",'<div class="panel panel-default">\n  <div class="panel-heading">\n    <h4 class="panel-title">\n      <a href="#" tabindex="0" class="accordion-toggle" ng-click="$event.preventDefault(); toggleOpen()" accordion-transclude="heading"><span ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n    </h4>\n  </div>\n  <div class="panel-collapse collapse" collapse="!isOpen">\n	  <div class="panel-body" ng-transclude></div>\n  </div>\n</div>\n')}]),angular.module("template/accordion/accordion.html",[]).run(["$templateCache",function(t){t.put("template/accordion/accordion.html",'<div class="panel-group" ng-transclude></div>')}]),angular.module("template/alert/alert.html",[]).run(["$templateCache",function(t){t.put("template/alert/alert.html",'<div class="alert" ng-class="[\'alert-\' + (type || \'warning\'), closeable ? \'alert-dismissible\' : null]" role="alert">\n    <button ng-show="closeable" type="button" class="close" ng-click="close($event)">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <div ng-transclude></div>\n</div>\n')}]),angular.module("template/carousel/carousel.html",[]).run(["$templateCache",function(t){t.put("template/carousel/carousel.html",'<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" ng-swipe-right="prev()" ng-swipe-left="next()">\n    <ol class="carousel-indicators" ng-show="slides.length > 1">\n        <li ng-repeat="slide in slides | orderBy:\'index\' track by $index" ng-class="{active: isActive(slide)}" ng-click="select(slide)"></li>\n    </ol>\n    <div class="carousel-inner" ng-transclude></div>\n    <a class="left carousel-control" ng-click="prev()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-left"></span></a>\n    <a class="right carousel-control" ng-click="next()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-right"></span></a>\n</div>\n')}]),angular.module("template/carousel/slide.html",[]).run(["$templateCache",function(t){t.put("template/carousel/slide.html",'<div ng-class="{\n    \'active\': active\n  }" class="item text-center" ng-transclude></div>\n')}]),angular.module("template/datepicker/datepicker.html",[]).run(["$templateCache",function(t){t.put("template/datepicker/datepicker.html",'<div ng-switch="datepickerMode" role="application" ng-keydown="keydown($event)">\n  <daypicker ng-switch-when="day" tabindex="0"></daypicker>\n  <monthpicker ng-switch-when="month" tabindex="0"></monthpicker>\n  <yearpicker ng-switch-when="year" tabindex="0"></yearpicker>\n</div>')}]),angular.module("template/datepicker/day.html",[]).run(["$templateCache",function(t){t.put("template/datepicker/day.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{::5 + showWeeks}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n    <tr>\n      <th ng-if="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in ::labels track by $index" class="text-center"><small aria-label="{{::label.full}}">{{::label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-if="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}" ng-class="::dt.customClass">\n        <button type="button" style="min-width:100%;" class="btn btn-default btn-sm" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/month.html",[]).run(["$templateCache",function(t){t.put("template/datepicker/month.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}" ng-class="::dt.customClass">\n        <button type="button" style="min-width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/popup.html",[]).run(["$templateCache",function(t){t.put("template/datepicker/popup.html",'<ul class="dropdown-menu" ng-if="isOpen" style="display: block" ng-style="{top: position.top+\'px\', left: position.left+\'px\'}" ng-keydown="keydown($event)" ng-click="$event.stopPropagation()">\n	<li ng-transclude></li>\n	<li ng-if="showButtonBar" style="padding:10px 9px 2px">\n		<span class="btn-group pull-left">\n			<button type="button" class="btn btn-sm btn-info" ng-click="select(\'today\')">{{ getText(\'current\') }}</button>\n			<button type="button" class="btn btn-sm btn-danger" ng-click="select(null)">{{ getText(\'clear\') }}</button>\n		</span>\n		<button type="button" class="btn btn-sm btn-success pull-right" ng-click="close()">{{ getText(\'close\') }}</button>\n	</li>\n</ul>\n')}]),angular.module("template/datepicker/year.html",[]).run(["$templateCache",function(t){t.put("template/datepicker/year.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="3"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}">\n        <button type="button" style="min-width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/modal/backdrop.html",[]).run(["$templateCache",function(t){t.put("template/modal/backdrop.html",'<div class="modal-backdrop"\n     modal-animation-class="fade"\n     modal-in-class="in"\n     ng-style="{\'z-index\': 1040 + (index && 1 || 0) + index*10}"\n></div>\n')}]),angular.module("template/modal/window.html",[]).run(["$templateCache",function(t){t.put("template/modal/window.html",'<div modal-render="{{$isRendered}}" tabindex="-1" role="dialog" class="modal"\n    modal-animation-class="fade"\n    modal-in-class="in"\n	ng-style="{\'z-index\': 1050 + index*10, display: \'block\'}" ng-click="close($event)">\n    <div class="modal-dialog" ng-class="size ? \'modal-\' + size : \'\'"><div class="modal-content" modal-transclude></div></div>\n</div>\n')}]),angular.module("template/pagination/pager.html",[]).run(["$templateCache",function(t){t.put("template/pagination/pager.html",'<ul class="pager">\n  <li ng-class="{disabled: noPrevious(), previous: align}"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n  <li ng-class="{disabled: noNext(), next: align}"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n</ul>')}]),angular.module("template/pagination/pagination.html",[]).run(["$templateCache",function(t){t.put("template/pagination/pagination.html",'<ul class="pagination">\n  <li ng-if="::boundaryLinks" ng-class="{disabled: noPrevious()||ngDisabled}"><a href ng-click="selectPage(1, $event)">{{::getText(\'first\')}}</a></li>\n  <li ng-if="::directionLinks" ng-class="{disabled: noPrevious()||ngDisabled}"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n  <li ng-repeat="page in pages track by $index" ng-class="{active: page.active,disabled: ngDisabled&&!page.active}"><a href ng-click="selectPage(page.number, $event)">{{page.text}}</a></li>\n  <li ng-if="::directionLinks" ng-class="{disabled: noNext()||ngDisabled}"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n  <li ng-if="::boundaryLinks" ng-class="{disabled: noNext()||ngDisabled}"><a href ng-click="selectPage(totalPages, $event)">{{::getText(\'last\')}}</a></li>\n</ul>\n')
}]),angular.module("template/tooltip/tooltip-html-popup.html",[]).run(["$templateCache",function(t){t.put("template/tooltip/tooltip-html-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind-html="contentExp()"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-html-unsafe-popup.html",[]).run(["$templateCache",function(t){t.put("template/tooltip/tooltip-html-unsafe-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" bind-html-unsafe="content"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-popup.html",[]).run(["$templateCache",function(t){t.put("template/tooltip/tooltip-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind="content"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-template-popup.html",[]).run(["$templateCache",function(t){t.put("template/tooltip/tooltip-template-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner"\n    tooltip-template-transclude="contentExp()"\n    tooltip-template-transclude-scope="originScope()"></div>\n</div>\n')}]),angular.module("template/popover/popover-template.html",[]).run(["$templateCache",function(t){t.put("template/popover/popover-template.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content"\n        tooltip-template-transclude="contentExp()"\n        tooltip-template-transclude-scope="originScope()"></div>\n  </div>\n</div>\n')}]),angular.module("template/popover/popover.html",[]).run(["$templateCache",function(t){t.put("template/popover/popover.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content" ng-bind="content"></div>\n  </div>\n</div>\n')}]),angular.module("template/progressbar/bar.html",[]).run(["$templateCache",function(t){t.put("template/progressbar/bar.html",'<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>\n')}]),angular.module("template/progressbar/progress.html",[]).run(["$templateCache",function(t){t.put("template/progressbar/progress.html",'<div class="progress" ng-transclude></div>')}]),angular.module("template/progressbar/progressbar.html",[]).run(["$templateCache",function(t){t.put("template/progressbar/progressbar.html",'<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>\n</div>\n')}]),angular.module("template/rating/rating.html",[]).run(["$templateCache",function(t){t.put("template/rating/rating.html",'<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}">\n    <i ng-repeat="r in range track by $index" ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')">\n        <span class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    </i>\n</span>')}]),angular.module("template/tabs/tab.html",[]).run(["$templateCache",function(t){t.put("template/tabs/tab.html",'<li ng-class="{active: active, disabled: disabled}">\n  <a href="#" ng-click="$event.preventDefault(); select()" tab-heading-transclude>{{heading}}</a>\n</li>\n')}]),angular.module("template/tabs/tabset.html",[]).run(["$templateCache",function(t){t.put("template/tabs/tabset.html",'<div>\n  <ul class="nav nav-{{type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane" \n         ng-repeat="tab in tabs" \n         ng-class="{active: tab.active}"\n         tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n')}]),angular.module("template/timepicker/timepicker.html",[]).run(["$templateCache",function(t){t.put("template/timepicker/timepicker.html",'<table>\n  <tbody>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td><a ng-click="incrementHours()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td>&nbsp;</td>\n      <td><a ng-click="incrementMinutes()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n    <tr>\n      <td class="form-group" ng-class="{\'has-error\': invalidHours}">\n        <input style="width:50px;" type="text" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2">\n      </td>\n      <td>:</td>\n      <td class="form-group" ng-class="{\'has-error\': invalidMinutes}">\n        <input style="width:50px;" type="text" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2">\n      </td>\n      <td ng-show="showMeridian"><button type="button" class="btn btn-default text-center" ng-click="toggleMeridian()">{{meridian}}</button></td>\n    </tr>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td><a ng-click="decrementHours()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td>&nbsp;</td>\n      <td><a ng-click="decrementMinutes()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/typeahead/typeahead-match.html",[]).run(["$templateCache",function(t){t.put("template/typeahead/typeahead-match.html",'<a href="#" ng-click="$event.preventDefault()" tabindex="-1" bind-html-unsafe="match.label | typeaheadHighlight:query"></a>\n')}]),angular.module("template/typeahead/typeahead-popup.html",[]).run(["$templateCache",function(t){t.put("template/typeahead/typeahead-popup.html",'<ul class="dropdown-menu" ng-show="isOpen() && !moveInProgress" ng-style="{top: position().top+\'px\', left: position().left+\'px\'}" style="display: block;" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index)" role="option" id="{{::match.id}}">\n        <div typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n')}]),!angular.$$csp()&&angular.element(document).find("head").prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>'),function(){"use strict";angular.module("risevision.widget.common.widget-button-toolbar",["risevision.common.i18n"]).directive("widgetButtonToolbar",["$templateCache",function(t){return{restrict:"E",scope:{save:"&",cancel:"&",disableSave:"&"},template:t.get("_angular/widget-button-toolbar/widget-button-toolbar.html")}}])}(),function(t){try{t=angular.module("risevision.widget.common.widget-button-toolbar")}catch(e){t=angular.module("risevision.widget.common.widget-button-toolbar",[])}t.run(["$templateCache",function(t){"use strict";t.put("_angular/widget-button-toolbar/widget-button-toolbar.html",'<div class="pull-right">\n  <button id="save" class="btn btn-primary btn-fixed-width" type="button" ng-click="save()" ng-disabled="disableSave()">\n    <span>{{"common.save" | translate}}</span>\n    <i class="fa fa-white fa-check icon-right"></i>\n  </button>\n  <button id="cancel" class="btn btn-default btn-fixed-width" type="button" ng-click="cancel()">\n    <span>{{"common.cancel" | translate}}</span>\n    <i class="fa fa-white fa-times icon-right"></i>\n  </button>\n</div>\n')}])}(),function(){"use strict";angular.module("risevision.widget.common.tooltip",["ui.bootstrap"]).directive("rvTooltip",[function(){return{restrict:"A",link:function(t,e){e.addClass("fa"),e.addClass("fa-question-circle"),e.addClass("fa-lg")}}}])}(),function(){"use strict";angular.module("risevision.widget.common.url-field",["risevision.common.i18n","risevision.widget.common.tooltip"]).directive("urlField",["$templateCache","$log",function(t,e){return{restrict:"E",require:"?ngModel",scope:{url:"=",hideLabel:"@",fileType:"@"},template:t.get("_angular/url-field/url-field.html"),link:function(t,n,a,i){function r(t,e){var n,a=t.toLowerCase();switch(e){case"image":n=[".jpg",".jpeg",".png",".bmp",".svg",".gif"];break;case"video":n=[".webm",".mp4",".ogv",".ogg"];break;default:n=[]}for(var i=0,r=n.length;r>i;i++)if(-1!==a.indexOf(n[i]))return!0;return!1}function o(){if("undefined"!==t.fileType&&"undefined"!==t.url&&"image"===t.fileType){var e=new Image;e.onload=function(){t.valid=!0,t.$apply()},e.onerror=function(){t.valid=!1,t.invalidType=t.fileType,t.$apply()},e.src=t.url}}function s(e){var n,a;return n=/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/i,-1===e.indexOf("://")&&(e="http://"+e),a=n.test(e),a&&"undefined"!=typeof t.fileType?(a=r(e,t.fileType),a||(t.invalidType=t.fileType)):t.invalidType="url",a&&o(),a}t.doValidation=!0,t.forcedValid=!1,t.valid=!0,t.invalidType="url",t.allowInitEmpty="undefined"!=typeof a.initEmpty,t.blur=function(){t.$emit("urlFieldBlur")},t.$watch("url",function(e){"undefined"!=typeof e&&null!==e&&(""!==e&&t.allowInitEmpty&&(t.allowInitEmpty=!1),t.doValidation&&!t.allowInitEmpty&&(t.valid=s(t.url)))}),t.$watch("valid",function(t){i&&(e.info("Calling $setValidity() on parent controller"),i.$setValidity("valid",t))}),t.$watch("doValidation",function(e){"undefined"!=typeof t.url&&(e?(t.forcedValid=!1,t.allowInitEmpty||(t.valid=s(t.url))):(t.forcedValid=!0,t.valid=!0))})}}}])}(),function(t){try{t=angular.module("risevision.widget.common.url-field")}catch(e){t=angular.module("risevision.widget.common.url-field",[])}t.run(["$templateCache",function(t){"use strict";t.put("_angular/url-field/url-field.html",'<div class="form-group" >\n  <label ng-if="!hideLabel">{{ "url.label" | translate }}</label>\n  <div>\n    <input name="url" type="text" ng-model="url" ng-blur="blur()" class="form-control" placeholder="http://">\n  </div>\n  <p ng-if="!valid && invalidType === \'url\'" class="text-danger">{{ "url.errors.url" | translate }}</p>\n  <p ng-if="!valid && invalidType === \'image\'" class="text-danger">{{ "url.errors.image" | translate }}</p>\n  <p ng-if="!valid && invalidType === \'video\'" class="text-danger">{{ "url.errors.video" | translate }}</p>\n  <div class="checkbox" ng-show="forcedValid || !valid">\n    <label>\n      <input name="validate-url" ng-click="doValidation = !doValidation" type="checkbox"\n             value="validate-url"> {{"url.validate.label" | translate}}\n    </label>\n  </div>\n</div>\n')}])}();var config={STORAGE_ENV:"prod"};"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json"),angular.module("risevision.widget.web-page.settings",["risevision.common.i18n","risevision.widget.common","risevision.widget.common.widget-button-toolbar","risevision.widget.common.tooltip","risevision.widget.common.url-field"]),angular.module("risevision.widget.common",[]),angular.module("risevision.widget.common").controller("settingsController",["$scope","settingsSaver","settingsGetter","settingsCloser",function(t,e,n,a){t.settings={params:{},additionalParams:{}},t.alerts=[],t.getAdditionalParam=function(e,n){var a=t.settings.additionalParams[e];return angular.isUndefined(a)?n:a},t.setAdditionalParam=function(e,n){t.settings.additionalParams[e]=n},t.loadAdditionalParams=function(){n.getAdditionalParams().then(function(e){t.settings.additionalParams=e,t.$broadcast("loadAdditionalParams",e)},function(t){alert(t)})},t.setAdditionalParams=function(e,n){t.settings.additionalParams[e]=n},t.saveSettings=function(){t.alerts=[],t.$broadcast("collectAdditionalParams"),e.saveSettings(t.settings).then(function(){},function(e){t.alerts=e.alerts})},t.closeSettings=function(){a.closeSettings().then(function(){},function(e){t.alerts=e.alerts})},t.settings.params=n.getParams(),t.loadAdditionalParams()}]).directive("scrollOnAlerts",function(){return{restrict:"A",scope:!1,link:function(t,e){t.$watchCollection("alerts",function(t,n){t.length>0&&0===n.length&&$("body").animate({scrollTop:e.offset().top},"fast")})}}}),angular.module("risevision.widget.common").constant("STORAGE_FILE_URL_BASE","storage.googleapis.com/risemedialibrary-").constant("STORAGE_FOLDER_URL_BASE","googleapis.com/storage/").factory("commonSettings",["$log","STORAGE_FILE_URL_BASE","STORAGE_FOLDER_URL_BASE",function(t,e,n){var a={getStorageUrlData:function(t){function a(t){return-1!==t.indexOf(e)?"file":-1!==t.indexOf(n)?"folder":null}function i(t){var e=t.split("risemedialibrary-");return e[1].slice(0,e[1].indexOf("/"))}var r,o,s,l,c={};if("file"===a(t))r=t.split(e)[1],r=decodeURIComponent(r.slice(r.indexOf("/")+1)),o=r.split("/"),c.companyId=i(t),c.fileName=o.pop(),c.folder=o.length>0?o.join("/"):"",""!==c.folder&&(c.folder+="/");else if("folder"===a(t)){s=t.split("?");for(var u=0;u<s.length;u++)if(l=s[u].split("="),"prefix"===l[0]&&"undefined"!=typeof l[1]&&""!==l[1]){c.companyId=i(t),c.folder=decodeURIComponent(l[1]),c.fileName="";break}}return c}};return a}]),angular.module("risevision.widget.common").factory("gadgetsApi",["$window",function(t){return t.gadgets}]),angular.module("risevision.widget.common").factory("googleFontLoader",["$http","angularLoad",function(t,e){function n(){for(var t="",n="",a="",r=[],o=!1,s=",sans-serif;",l="//fonts.googleapis.com/css?family=",c=["Buda","Coda Caption","Open Sans Condensed","UnifrakturCook","Molle"],u=0;u<i.length;u++)t=i[u],-1===c.indexOf(t)&&(a=l+t,e.loadCSS(a),r.push(a),/\s/.test(t)&&(o=!0),n+=o?t+"='"+t+"'"+s:t+"="+t+s);return{fonts:n,urls:r}}var a={},i=[];return a.getGoogleFonts=function(){return 0===i.length?t.get("https://www.googleapis.com/webfonts/v1/webfonts?key=AIzaSyBXxVK_IOV7LNQMuVVo_l7ZvN53ejN86zY&sort=alpha",{cache:!0}).then(function(t){var e=null;if(t.data&&t.data.items){for(var a=0,r=t.data.items.length;r>a;a++)e=t.data.items[a],e.subsets&&1===e.subsets.length&&"khmer"===e.subsets[0].toLowerCase()||i.push(e.family);return n()}}):n()},a.getFontsUsed=function(t){var e=[];return angular.forEach(i,function(n){-1!==t.indexOf(n)&&e.push(n)}),e},a}]),angular.module("risevision.widget.common").service("i18nLoader",["$window","$q",function(t,e){var n=e.defer();t.i18n.init({fallbackLng:"en",resGetPath:"locales/__ns_____lng__.json"},function(){n.resolve(t.i18n)}),this.get=function(){return n.promise}}]),angular.module("risevision.widget.common").factory("imageValidator",["$q",function(t){var e={isImage:function(e){var n=t.defer(),a=new Image;return a.onload=function(){n.resolve(!0)},a.onerror=function(){n.resolve(!1)},a.src=e,n.promise}};return e}]),angular.module("risevision.widget.common").service("settingsSaver",["$q","$log","gadgetsApi","settingsParser",function(t,e,n,a){function i(t){var e=angular.copy(t);return delete e.params.id,delete e.params.companyId,delete e.params.rsW,delete e.params.rsH,e}this.saveSettings=function(r,o){var s=t.defer(),l=[],c="";r=i(r),o&&(l=o(r)),l.length>0&&(e.debug("Validation failed.",l),s.reject({alerts:l})),r.params.hasOwnProperty("layoutURL")&&(c+=r.params.layoutURL+"?",delete r.params.layoutURL),c+=a.encodeParams(r.params);var u=a.encodeAdditionalParams(r.additionalParams);return n.rpc.call("","rscmd_saveSettings",function(t){e.debug("encoded settings",JSON.stringify(t)),e.debug("Settings saved. ",r),s.resolve(t)},{params:c,additionalParams:u}),s.promise}}]).service("settingsGetter",["$q","gadgetsApi","$log","settingsParser","$window","defaultSettings",function(t,e,n,a,i,r){this.getAdditionalParams=function(){var i=t.defer(),o=r.additionalParams||{};return e.rpc.call("","rscmd_getAdditionalParams",function(t){t=t?a.parseAdditionalParams(t):{},n.debug("getAdditionalParams returns ",t),i.resolve($.extend(!0,o,t))}),i.promise},this.getParams=function(){var t=r.params||{};return angular.extend(t,a.parseParams(i.location.search))}}]).service("settingsParser",[function(){function t(t){return 0===t.indexOf("up_")?t.slice(3):null}this.parseAdditionalParams=function(t){return t?JSON.parse(t):{}},this.encodeAdditionalParams=function(t){return JSON.stringify(t)},this.encodeParams=function(t){var e=[];for(var n in t)if(t.hasOwnProperty(n)){var a;a="object"==typeof t[n]?JSON.stringify(t[n]):t[n],e.push("up_"+encodeURIComponent(n)+"="+encodeURIComponent(a))}return e.join("&")},this.parseParams=function(e){"?"===e[0]&&(e=e.slice(1));for(var n={},a=e.split("&"),i=0;i<a.length;i++){var r=a[i].split("="),o=t(decodeURIComponent(r[0]));if(o)try{n[o]=JSON.parse(decodeURIComponent(r[1]))}catch(s){n[o]=decodeURIComponent(r[1])}}return n}}]).service("settingsCloser",["$q","$log","gadgetsApi",function(t,e,n){this.closeSettings=function(){var e=t.defer();return n.rpc.call("","rscmd_closeSettings",function(){e.resolve(!0)}),e.promise}}]).value("defaultSettings",{}),function(t){"use strict";t.module("risevision.widget.common.visualization",[]).factory("visualizationApi",["$q","$window",function(t,e){var n,a=t.defer(),i={get:function(){return n||(n=a.promise,e.google.visualization?a.resolve(e.google.visualization):e.google.setOnLoadCallback(function(){a.resolve(e.google.visualization)})),n}};return i}])}(angular),angular.module("risevision.widget.web-page.settings").controller("webPageSettingsController",["$scope","$log","xframeOptions",function(t,e,n){t.noXFrameOptions=!0,t.isPreviewUrl=!1,t.urlInput=!1,t.validateXFrame=function(){n.hasOptions(t.settings.additionalParams.url).then(function(e){t.noXFrameOptions=!e})},t.$on("urlFieldBlur",function(){t.settingsForm.pageUrl.$valid&&t.validateXFrame()}),t.$watch("urlInput",function(e){"undefined"!=typeof e&&t.settingsForm.pageUrl.$setValidity("urlInput",e)}),t.$watch("settings.additionalParams.url",function(e,n){t.isPreviewUrl=e&&e.indexOf("preview.risevision.com")>0,"undefined"==typeof n&&e&&""!==e?(t.urlInput=!0,t.validateXFrame()):"undefined"!=typeof e&&(t.noXFrameOptions=!0,""!==e&&(t.urlInput=!0))}),t.$watch("settings.additionalParams.zoom",function(e){"undefined"!=typeof e&&e>1&&(t.settings.additionalParams.interactivity.scrollbars=!1)}),t.$watch("settings.additionalParams.interactivity.interactive",function(e){"undefined"!=typeof e&&(e||(t.settings.additionalParams.interactivity.scrollbars=!1))})}]).value("defaultSettings",{params:{},additionalParams:{cacheBuster:!0,interactivity:{interactive:!1,scrollbars:!1},refresh:0,region:{showRegion:"page",horizontal:0,vertical:0},unload:!0,url:"",zoom:1}}),angular.module("risevision.widget.web-page.settings").factory("xframeOptions",["$log","$http",function(t,e){var n={hasOptions:function(n){return e({method:"GET",url:"https://proxy.risevision.com/"+n}).then(function(e){var n;return t.debug(e.headers()),e&&e.headers()?(n=e.headers("X-Frame-Options"),null!==n&&-1===n.indexOf("ALLOW-FROM")):void 0},function(e){t.debug("Webpage request failed with status code "+e.status+": "+e.statusText)})}};return n}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
