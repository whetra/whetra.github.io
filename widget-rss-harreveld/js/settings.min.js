angular.module("pascalprecht.translate",["ng"]).run(["$translate",function(e){var n=e.storageKey(),a=e.storage(),t=function(){var t=e.preferredLanguage();angular.isString(t)?e.use(t):a.put(n,e.use())};a?a.get(n)?e.use(a.get(n)).catch(t):t():angular.isString(e.preferredLanguage())&&e.use(e.preferredLanguage())}]),angular.module("pascalprecht.translate").provider("$translate",["$STORAGE_KEY",function(t){var C,u,D,T,S,E,O,e,M,A,P,I,F,L,U,N={},d=[],V=t,H=[],z=!1,j="translate-cloak",R=!1,n=function(){var t,e,n=window.navigator,a=["language","browserLanguage","systemLanguage","userLanguage"];if(angular.isArray(n.languages))for(t=0;t<n.languages.length;t++)if((e=n.languages[t])&&e.length)return e;for(t=0;t<a.length;t++)if((e=n[a[t]])&&e.length)return e;return null};n.displayName="angular-translate/service: getFirstBrowserLanguage";var a=function(){return(n()||"").split("-").join("_")};a.displayName="angular-translate/service: getLocale";var _=function(t,e){for(var n=0,a=t.length;n<a;n++)if(t[n]===e)return n;return-1},q=function(){return this.replace(/^\s+|\s+$/g,"")},B=function(t){for(var e,n=[],a=angular.lowercase(t),i=0,o=d.length;i<o;i++)n.push(angular.lowercase(d[i]));if(-1<_(n,a))return t;if(u)for(var r in u){var s=!1,l=Object.prototype.hasOwnProperty.call(u,r)&&angular.lowercase(r)===angular.lowercase(t);if("*"===r.slice(-1)&&(s=r.slice(0,-1)===t.slice(0,r.length-1)),(l||s)&&(e=u[r],-1<_(n,angular.lowercase(e))))return e}var c=t.split("_");return 1<c.length&&-1<_(n,angular.lowercase(c[0]))?c[0]:t},W=function(t,e){if(!t&&!e)return N;if(t&&!e){if(angular.isString(t))return N[t]}else angular.isObject(N[t])||(N[t]={}),angular.extend(N[t],G(e));return this};this.translations=W,this.cloakClassName=function(t){return t?(j=t,this):j};var G=function(t,e,n,a){var i,o,r;for(i in e||(e=[]),n||(n={}),t)Object.prototype.hasOwnProperty.call(t,i)&&(r=t[i],angular.isObject(r)?G(r,e.concat(i),n,i):(o=e.length?e.join(".")+"."+i:i,e.length&&i===a&&(n[""+e.join(".")]="@:"+o),n[o]=r));return n};this.addInterpolation=function(t){return H.push(t),this},this.useMessageFormatInterpolation=function(){return this.useInterpolation("$translateMessageFormatInterpolation")},this.useInterpolation=function(t){return A=t,this},this.useSanitizeValueStrategy=function(t){return z=t,this},this.preferredLanguage=function(t){return K(t),this};var K=function(t){return t&&(C=t),C};this.translationNotFoundIndicator=function(t){return this.translationNotFoundIndicatorLeft(t),this.translationNotFoundIndicatorRight(t),this},this.translationNotFoundIndicatorLeft=function(t){return t?(F=t,this):F},this.translationNotFoundIndicatorRight=function(t){return t?(L=t,this):L},this.fallbackLanguage=function(t){return Y(t),this};var Y=function(t){return t?(angular.isString(t)?(T=!0,D=[t]):angular.isArray(t)&&(T=!1,D=t),angular.isString(C)&&_(D,C)<0&&D.push(C),this):T?D[0]:D};this.use=function(t){if(t){if(!N[t]&&!P)throw new Error("$translateProvider couldn't find translationTable for langKey: '"+t+"'");return S=t,this}return S};var X=function(t){if(!t)return e?e+V:V;V=t};this.storageKey=X,this.useUrlLoader=function(t,e){return this.useLoader("$translateUrlLoader",angular.extend({url:t},e))},this.useStaticFilesLoader=function(t){return this.useLoader("$translateStaticFilesLoader",t)},this.useLoader=function(t,e){return P=t,I=e||{},this},this.useLocalStorage=function(){return this.useStorage("$translateLocalStorage")},this.useCookieStorage=function(){return this.useStorage("$translateCookieStorage")},this.useStorage=function(t){return O=t,this},this.storagePrefix=function(t){return t?(e=t,this):t},this.useMissingTranslationHandlerLog=function(){return this.useMissingTranslationHandler("$translateMissingTranslationHandlerLog")},this.useMissingTranslationHandler=function(t){return M=t,this},this.usePostCompiling=function(t){return R=!!t,this},this.determinePreferredLanguage=function(t){var e=t&&angular.isFunction(t)?t():a();return C=d.length?B(e):e,this},this.registerAvailableLanguageKeys=function(t,e){return t?(d=t,e&&(u=e),this):d},this.useLoaderCache=function(t){return!1===t?U=void 0:!0===t?U=!0:void 0===t?U="$translationCache":t&&(U=t),this},this.$get=["$log","$injector","$rootScope","$q",function(t,i,l,d){var a,p,f,m=i.get(A||"$translateDefaultInterpolation"),h=!1,g={},c={},v=function(t,r,s){if(angular.isArray(t)){return function(t){for(var a={},e=[],n=function(e){var n=d.defer(),t=function(t){a[e]=t,n.resolve([e,t])};return v(e,r,s).then(t,t),n.promise},i=0,o=t.length;i<o;i++)e.push(n(t[i]));return d.all(e).then(function(){return a})}(t)}var e=d.defer();t&&(t=q.apply(t));var n=function(){var t=C?c[C]:c[S];if(p=0,O&&!t){var e=a.get(V);if(t=c[e],D&&D.length){var n=_(D,e);p=0===n?1:0,_(D,C)<0&&D.push(C)}}return t}();return n?n.then(function(){o(t,r,s).then(e.resolve,e.reject)},e.reject):o(t,r,s).then(e.resolve,e.reject),e.promise},b=function(t){return F&&(t=[F,t].join(" ")),L&&(t=[t,L].join(" ")),t},u=function(t){S=t,l.$emit("$translateChangeSuccess",{language:t}),O&&a.put(v.storageKey(),S),m.setLocale(S),angular.forEach(g,function(t,e){g[e].setLocale(S)}),l.$emit("$translateChangeEnd",{language:t})},y=function(n){if(!n)throw"No language key specified for loading.";var a=d.defer();l.$emit("$translateLoadingStart",{language:n}),h=!0;var t=U;"string"==typeof t&&(t=i.get(t));var e=angular.extend({},I,{key:n,$http:angular.extend({},{cache:t},I.$http)});return i.get(P)(e).then(function(t){var e={};l.$emit("$translateLoadingSuccess",{language:n}),angular.isArray(t)?angular.forEach(t,function(t){angular.extend(e,G(t))}):angular.extend(e,G(t)),h=!1,a.resolve({key:n,table:e}),l.$emit("$translateLoadingEnd",{language:n})},function(t){l.$emit("$translateLoadingError",{language:t}),a.reject(t),l.$emit("$translateLoadingEnd",{language:t})}),a.promise};if(O&&(!(a=i.get(O)).get||!a.put))throw new Error("Couldn't use storage '"+O+"', missing get() or put() method!");angular.isFunction(m.useSanitizeValueStrategy)&&m.useSanitizeValueStrategy(z),H.length&&angular.forEach(H,function(t){var e=i.get(t);e.setLocale(C||S),angular.isFunction(e.useSanitizeValueStrategy)&&e.useSanitizeValueStrategy(z),g[e.getInterpolationIdentifier()]=e});var r=function(e,n,a,i){var t,o,r=d.defer();return(t=e,o=d.defer(),Object.prototype.hasOwnProperty.call(N,t)?o.resolve(N[t]):c[t]?c[t].then(function(t){W(t.key,t.table),o.resolve(t.table)},o.reject):o.reject(),o.promise).then(function(t){Object.prototype.hasOwnProperty.call(t,n)?(i.setLocale(e),r.resolve(i.interpolate(t[n],a)),i.setLocale(S)):r.reject()},r.reject),r.promise},$=function(t){if(M){var e=i.get(M)(t,S);return void 0!==e?e:t}return t},w=function(t,e,n,a){var i=d.defer();if(t<D.length){var o=D[t];r(o,e,n,a).then(i.resolve,function(){w(t+1,e,n,a).then(i.resolve)})}else i.resolve($(e));return i.promise},x=function(t,e,n,a){var i,o,r,s,l,c,u;if(t<D.length){var d=D[t];r=e,s=n,l=a,(u=N[o=d])&&Object.prototype.hasOwnProperty.call(u,r)&&(l.setLocale(o),c=l.interpolate(u[r],s),l.setLocale(S)),(i=c)||(i=x(t+1,e,n,a))}return i},o=function(t,e,n){var a,i,o,r=d.defer(),s=S?N[S]:N,l=n?g[n]:m;if(s&&Object.prototype.hasOwnProperty.call(s,t)){var c=s[t];"@:"===c.substr(0,2)?v(c.substr(2),e,n).then(r.resolve,r.reject):r.resolve(l.interpolate(c,e))}else{var u;M&&!h&&(u=$(t)),S&&D&&D.length?(a=t,i=e,o=l,w(0<f?f:p,a,i,o)).then(function(t){r.resolve(t)},function(t){r.reject(b(t))}):M&&!h&&u?r.resolve(u):r.reject(b(t))}return r.promise},k=function(t,e,n){var a,i=S?N[S]:N,o=n?g[n]:m;if(i&&Object.prototype.hasOwnProperty.call(i,t)){var r=i[t];a="@:"===r.substr(0,2)?k(r.substr(2),e,n):o.interpolate(r,e)}else{var s;M&&!h&&(s=$(t)),a=S&&D&&D.length?x((p=0)<f?f:p,t,e,o):M&&!h&&s?s:b(t)}return a};if(v.preferredLanguage=function(t){return t&&K(t),C},v.cloakClassName=function(){return j},v.fallbackLanguage=function(t){if(null!=t){if(Y(t),P&&D&&D.length)for(var e=0,n=D.length;e<n;e++)c[D[e]]||(c[D[e]]=y(D[e]));v.use(v.use())}return T?D[0]:D},v.useFallbackLanguage=function(t){if(null!=t)if(t){var e=_(D,t);-1<e&&(f=e)}else f=0},v.proposedLanguage=function(){return E},v.storage=function(){return a},v.use=function(e){if(!e)return S;var n=d.defer();l.$emit("$translateChangeStart",{language:e});var t=B(e);return t&&(e=t),N[e]||!P||c[e]?(n.resolve(e),u(e)):c[E=e]=y(e).then(function(t){return W(t.key,t.table),n.resolve(t.key),u(t.key),E===e&&(E=void 0),t},function(t){E===t&&(E=void 0),l.$emit("$translateChangeError",{language:t}),n.reject(t),l.$emit("$translateChangeEnd",{language:t})}),n.promise},v.storageKey=function(){return X()},v.isPostCompilingEnabled=function(){return R},v.refresh=function(e){if(!P)throw new Error("Couldn't refresh translation table, no loader registered!");var t=d.defer();function n(){t.resolve(),l.$emit("$translateRefreshEnd",{language:e})}function a(){t.reject(),l.$emit("$translateRefreshEnd",{language:e})}if(l.$emit("$translateRefreshStart",{language:e}),e)N[e]?y(e).then(function(t){W(t.key,t.table),e===S&&u(S),n()},a):a();else{var i=[],o={};if(D&&D.length)for(var r=0,s=D.length;r<s;r++)i.push(y(D[r])),o[D[r]]=!0;S&&!o[S]&&i.push(y(S)),d.all(i).then(function(t){angular.forEach(t,function(t){N[t.key]&&delete N[t.key],W(t.key,t.table)}),S&&u(S),n()})}return t.promise},v.instant=function(t,e,n){if(null===t||angular.isUndefined(t))return t;if(angular.isArray(t)){for(var a={},i=0,o=t.length;i<o;i++)a[t[i]]=v.instant(t[i],e,n);return a}if(angular.isString(t)&&t.length<1)return t;t&&(t=q.apply(t));var r,s=[];C&&s.push(C),S&&s.push(S),D&&D.length&&(s=s.concat(D));for(var l=0,c=s.length;l<c;l++){var u=s[l];if(N[u]&&void 0!==N[u][t]&&(r=k(t,e,n)),void 0!==r)break}return r||""===r||(r=m.interpolate(t,e),M&&!h&&(r=$(t))),r},v.versionInfo=function(){return"2.5.2"},v.loaderCache=function(){return U},P&&(angular.equals(N,{})&&v.use(v.use()),D&&D.length))for(var e=function(t){return W(t.key,t.table),l.$emit("$translateChangeEnd",{language:t.key}),t},n=0,s=D.length;n<s;n++)c[D[n]]=y(D[n]).then(e);return v}]}]),angular.module("pascalprecht.translate").factory("$translateDefaultInterpolation",["$interpolate",function(a){var t={},i=null,o={escaped:function(t){var e={};for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=angular.element("<div></div>").text(t[n]).html());return e}};return t.setLocale=function(t){t},t.getInterpolationIdentifier=function(){return"default"},t.useSanitizeValueStrategy=function(t){return i=t,this},t.interpolate=function(t,e){var n;return i&&(n=e,e=angular.isFunction(o[i])?o[i](n):n),a(t)(e||{})},t}]),angular.module("pascalprecht.translate").constant("$STORAGE_KEY","NG_TRANSLATE_LANG_KEY"),angular.module("pascalprecht.translate").directive("translate",["$translate","$q","$interpolate","$compile","$parse","$rootScope",function(y,t,$,w,x,k){return{restrict:"AE",scope:!0,compile:function(t,f){var m=f.translateValues?f.translateValues:void 0,h=f.translateInterpolation?f.translateInterpolation:void 0,g=t[0].outerHTML.match(/translate-value-+/i),v="^(.*)("+$.startSymbol()+".*"+$.endSymbol()+")(.*)",b="^(.*)"+$.startSymbol()+"(.*)"+$.endSymbol()+"(.*)";return function(a,l,c){a.interpolateParams={},a.preText="",a.postText="";var n={},e=function(t){if(angular.equals(t,"")||!angular.isDefined(t)){var e=l.text().match(v);angular.isArray(e)?(a.preText=e[1],a.postText=e[3],n.translate=$(e[2])(a.$parent),watcherMatches=l.text().match(b),angular.isArray(watcherMatches)&&watcherMatches[2]&&watcherMatches[2].length&&a.$watch(watcherMatches[2],function(t){n.translate=t,s()})):n.translate=l.text().replace(/^\s+|\s+$/g,"")}else n.translate=t;s()},t=function(e){c.$observe(e,function(t){n[e]=t,s()})};for(var i in c.$observe("translate",function(t){e(t)}),c)c.hasOwnProperty(i)&&"translateAttr"===i.substr(0,13)&&t(i);if(c.$observe("translateDefault",function(t){a.defaultText=t}),m&&c.$observe("translateValues",function(t){t&&a.$parent.$watch(function(){angular.extend(a.interpolateParams,x(t)(a.$parent))})}),g){var o=function(n){c.$observe(n,function(t){var e=angular.lowercase(n.substr(14,1))+n.substr(15);a.interpolateParams[e]=t})};for(var r in c)Object.prototype.hasOwnProperty.call(c,r)&&"translateValue"===r.substr(0,14)&&"translateValues"!==r&&o(r)}var s=function(){for(var t in n)n.hasOwnProperty(t)&&n[t]&&u(t,n[t],a,a.interpolateParams)},u=function(e,t,n,a){y(t,a,h).then(function(t){d(t,n,!0,e)},function(t){d(t,n,!1,e)})},d=function(t,e,n,a){if("translate"===a){n||void 0===e.defaultText||(t=e.defaultText),l.html(e.preText+t+e.postText);var i=y.isPostCompilingEnabled(),o=void 0!==f.translateCompile,r=o&&"false"!==f.translateCompile;(i&&!o||r)&&w(l.contents())(e)}else{n||void 0===e.defaultText||(t=e.defaultText);var s=c.$attr[a].substr(15);l.attr(s,t)}};a.$watch("interpolateParams",s,!0);var p=k.$on("$translateChangeSuccess",s);l.text().length&&e(""),s(),a.$on("$destroy",p)}}}}]),angular.module("pascalprecht.translate").directive("translateCloak",["$rootScope","$translate",function(n,o){return{compile:function(t){var a=function(){t.addClass(o.cloakClassName())},i=function(){t.removeClass(o.cloakClassName())},e=n.$on("$translateChangeEnd",function(){i(),e(),e=null});return a(),function(t,e,n){n.translateCloak&&n.translateCloak.length&&n.$observe("translateCloak",function(t){o(t).then(i,a)})}}}}]),angular.module("pascalprecht.translate").filter("translate",["$parse","$translate",function(a,i){var t=function(t,e,n){return angular.isObject(e)||(e=a(e)(this)),i.instant(t,e,n)};return t.$stateful=!0,t}]),function(t,p,e){"use strict";var u=p.$$minErr("$sanitize");var d=/^<((?:[a-zA-Z])[\w:-]*)((?:\s+[\w:-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*(>?)/,f=/^<\/\s*([\w:-]+)[^>]*>/,m=/([\w:-]+)(?:\s*=\s*(?:(?:"((?:[^"])*)")|(?:'((?:[^'])*)')|([^>\s]+)))?/g,h=/^</,g=/^<\//,v=/<!--(.*?)-->/g,b=/<!DOCTYPE([^>]*?)>/i,y=/<!\[CDATA\[(.*?)]]>/g,n=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,a=/([^\#-~| |!])/g,$=S("area,br,col,hr,img,wbr"),i=S("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),o=S("rp,rt"),w=p.extend({},o,i),x=p.extend({},i,S("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul")),k=p.extend({},o,S("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var")),r=S("animate,animateColor,animateMotion,animateTransform,circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,set,stop,svg,switch,text,title,tspan,use"),C=S("script,style"),s=p.extend({},$,x,k,w,r),l=S("background,cite,href,longdesc,src,usemap,xlink:href"),c=S("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,target,title,type,valign,value,vspace,width"),D=S("accent-height,accumulate,additive,alphabetic,arabic-form,ascent,attributeName,attributeType,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan"),T=p.extend({},l,D,c);function S(t){var e,n={},a=t.split(",");for(e=0;e<a.length;e++)n[a[e]]=!0;return n}var E=document.createElement("pre");function O(t){return t?(E.innerHTML=t.replace(/</g,"&lt;"),E.textContent):""}function M(t){return t.replace(/&/g,"&amp;").replace(n,function(t){return"&#"+(1024*(t.charCodeAt(0)-55296)+(t.charCodeAt(1)-56320)+65536)+";"}).replace(a,function(t){return"&#"+t.charCodeAt(0)+";"}).replace(/</g,"&lt;").replace(/>/g,"&gt;")}function A(t,o){var n=!1,r=p.bind(t,t.push);return{start:function(i,t,e){i=p.lowercase(i),!n&&C[i]&&(n=i),n||!0!==s[i]||(r("<"),r(i),p.forEach(t,function(t,e){var n=p.lowercase(e),a="img"===i&&"src"===n||"background"===n;!0!==T[n]||!0===l[n]&&!o(t,a)||(r(" "),r(e),r('="'),r(M(t)),r('"'))}),r(e?"/>":">"))},end:function(t){t=p.lowercase(t),n||!0!==s[t]||(r("</"),r(t),r(">")),t==n&&(n=!1)},chars:function(t){n||r(M(t))}}}p.module("ngSanitize",[]).provider("$sanitize",function(){this.$get=["$$sanitizeUri",function(n){return function(t){var e=[];return function(t,i){"string"!=typeof t&&(t=null==t?"":""+t);var e,n,a,o,s=[],r=t;for(s.last=function(){return s[s.length-1]};t;){if(n=!(o=""),s.last()&&C[s.last()]?(t=t.replace(new RegExp("([\\W\\w]*)<\\s*\\/\\s*"+s.last()+"[^>]*>","i"),function(t,e){return e=e.replace(v,"$1").replace(y,"$1"),i.chars&&i.chars(O(e)),""}),c("",s.last())):(0===t.indexOf("\x3c!--")?0<=(e=t.indexOf("--",4))&&t.lastIndexOf("--\x3e",e)===e&&(i.comment&&i.comment(t.substring(4,e)),t=t.substring(e+3),n=!1):b.test(t)?(a=t.match(b))&&(t=t.replace(a[0],""),n=!1):g.test(t)?(a=t.match(f))&&(t=t.substring(a[0].length),a[0].replace(f,c),n=!1):h.test(t)&&((a=t.match(d))?(a[4]&&(t=t.substring(a[0].length),a[0].replace(d,l)),n=!1):(o+="<",t=t.substring(1))),n&&(e=t.indexOf("<"),o+=e<0?t:t.substring(0,e),t=e<0?"":t.substring(e),i.chars&&i.chars(O(o)))),t==r)throw u("badparse","The sanitizer was unable to parse the following block of html: {0}",t);r=t}function l(t,e,n,a){if(e=p.lowercase(e),x[e])for(;s.last()&&k[s.last()];)c("",s.last());w[e]&&s.last()==e&&c("",e),(a=$[e]||!!a)||s.push(e);var r={};n.replace(m,function(t,e,n,a,i){var o=n||a||i||"";r[e]=O(o)}),i.start&&i.start(e,r,a)}function c(t,e){var n,a=0;if(e=p.lowercase(e))for(a=s.length-1;0<=a&&s[a]!=e;a--);if(0<=a){for(n=s.length-1;a<=n;n--)i.end&&i.end(s[n]);s.length=a}}c()}(t,A(e,function(t,e){return!/^unsafe/.test(n(t,e))})),e.join("")}}]}),p.module("ngSanitize").filter("linky",["$sanitize",function(c){var u=/((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"”’]/i,d=/^mailto:/i;return function(t,n){if(!t)return t;for(var e,a,i,o=t,r=[];e=o.match(u);)a=e[0],e[2]||e[4]||(a=(e[3]?"http://":"mailto:")+a),i=e.index,s(o.substr(0,i)),l(a,e[0].replace(d,"")),o=o.substring(i+e[0].length);return s(o),c(r.join(""));function s(t){var e,n;t&&r.push((e=t,A(n=[],p.noop).chars(e),n.join("")))}function l(t,e){r.push("<a "),p.isDefined(n)&&r.push('target="',n,'" '),r.push('href="',t.replace(/"/g,"&quot;"),'">'),s(e),r.push("</a>")}}}])}(window,window.angular),function(){"use strict";angular.module("angularLoad",[]).service("angularLoad",["$document","$q","$timeout",function(t,o,r){var n=t[0];function e(a){var i={};return function(t){if(void 0===i[t]){var e=o.defer(),n=a(t);n.onload=n.onreadystatechange=function(t){n.readyState&&"complete"!==n.readyState&&"loaded"!==n.readyState||r(function(){e.resolve(t)})},n.onerror=function(t){r(function(){e.reject(t)})},i[t]=e.promise}return i[t]}}this.loadScript=e(function(t){var e=n.createElement("script");return e.src=t,n.body.appendChild(e),e}),this.loadCSS=e(function(t){var e=n.createElement("link");return e.rel="stylesheet",e.type="text/css",e.href=t,n.head.appendChild(e),e})}])}(),angular.module("pascalprecht.translate").factory("$translateStaticFilesLoader",["$q","$http",function(t,a){return function(e){if(!e||!angular.isString(e.prefix)||!angular.isString(e.suffix))throw new Error("Couldn't load static files, no prefix or suffix specified!");var n=t.defer();return a(angular.extend({url:[e.prefix,e.key,e.suffix].join(""),method:"GET",params:""},e.$http)).success(function(t){n.resolve(t)}).error(function(t){n.reject(e.key)}),n.promise}}]),angular.module("pascalprecht.translate").factory("$translateStaticFilesLoader",["$q","$http",function(n,i){return function(t){if(!t||!angular.isString(t.prefix)||!angular.isString(t.suffix))throw new Error('Couldn"t load static files, no prefix or suffix specified!');var e=n.defer();return function e(n,a){i(angular.extend({url:[n.prefix,n.key.toLowerCase(),n.suffix].join(""),method:"GET",params:""},n.$http)).success(function(t){a.resolve(t)}).error(function(){if(0<=n.key.indexOf("_")){var t=n.key.substr(0,n.key.lastIndexOf("_"));e(angular.extend({},n,{key:t}),a)}else a.resolve("{}")})}(t,e),e.promise}}]),angular.module("risevision.common.i18n",["pascalprecht.translate","risevision.common.i18n.config"]).config(["$translateProvider","LOCALES_PREFIX","LOCALES_SUFIX",function(t,e,n){t.useStaticFilesLoader({prefix:e,suffix:n}),t.determinePreferredLanguage().fallbackLanguage("en")}]);var xmlToJSON=function(){this.version="1.3";var m={mergeCDATA:!0,grokAttr:!0,grokText:!0,normalize:!0,xmlns:!0,namespaceKey:"_ns",textKey:"_text",valueKey:"_value",attrKey:"_attr",cdataKey:"_cdata",attrsAsObject:!0,stripAttrPrefix:!0,stripElemPrefix:!0,childrenAsArray:!0},h=new RegExp(/(?!xmlns)^.*:/),g=new RegExp(/^\s+|\s+$/g);return this.grokType=function(t){return/^\s*$/.test(t)?null:/^(?:true|false)$/i.test(t)?"true"===t.toLowerCase():isFinite(t)?parseFloat(t):t},this.parseString=function(t,e){return this.parseXML(this.stringToXML(t),e)},this.parseXML=function(t,e){for(var n in e)m[n]=e[n];var a={},i=0,o="";if(m.xmlns&&t.namespaceURI&&(a[m.namespaceKey]=t.namespaceURI),t.attributes&&0<t.attributes.length){for(var r={};i<t.attributes.length;i++){var s=t.attributes.item(i);d={};var l="";l=m.stripAttrPrefix?s.name.replace(h,""):s.name,m.grokAttr?d[m.valueKey]=this.grokType(s.value.replace(g,"")):d[m.valueKey]=s.value.replace(g,""),m.xmlns&&s.namespaceURI&&(d[m.namespaceKey]=s.namespaceURI),m.attrsAsObject?r[l]=d:a[m.attrKey+l]=d}m.attrsAsObject&&(a[m.attrKey]=r)}if(t.hasChildNodes())for(var c,u,d,p=0;p<t.childNodes.length;p++)4===(c=t.childNodes.item(p)).nodeType?m.mergeCDATA?o+=c.nodeValue:a.hasOwnProperty(m.cdataKey)?(a[m.cdataKey].constructor!==Array&&(a[m.cdataKey]=[a[m.cdataKey]]),a[m.cdataKey].push(c.nodeValue)):m.childrenAsArray?(a[m.cdataKey]=[],a[m.cdataKey].push(c.nodeValue)):a[m.cdataKey]=c.nodeValue:3===c.nodeType?o+=c.nodeValue:1===c.nodeType&&(0===i&&(a={}),u=m.stripElemPrefix?c.nodeName.replace(h,""):c.nodeName,d=xmlToJSON.parseXML(c),a.hasOwnProperty(u)?(a[u].constructor!==Array&&(a[u]=[a[u]]),a[u].push(d)):(m.childrenAsArray?(a[u]=[],a[u].push(d)):a[u]=d,i++));else o||(m.childrenAsArray?(a[m.textKey]=[],a[m.textKey].push(null)):a[m.textKey]=null);if(o)if(m.grokText){var f=this.grokType(o.replace(g,""));null!=f&&(a[m.textKey]=f)}else m.normalize?a[m.textKey]=o.replace(g,"").replace(/\s+/g," "):a[m.textKey]=o.replace(g,"");return a},this.xmlToString=function(t){try{return t.xml?t.xml:(new XMLSerializer).serializeToString(t)}catch(t){return null}},this.stringToXML=function(t){try{var e=null;return window.DOMParser?e=(new DOMParser).parseFromString(t,"text/xml"):((e=new ActiveXObject("Microsoft.XMLDOM")).async=!1,e.loadXML(t),e)}catch(t){return null}},this}.call({});if("undefined"!=typeof module&&null!==module&&module.exports?module.exports=xmlToJSON:"function"==typeof define&&define.amd&&define(function(){return xmlToJSON}),function(c){"use strict";var u=function(t,e){this.options=c.extend({},u.DEFAULTS,e),this.$target=c(this.options.target).on("scroll.bs.affix.data-api",c.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",c.proxy(this.checkPositionWithEventLoop,this)),this.$element=c(t),this.affixed=this.unpin=this.pinnedOffset=null,this.checkPosition()};function n(a){return this.each(function(){var t=c(this),e=t.data("bs.affix"),n="object"==typeof a&&a;e||t.data("bs.affix",e=new u(this,n)),"string"==typeof a&&e[a]()})}u.VERSION="3.2.0",u.RESET="affix affix-top affix-bottom",u.DEFAULTS={offset:0,target:window},u.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(u.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},u.prototype.checkPositionWithEventLoop=function(){setTimeout(c.proxy(this.checkPosition,this),1)},u.prototype.checkPosition=function(){if(this.$element.is(":visible")){var t=c(document).height(),e=this.$target.scrollTop(),n=this.$element.offset(),a=this.options.offset,i=a.top,o=a.bottom;"object"!=typeof a&&(o=i=a),"function"==typeof i&&(i=a.top(this.$element)),"function"==typeof o&&(o=a.bottom(this.$element));var r=!(null!=this.unpin&&e+this.unpin<=n.top)&&(null!=o&&n.top+this.$element.height()>=t-o?"bottom":null!=i&&e<=i&&"top");if(this.affixed!==r){null!=this.unpin&&this.$element.css("top","");var s="affix"+(r?"-"+r:""),l=c.Event(s+".bs.affix");this.$element.trigger(l),l.isDefaultPrevented()||(this.affixed=r,this.unpin="bottom"==r?this.getPinnedOffset():null,this.$element.removeClass(u.RESET).addClass(s).trigger(c.Event(s.replace("affix","affixed"))),"bottom"==r&&this.$element.offset({top:t-this.$element.height()-o}))}}};var t=c.fn.affix;c.fn.affix=n,c.fn.affix.Constructor=u,c.fn.affix.noConflict=function(){return c.fn.affix=t,this},c(window).on("load",function(){c('[data-spy="affix"]').each(function(){var t=c(this),e=t.data();e.offset=e.offset||{},e.offsetBottom&&(e.offset.bottom=e.offsetBottom),e.offsetTop&&(e.offset.top=e.offsetTop),n.call(t,e)})})}(jQuery),function(o){"use strict";var e='[data-dismiss="alert"]',a=function(t){o(t).on("click",e,this.close)};a.VERSION="3.2.0",a.prototype.close=function(t){var e=o(this),n=e.attr("data-target");n||(n=(n=e.attr("href"))&&n.replace(/.*(?=#[^\s]*$)/,""));var a=o(n);function i(){a.detach().trigger("closed.bs.alert").remove()}t&&t.preventDefault(),a.length||(a=e.hasClass("alert")?e:e.parent()),a.trigger(t=o.Event("close.bs.alert")),t.isDefaultPrevented()||(a.removeClass("in"),o.support.transition&&a.hasClass("fade")?a.one("bsTransitionEnd",i).emulateTransitionEnd(150):i())};var t=o.fn.alert;o.fn.alert=function(n){return this.each(function(){var t=o(this),e=t.data("bs.alert");e||t.data("bs.alert",e=new a(this)),"string"==typeof n&&e[n].call(t)})},o.fn.alert.Constructor=a,o.fn.alert.noConflict=function(){return o.fn.alert=t,this},o(document).on("click.bs.alert.data-api",e,a.prototype.close)}(jQuery),function(o){"use strict";var i=function(t,e){this.$element=o(t),this.options=o.extend({},i.DEFAULTS,e),this.isLoading=!1};function n(a){return this.each(function(){var t=o(this),e=t.data("bs.button"),n="object"==typeof a&&a;e||t.data("bs.button",e=new i(this,n)),"toggle"==a?e.toggle():a&&e.setState(a)})}i.VERSION="3.2.0",i.DEFAULTS={loadingText:"loading..."},i.prototype.setState=function(t){var e="disabled",n=this.$element,a=n.is("input")?"val":"html",i=n.data();t+="Text",null==i.resetText&&n.data("resetText",n[a]()),n[a](null==i[t]?this.options[t]:i[t]),setTimeout(o.proxy(function(){"loadingText"==t?(this.isLoading=!0,n.addClass(e).attr(e,e)):this.isLoading&&(this.isLoading=!1,n.removeClass(e).removeAttr(e))},this),0)},i.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var n=this.$element.find("input");"radio"==n.prop("type")&&(n.prop("checked")&&this.$element.hasClass("active")?t=!1:e.find(".active").removeClass("active")),t&&n.prop("checked",!this.$element.hasClass("active")).trigger("change")}t&&this.$element.toggleClass("active")};var t=o.fn.button;o.fn.button=n,o.fn.button.Constructor=i,o.fn.button.noConflict=function(){return o.fn.button=t,this},o(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(t){var e=o(t.target);e.hasClass("btn")||(e=e.closest(".btn")),n.call(e,"toggle"),t.preventDefault()})}(jQuery),function(p){"use strict";var o=function(t,e){this.$element=p(t).on("keydown.bs.carousel",p.proxy(this.keydown,this)),this.$indicators=this.$element.find(".carousel-indicators"),this.options=e,this.paused=this.sliding=this.interval=this.$active=this.$items=null,"hover"==this.options.pause&&this.$element.on("mouseenter.bs.carousel",p.proxy(this.pause,this)).on("mouseleave.bs.carousel",p.proxy(this.cycle,this))};function r(i){return this.each(function(){var t=p(this),e=t.data("bs.carousel"),n=p.extend({},o.DEFAULTS,t.data(),"object"==typeof i&&i),a="string"==typeof i?i:n.slide;e||t.data("bs.carousel",e=new o(this,n)),"number"==typeof i?e.to(i):a?e[a]():n.interval&&e.pause().cycle()})}o.VERSION="3.2.0",o.DEFAULTS={interval:5e3,pause:"hover",wrap:!0},o.prototype.keydown=function(t){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()},o.prototype.cycle=function(t){return t||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(p.proxy(this.next,this),this.options.interval)),this},o.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},o.prototype.to=function(t){var e=this,n=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(t>this.$items.length-1||t<0))return this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):n==t?this.pause().cycle():this.slide(n<t?"next":"prev",p(this.$items[t]))},o.prototype.pause=function(t){return t||(this.paused=!0),this.$element.find(".next, .prev").length&&p.support.transition&&(this.$element.trigger(p.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},o.prototype.next=function(){if(!this.sliding)return this.slide("next")},o.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},o.prototype.slide=function(t,e){var n=this.$element.find(".item.active"),a=e||n[t](),i=this.interval,o="next"==t?"left":"right",r="next"==t?"first":"last",s=this;if(!a.length){if(!this.options.wrap)return;a=this.$element.find(".item")[r]()}if(a.hasClass("active"))return this.sliding=!1;var l=a[0],c=p.Event("slide.bs.carousel",{relatedTarget:l,direction:o});if(this.$element.trigger(c),!c.isDefaultPrevented()){if(this.sliding=!0,i&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var u=p(this.$indicators.children()[this.getItemIndex(a)]);u&&u.addClass("active")}var d=p.Event("slid.bs.carousel",{relatedTarget:l,direction:o});return p.support.transition&&this.$element.hasClass("slide")?(a.addClass(t),a[0].offsetWidth,n.addClass(o),a.addClass(o),n.one("bsTransitionEnd",function(){a.removeClass([t,o].join(" ")).addClass("active"),n.removeClass(["active",o].join(" ")),s.sliding=!1,setTimeout(function(){s.$element.trigger(d)},0)}).emulateTransitionEnd(1e3*n.css("transition-duration").slice(0,-1))):(n.removeClass("active"),a.addClass("active"),this.sliding=!1,this.$element.trigger(d)),i&&this.cycle(),this}};var t=p.fn.carousel;p.fn.carousel=r,p.fn.carousel.Constructor=o,p.fn.carousel.noConflict=function(){return p.fn.carousel=t,this},p(document).on("click.bs.carousel.data-api","[data-slide], [data-slide-to]",function(t){var e,n=p(this),a=p(n.attr("data-target")||(e=n.attr("href"))&&e.replace(/.*(?=#[^\s]+$)/,""));if(a.hasClass("carousel")){var i=p.extend({},a.data(),n.data()),o=n.attr("data-slide-to");o&&(i.interval=!1),r.call(a,i),o&&a.data("bs.carousel").to(o),t.preventDefault()}}),p(window).on("load",function(){p('[data-ride="carousel"]').each(function(){var t=p(this);r.call(t,t.data())})})}(jQuery),function(c){"use strict";var i=function(t,e){this.$element=c(t),this.options=c.extend({},i.DEFAULTS,e),this.transitioning=null,this.options.parent&&(this.$parent=c(this.options.parent)),this.options.toggle&&this.toggle()};function u(a){return this.each(function(){var t=c(this),e=t.data("bs.collapse"),n=c.extend({},i.DEFAULTS,t.data(),"object"==typeof a&&a);!e&&n.toggle&&"show"==a&&(a=!a),e||t.data("bs.collapse",e=new i(this,n)),"string"==typeof a&&e[a]()})}i.VERSION="3.2.0",i.DEFAULTS={toggle:!0},i.prototype.dimension=function(){return this.$element.hasClass("width")?"width":"height"},i.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var t=c.Event("show.bs.collapse");if(this.$element.trigger(t),!t.isDefaultPrevented()){var e=this.$parent&&this.$parent.find("> .panel > .in");if(e&&e.length){var n=e.data("bs.collapse");if(n&&n.transitioning)return;u.call(e,"hide"),n||e.data("bs.collapse",null)}var a=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[a](0),this.transitioning=1;var i=function(){this.$element.removeClass("collapsing").addClass("collapse in")[a](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!c.support.transition)return i.call(this);var o=c.camelCase(["scroll",a].join("-"));this.$element.one("bsTransitionEnd",c.proxy(i,this)).emulateTransitionEnd(350)[a](this.$element[0][o])}}},i.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var t=c.Event("hide.bs.collapse");if(this.$element.trigger(t),!t.isDefaultPrevented()){var e=this.dimension();this.$element[e](this.$element[e]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse").removeClass("in"),this.transitioning=1;var n=function(){this.transitioning=0,this.$element.trigger("hidden.bs.collapse").removeClass("collapsing").addClass("collapse")};if(!c.support.transition)return n.call(this);this.$element[e](0).one("bsTransitionEnd",c.proxy(n,this)).emulateTransitionEnd(350)}}},i.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()};var t=c.fn.collapse;c.fn.collapse=u,c.fn.collapse.Constructor=i,c.fn.collapse.noConflict=function(){return c.fn.collapse=t,this},c(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(t){var e,n=c(this),a=n.attr("data-target")||t.preventDefault()||(e=n.attr("href"))&&e.replace(/.*(?=#[^\s]+$)/,""),i=c(a),o=i.data("bs.collapse"),r=o?"toggle":n.data(),s=n.attr("data-parent"),l=s&&c(s);o&&o.transitioning||(l&&l.find('[data-toggle="collapse"][data-parent="'+s+'"]').not(n).addClass("collapsed"),n[i.hasClass("in")?"addClass":"removeClass"]("collapsed")),u.call(i,r)})}(jQuery),function(s){"use strict";var l='[data-toggle="dropdown"]',a=function(t){s(t).on("click.bs.dropdown",this.toggle)};function o(n){n&&3===n.which||(s(".dropdown-backdrop").remove(),s(l).each(function(){var t=c(s(this)),e={relatedTarget:this};t.hasClass("open")&&(t.trigger(n=s.Event("hide.bs.dropdown",e)),n.isDefaultPrevented()||t.removeClass("open").trigger("hidden.bs.dropdown",e))}))}function c(t){var e=t.attr("data-target");e||(e=(e=t.attr("href"))&&/#[A-Za-z]/.test(e)&&e.replace(/.*(?=#[^\s]*$)/,""));var n=e&&s(e);return n&&n.length?n:t.parent()}a.VERSION="3.2.0",a.prototype.toggle=function(t){var e=s(this);if(!e.is(".disabled, :disabled")){var n=c(e),a=n.hasClass("open");if(o(),!a){"ontouchstart"in document.documentElement&&!n.closest(".navbar-nav").length&&s('<div class="dropdown-backdrop"/>').insertAfter(s(this)).on("click",o);var i={relatedTarget:this};if(n.trigger(t=s.Event("show.bs.dropdown",i)),t.isDefaultPrevented())return;e.trigger("focus"),n.toggleClass("open").trigger("shown.bs.dropdown",i)}return!1}},a.prototype.keydown=function(t){if(/(38|40|27)/.test(t.keyCode)){var e=s(this);if(t.preventDefault(),t.stopPropagation(),!e.is(".disabled, :disabled")){var n=c(e),a=n.hasClass("open");if(!a||a&&27==t.keyCode)return 27==t.which&&n.find(l).trigger("focus"),e.trigger("click");var i=" li:not(.divider):visible a",o=n.find('[role="menu"]'+i+', [role="listbox"]'+i);if(o.length){var r=o.index(o.filter(":focus"));38==t.keyCode&&0<r&&r--,40==t.keyCode&&r<o.length-1&&r++,~r||(r=0),o.eq(r).trigger("focus")}}}};var t=s.fn.dropdown;s.fn.dropdown=function(n){return this.each(function(){var t=s(this),e=t.data("bs.dropdown");e||t.data("bs.dropdown",e=new a(this)),"string"==typeof n&&e[n].call(t)})},s.fn.dropdown.Constructor=a,s.fn.dropdown.noConflict=function(){return s.fn.dropdown=t,this},s(document).on("click.bs.dropdown.data-api",o).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",l,a.prototype.toggle).on("keydown.bs.dropdown.data-api",l+', [role="menu"], [role="listbox"]',a.prototype.keydown)}(jQuery),function(r){"use strict";var a=function(t){this.element=r(t)};function e(n){return this.each(function(){var t=r(this),e=t.data("bs.tab");e||t.data("bs.tab",e=new a(this)),"string"==typeof n&&e[n]()})}a.VERSION="3.2.0",a.prototype.show=function(){var t=this.element,e=t.closest("ul:not(.dropdown-menu)"),n=t.data("target");if(n||(n=(n=t.attr("href"))&&n.replace(/.*(?=#[^\s]*$)/,"")),!t.parent("li").hasClass("active")){var a=e.find(".active:last a")[0],i=r.Event("show.bs.tab",{relatedTarget:a});if(t.trigger(i),!i.isDefaultPrevented()){var o=r(n);this.activate(t.closest("li"),e),this.activate(o,o.parent(),function(){t.trigger({type:"shown.bs.tab",relatedTarget:a})})}}},a.prototype.activate=function(t,e,n){var a=e.find("> .active"),i=n&&r.support.transition&&a.hasClass("fade");function o(){a.removeClass("active").find("> .dropdown-menu > .active").removeClass("active"),t.addClass("active"),i?(t[0].offsetWidth,t.addClass("in")):t.removeClass("fade"),t.parent(".dropdown-menu")&&t.closest("li.dropdown").addClass("active"),n&&n()}i?a.one("bsTransitionEnd",o).emulateTransitionEnd(150):o(),a.removeClass("in")};var t=r.fn.tab;r.fn.tab=e,r.fn.tab.Constructor=a,r.fn.tab.noConflict=function(){return r.fn.tab=t,this},r(document).on("click.bs.tab.data-api",'[data-toggle="tab"], [data-toggle="pill"]',function(t){t.preventDefault(),e.call(r(this),"show")})}(jQuery),function(a){"use strict";a.fn.emulateTransitionEnd=function(t){var e=!1,n=this;a(this).one("bsTransitionEnd",function(){e=!0});return setTimeout(function(){e||a(n).trigger(a.support.transition.end)},t),this},a(function(){a.support.transition=function(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in e)if(void 0!==t.style[n])return{end:e[n]};return!1}(),a.support.transition&&(a.event.special.bsTransitionEnd={bindType:a.support.transition.end,delegateType:a.support.transition.end,handle:function(t){if(a(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}})})}(jQuery),function(o){"use strict";function i(t,e){var n=o.proxy(this.process,this);this.$body=o("body"),this.$scrollElement=o(t).is("body")?o(window):o(t),this.options=o.extend({},i.DEFAULTS,e),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",n),this.refresh(),this.process()}function e(a){return this.each(function(){var t=o(this),e=t.data("bs.scrollspy"),n="object"==typeof a&&a;e||t.data("bs.scrollspy",e=new i(this,n)),"string"==typeof a&&e[a]()})}i.VERSION="3.2.0",i.DEFAULTS={offset:10},i.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},i.prototype.refresh=function(){var a="offset",i=0;o.isWindow(this.$scrollElement[0])||(a="position",i=this.$scrollElement.scrollTop()),this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight();var t=this;this.$body.find(this.selector).map(function(){var t=o(this),e=t.data("target")||t.attr("href"),n=/^#./.test(e)&&o(e);return n&&n.length&&n.is(":visible")&&[[n[a]().top+i,e]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){t.offsets.push(this[0]),t.targets.push(this[1])})},i.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,n=this.getScrollHeight(),a=this.options.offset+n-this.$scrollElement.height(),i=this.offsets,o=this.targets,r=this.activeTarget;if(this.scrollHeight!=n&&this.refresh(),a<=e)return r!=(t=o[o.length-1])&&this.activate(t);if(r&&e<=i[0])return r!=(t=o[0])&&this.activate(t);for(t=i.length;t--;)r!=o[t]&&e>=i[t]&&(!i[t+1]||e<=i[t+1])&&this.activate(o[t])},i.prototype.activate=function(t){this.activeTarget=t,o(this.selector).parentsUntil(this.options.target,".active").removeClass("active");var e=this.selector+'[data-target="'+t+'"],'+this.selector+'[href="'+t+'"]',n=o(e).parents("li").addClass("active");n.parent(".dropdown-menu").length&&(n=n.closest("li.dropdown").addClass("active")),n.trigger("activate.bs.scrollspy")};var t=o.fn.scrollspy;o.fn.scrollspy=e,o.fn.scrollspy.Constructor=i,o.fn.scrollspy.noConflict=function(){return o.fn.scrollspy=t,this},o(window).on("load.bs.scrollspy.data-api",function(){o('[data-spy="scroll"]').each(function(){var t=o(this);e.call(t,t.data())})})}(jQuery),function(o){"use strict";var r=function(t,e){this.options=e,this.$body=o(document.body),this.$element=o(t),this.$backdrop=this.isShown=null,this.scrollbarWidth=0,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,o.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};function s(a,i){return this.each(function(){var t=o(this),e=t.data("bs.modal"),n=o.extend({},r.DEFAULTS,t.data(),"object"==typeof a&&a);e||t.data("bs.modal",e=new r(this,n)),"string"==typeof a?e[a](i):n.show&&e.show(i)})}r.VERSION="3.2.0",r.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},r.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},r.prototype.show=function(n){var a=this,t=o.Event("show.bs.modal",{relatedTarget:n});this.$element.trigger(t),this.isShown||t.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.$body.addClass("modal-open"),this.setScrollbar(),this.escape(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',o.proxy(this.hide,this)),this.backdrop(function(){var t=o.support.transition&&a.$element.hasClass("fade");a.$element.parent().length||a.$element.appendTo(a.$body),a.$element.show().scrollTop(0),t&&a.$element[0].offsetWidth,a.$element.addClass("in").attr("aria-hidden",!1),a.enforceFocus();var e=o.Event("shown.bs.modal",{relatedTarget:n});t?a.$element.find(".modal-dialog").one("bsTransitionEnd",function(){a.$element.trigger("focus").trigger(e)}).emulateTransitionEnd(300):a.$element.trigger("focus").trigger(e)}))},r.prototype.hide=function(t){t&&t.preventDefault(),t=o.Event("hide.bs.modal"),this.$element.trigger(t),this.isShown&&!t.isDefaultPrevented()&&(this.isShown=!1,this.$body.removeClass("modal-open"),this.resetScrollbar(),this.escape(),o(document).off("focusin.bs.modal"),this.$element.removeClass("in").attr("aria-hidden",!0).off("click.dismiss.bs.modal"),o.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",o.proxy(this.hideModal,this)).emulateTransitionEnd(300):this.hideModal())},r.prototype.enforceFocus=function(){o(document).off("focusin.bs.modal").on("focusin.bs.modal",o.proxy(function(t){this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},r.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keyup.dismiss.bs.modal",o.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keyup.dismiss.bs.modal")},r.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$element.trigger("hidden.bs.modal")})},r.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},r.prototype.backdrop=function(t){var e=this,n=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var a=o.support.transition&&n;if(this.$backdrop=o('<div class="modal-backdrop '+n+'" />').appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",o.proxy(function(t){t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus.call(this.$element[0]):this.hide.call(this))},this)),a&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!t)return;a?this.$backdrop.one("bsTransitionEnd",t).emulateTransitionEnd(150):t()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var i=function(){e.removeBackdrop(),t&&t()};o.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",i).emulateTransitionEnd(150):i()}else t&&t()},r.prototype.checkScrollbar=function(){document.body.clientWidth>=window.innerWidth||(this.scrollbarWidth=this.scrollbarWidth||this.measureScrollbar())},r.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.scrollbarWidth&&this.$body.css("padding-right",t+this.scrollbarWidth)},r.prototype.resetScrollbar=function(){this.$body.css("padding-right","")},r.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var t=o.fn.modal;o.fn.modal=s,o.fn.modal.Constructor=r,o.fn.modal.noConflict=function(){return o.fn.modal=t,this},o(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(t){var e=o(this),n=e.attr("href"),a=o(e.attr("data-target")||n&&n.replace(/.*(?=#[^\s]+$)/,"")),i=a.data("bs.modal")?"toggle":o.extend({remote:!/#/.test(n)&&n},a.data(),e.data());e.is("a")&&t.preventDefault(),a.one("show.bs.modal",function(t){t.isDefaultPrevented()||a.one("hidden.bs.modal",function(){e.is(":visible")&&e.trigger("focus")})}),s.call(a,i,this)})}(jQuery),function(g){"use strict";var i=function(t,e){this.type=this.options=this.enabled=this.timeout=this.hoverState=this.$element=null,this.init("tooltip",t,e)};i.VERSION="3.2.0",i.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},i.prototype.init=function(t,e,n){this.enabled=!0,this.type=t,this.$element=g(e),this.options=this.getOptions(n),this.$viewport=this.options.viewport&&g(this.options.viewport.selector||this.options.viewport);for(var a=this.options.trigger.split(" "),i=a.length;i--;){var o=a[i];if("click"==o)this.$element.on("click."+this.type,this.options.selector,g.proxy(this.toggle,this));else if("manual"!=o){var r="hover"==o?"mouseenter":"focusin",s="hover"==o?"mouseleave":"focusout";this.$element.on(r+"."+this.type,this.options.selector,g.proxy(this.enter,this)),this.$element.on(s+"."+this.type,this.options.selector,g.proxy(this.leave,this))}}this.options.selector?this._options=g.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},i.prototype.getDefaults=function(){return i.DEFAULTS},i.prototype.getOptions=function(t){return(t=g.extend({},this.getDefaults(),this.$element.data(),t)).delay&&"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),t},i.prototype.getDelegateOptions=function(){var n={},a=this.getDefaults();return this._options&&g.each(this._options,function(t,e){a[t]!=e&&(n[t]=e)}),n},i.prototype.enter=function(t){var e=t instanceof this.constructor?t:g(t.currentTarget).data("bs."+this.type);if(e||(e=new this.constructor(t.currentTarget,this.getDelegateOptions()),g(t.currentTarget).data("bs."+this.type,e)),clearTimeout(e.timeout),e.hoverState="in",!e.options.delay||!e.options.delay.show)return e.show();e.timeout=setTimeout(function(){"in"==e.hoverState&&e.show()},e.options.delay.show)},i.prototype.leave=function(t){var e=t instanceof this.constructor?t:g(t.currentTarget).data("bs."+this.type);if(e||(e=new this.constructor(t.currentTarget,this.getDelegateOptions()),g(t.currentTarget).data("bs."+this.type,e)),clearTimeout(e.timeout),e.hoverState="out",!e.options.delay||!e.options.delay.hide)return e.hide();e.timeout=setTimeout(function(){"out"==e.hoverState&&e.hide()},e.options.delay.hide)},i.prototype.show=function(){var t=g.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(t);var e=g.contains(document.documentElement,this.$element[0]);if(t.isDefaultPrevented()||!e)return;var n=this,a=this.tip(),i=this.getUID(this.type);this.setContent(),a.attr("id",i),this.$element.attr("aria-describedby",i),this.options.animation&&a.addClass("fade");var o="function"==typeof this.options.placement?this.options.placement.call(this,a[0],this.$element[0]):this.options.placement,r=/\s?auto?\s?/i,s=r.test(o);s&&(o=o.replace(r,"")||"top"),a.detach().css({top:0,left:0,display:"block"}).addClass(o).data("bs."+this.type,this),this.options.container?a.appendTo(this.options.container):a.insertAfter(this.$element);var l=this.getPosition(),c=a[0].offsetWidth,u=a[0].offsetHeight;if(s){var d=o,p=this.$element.parent(),f=this.getPosition(p);o="bottom"==o&&l.top+l.height+u-f.scroll>f.height?"top":"top"==o&&l.top-f.scroll-u<0?"bottom":"right"==o&&l.right+c>f.width?"left":"left"==o&&l.left-c<f.left?"right":o,a.removeClass(d).addClass(o)}var m=this.getCalculatedOffset(o,l,c,u);this.applyPlacement(m,o);var h=function(){n.$element.trigger("shown.bs."+n.type),n.hoverState=null};g.support.transition&&this.$tip.hasClass("fade")?a.one("bsTransitionEnd",h).emulateTransitionEnd(150):h()}},i.prototype.applyPlacement=function(t,e){var n=this.tip(),a=n[0].offsetWidth,i=n[0].offsetHeight,o=parseInt(n.css("margin-top"),10),r=parseInt(n.css("margin-left"),10);isNaN(o)&&(o=0),isNaN(r)&&(r=0),t.top=t.top+o,t.left=t.left+r,g.offset.setOffset(n[0],g.extend({using:function(t){n.css({top:Math.round(t.top),left:Math.round(t.left)})}},t),0),n.addClass("in");var s=n[0].offsetWidth,l=n[0].offsetHeight;"top"==e&&l!=i&&(t.top=t.top+i-l);var c=this.getViewportAdjustedDelta(e,t,s,l);c.left?t.left+=c.left:t.top+=c.top;var u=c.left?2*c.left-a+s:2*c.top-i+l,d=c.left?"left":"top",p=c.left?"offsetWidth":"offsetHeight";n.offset(t),this.replaceArrow(u,n[0][p],d)},i.prototype.replaceArrow=function(t,e,n){this.arrow().css(n,t?50*(1-t/e)+"%":"")},i.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},i.prototype.hide=function(){var t=this,e=this.tip(),n=g.Event("hide.bs."+this.type);function a(){"in"!=t.hoverState&&e.detach(),t.$element.trigger("hidden.bs."+t.type)}if(this.$element.removeAttr("aria-describedby"),this.$element.trigger(n),!n.isDefaultPrevented())return e.removeClass("in"),g.support.transition&&this.$tip.hasClass("fade")?e.one("bsTransitionEnd",a).emulateTransitionEnd(150):a(),this.hoverState=null,this},i.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},i.prototype.hasContent=function(){return this.getTitle()},i.prototype.getPosition=function(t){var e=(t=t||this.$element)[0],n="BODY"==e.tagName;return g.extend({},"function"==typeof e.getBoundingClientRect?e.getBoundingClientRect():null,{scroll:n?document.documentElement.scrollTop||document.body.scrollTop:t.scrollTop(),width:n?g(window).width():t.outerWidth(),height:n?g(window).height():t.outerHeight()},n?{top:0,left:0}:t.offset())},i.prototype.getCalculatedOffset=function(t,e,n,a){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-n/2}:"top"==t?{top:e.top-a,left:e.left+e.width/2-n/2}:"left"==t?{top:e.top+e.height/2-a/2,left:e.left-n}:{top:e.top+e.height/2-a/2,left:e.left+e.width}},i.prototype.getViewportAdjustedDelta=function(t,e,n,a){var i={top:0,left:0};if(!this.$viewport)return i;var o=this.options.viewport&&this.options.viewport.padding||0,r=this.getPosition(this.$viewport);if(/right|left/.test(t)){var s=e.top-o-r.scroll,l=e.top+o-r.scroll+a;s<r.top?i.top=r.top-s:l>r.top+r.height&&(i.top=r.top+r.height-l)}else{var c=e.left-o,u=e.left+o+n;c<r.left?i.left=r.left-c:u>r.width&&(i.left=r.left+r.width-u)}return i},i.prototype.getTitle=function(){var t=this.$element,e=this.options;return t.attr("data-original-title")||("function"==typeof e.title?e.title.call(t[0]):e.title)},i.prototype.getUID=function(t){for(;t+=~~(1e6*Math.random()),document.getElementById(t););return t},i.prototype.tip=function(){return this.$tip=this.$tip||g(this.options.template)},i.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},i.prototype.validate=function(){this.$element[0].parentNode||(this.hide(),this.$element=null,this.options=null)},i.prototype.enable=function(){this.enabled=!0},i.prototype.disable=function(){this.enabled=!1},i.prototype.toggleEnabled=function(){this.enabled=!this.enabled},i.prototype.toggle=function(t){var e=this;t&&((e=g(t.currentTarget).data("bs."+this.type))||(e=new this.constructor(t.currentTarget,this.getDelegateOptions()),g(t.currentTarget).data("bs."+this.type,e))),e.tip().hasClass("in")?e.leave(e):e.enter(e)},i.prototype.destroy=function(){clearTimeout(this.timeout),this.hide().$element.off("."+this.type).removeData("bs."+this.type)};var t=g.fn.tooltip;g.fn.tooltip=function(a){return this.each(function(){var t=g(this),e=t.data("bs.tooltip"),n="object"==typeof a&&a;(e||"destroy"!=a)&&(e||t.data("bs.tooltip",e=new i(this,n)),"string"==typeof a&&e[a]())})},g.fn.tooltip.Constructor=i,g.fn.tooltip.noConflict=function(){return g.fn.tooltip=t,this}}(jQuery),function(i){"use strict";var o=function(t,e){this.init("popover",t,e)};if(!i.fn.tooltip)throw new Error("Popover requires tooltip.js");o.VERSION="3.2.0",o.DEFAULTS=i.extend({},i.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),((o.prototype=i.extend({},i.fn.tooltip.Constructor.prototype)).constructor=o).prototype.getDefaults=function(){return o.DEFAULTS},o.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),n=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").empty()[this.options.html?"string"==typeof n?"html":"append":"text"](n),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},o.prototype.hasContent=function(){return this.getTitle()||this.getContent()},o.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},o.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")},o.prototype.tip=function(){return this.$tip||(this.$tip=i(this.options.template)),this.$tip};var t=i.fn.popover;i.fn.popover=function(a){return this.each(function(){var t=i(this),e=t.data("bs.popover"),n="object"==typeof a&&a;(e||"destroy"!=a)&&(e||t.data("bs.popover",e=new o(this,n)),"string"==typeof a&&e[a]())})},i.fn.popover.Constructor=o,i.fn.popover.noConflict=function(){return i.fn.popover=t,this}}(jQuery),angular.module("ui.bootstrap",["ui.bootstrap.tpls","ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.bindHtml","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.position","ui.bootstrap.datepicker","ui.bootstrap.dropdown","ui.bootstrap.modal","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.transition","ui.bootstrap.typeahead"]),angular.module("ui.bootstrap.tpls",["template/accordion/accordion-group.html","template/accordion/accordion.html","template/alert/alert.html","template/carousel/carousel.html","template/carousel/slide.html","template/datepicker/datepicker.html","template/datepicker/day.html","template/datepicker/month.html","template/datepicker/popup.html","template/datepicker/year.html","template/modal/backdrop.html","template/modal/window.html","template/pagination/pager.html","template/pagination/pagination.html","template/tooltip/tooltip-html-popup.html","template/tooltip/tooltip-html-unsafe-popup.html","template/tooltip/tooltip-popup.html","template/tooltip/tooltip-template-popup.html","template/popover/popover-html.html","template/popover/popover-template.html","template/popover/popover.html","template/progressbar/bar.html","template/progressbar/progress.html","template/progressbar/progressbar.html","template/rating/rating.html","template/tabs/tab.html","template/tabs/tabset.html","template/timepicker/timepicker.html","template/typeahead/typeahead-match.html","template/typeahead/typeahead-popup.html"]),angular.module("ui.bootstrap.collapse",[]).directive("collapse",["$animate",function(o){return{link:function(t,e,n){function a(){e.removeClass("collapsing"),e.css({height:"auto"})}function i(){e.css({height:"0"}),e.removeClass("collapsing"),e.addClass("collapse")}t.$watch(n.collapse,function(t){t?function(){if(!e.hasClass("collapse")&&!e.hasClass("in"))return i();e.css({height:e[0].scrollHeight+"px"}).removeClass("collapse").addClass("collapsing").attr("aria-expanded",!1).attr("aria-hidden",!0),o.removeClass(e,"in",{to:{height:"0"}}).then(i)}():(e.removeClass("collapse").addClass("collapsing").attr("aria-expanded",!0).attr("aria-hidden",!1),o.addClass(e,"in",{to:{height:e[0].scrollHeight+"px"}}).then(a))})}}}]),angular.module("ui.bootstrap.accordion",["ui.bootstrap.collapse"]).constant("accordionConfig",{closeOthers:!0}).controller("AccordionController",["$scope","$attrs","accordionConfig",function(t,n,a){this.groups=[],this.closeOthers=function(e){(angular.isDefined(n.closeOthers)?t.$eval(n.closeOthers):a.closeOthers)&&angular.forEach(this.groups,function(t){t!==e&&(t.isOpen=!1)})},this.addGroup=function(e){var n=this;this.groups.push(e),e.$on("$destroy",function(t){n.removeGroup(e)})},this.removeGroup=function(t){var e=this.groups.indexOf(t);-1!==e&&this.groups.splice(e,1)}}]).directive("accordion",function(){return{restrict:"EA",controller:"AccordionController",controllerAs:"accordion",transclude:!0,replace:!1,templateUrl:function(t,e){return e.templateUrl||"template/accordion/accordion.html"}}}).directive("accordionGroup",function(){return{require:"^accordion",restrict:"EA",transclude:!0,replace:!0,templateUrl:function(t,e){return e.templateUrl||"template/accordion/accordion-group.html"},scope:{heading:"@",isOpen:"=?",isDisabled:"=?"},controller:function(){this.setHeading=function(t){this.heading=t}},link:function(e,n,t,a){a.addGroup(e),e.openClass=t.openClass||"panel-open",e.panelClass=t.panelClass,e.$watch("isOpen",function(t){n.toggleClass(e.openClass,t),t&&a.closeOthers(e)}),e.toggleOpen=function(t){e.isDisabled||t&&32!==t.which||(e.isOpen=!e.isOpen)}}}}).directive("accordionHeading",function(){return{restrict:"EA",transclude:!0,template:"",replace:!0,require:"^accordionGroup",link:function(t,e,n,a,i){a.setHeading(i(t,angular.noop))}}}).directive("accordionTransclude",function(){return{require:"^accordionGroup",link:function(t,e,n,a){t.$watch(function(){return a[n.accordionTransclude]},function(t){t&&(e.find("span").html(""),e.find("span").append(t))})}}}),angular.module("ui.bootstrap.alert",[]).controller("AlertController",["$scope","$attrs",function(t,e){t.closeable=!!e.close,this.close=t.close}]).directive("alert",function(){return{controller:"AlertController",controllerAs:"alert",templateUrl:function(t,e){return e.templateUrl||"template/alert/alert.html"},transclude:!0,replace:!0,scope:{type:"@",close:"&"}}}).directive("dismissOnTimeout",["$timeout",function(i){return{require:"alert",link:function(t,e,n,a){i(function(){a.close()},parseInt(n.dismissOnTimeout,10))}}}]),angular.module("ui.bootstrap.bindHtml",[]).value("$bindHtmlUnsafeSuppressDeprecated",!1).directive("bindHtmlUnsafe",["$log","$bindHtmlUnsafeSuppressDeprecated",function(a,i){return function(t,e,n){i||a.warn("bindHtmlUnsafe is now deprecated. Use ngBindHtml instead"),e.addClass("ng-binding").data("$binding",n.bindHtmlUnsafe),t.$watch(n.bindHtmlUnsafe,function(t){e.html(t||"")})}}]),angular.module("ui.bootstrap.buttons",[]).constant("buttonConfig",{activeClass:"active",toggleEvent:"click"}).controller("ButtonsController",["buttonConfig",function(t){this.activeClass=t.activeClass||"active",this.toggleEvent=t.toggleEvent||"click"}]).directive("btnRadio",function(){return{require:["btnRadio","ngModel"],controller:"ButtonsController",controllerAs:"buttons",link:function(e,n,a,t){var i=t[0],o=t[1];n.find("input").css({display:"none"}),o.$render=function(){n.toggleClass(i.activeClass,angular.equals(o.$modelValue,e.$eval(a.btnRadio)))},n.bind(i.toggleEvent,function(){if(!a.disabled){var t=n.hasClass(i.activeClass);t&&!angular.isDefined(a.uncheckable)||e.$apply(function(){o.$setViewValue(t?null:e.$eval(a.btnRadio)),o.$render()})}})}}}).directive("btnCheckbox",["$document",function(c){return{require:["btnCheckbox","ngModel"],controller:"ButtonsController",controllerAs:"button",link:function(a,e,n,t){var i=t[0],o=t[1];function r(){return l(n.btnCheckboxTrue,!0)}function s(){return l(n.btnCheckboxFalse,!1)}function l(t,e){var n=a.$eval(t);return angular.isDefined(n)?n:e}e.find("input").css({display:"none"}),o.$render=function(){e.toggleClass(i.activeClass,angular.equals(o.$modelValue,r()))},e.bind(i.toggleEvent,function(){n.disabled||a.$apply(function(){o.$setViewValue(e.hasClass(i.activeClass)?s():r()),o.$render()})}),e.on("keypress",function(t){n.disabled||32!==t.which||c[0].activeElement!==e[0]||a.$apply(function(){o.$setViewValue(e.hasClass(i.activeClass)?s():r()),o.$render()})})}}}]),angular.module("ui.bootstrap.carousel",[]).controller("CarouselController",["$scope","$element","$interval","$animate",function(a,e,n,i){var o,r,s=this,l=s.slides=a.slides=[],c=4<=angular.version.minor,u="uib-slideDirection",d=-1;s.currentSlide=null;var p=!1;function f(t){if(angular.isUndefined(l[t].index))return l[t];var e;l.length;for(e=0;e<l.length;++e)if(l[e].index==t)return l[e]}function m(){h();var t=+a.interval;!isNaN(t)&&0<t&&(o=n(g,t))}function h(){o&&(n.cancel(o),o=null)}function g(){var t=+a.interval;r&&!isNaN(t)&&0<t&&l.length?a.next():a.pause()}s.select=a.select=function(t,e){var n=a.indexOfSlide(t);void 0===e&&(e=n>s.getCurrentIndex()?"next":"prev"),t&&t!==s.currentSlide&&!a.$currentTransition&&function(t,e,n){if(p)return;angular.extend(t,{direction:n,active:!0}),angular.extend(s.currentSlide||{},{direction:n,active:!1}),i.enabled()&&!a.noTransition&&!a.$currentTransition&&t.$element&&1<s.slides.length&&(t.$element.data(u,t.direction),s.currentSlide&&s.currentSlide.$element&&s.currentSlide.$element.data(u,t.direction),a.$currentTransition=!0,c?i.on("addClass",t.$element,function(t,e){"close"===e&&(a.$currentTransition=null,i.off("addClass",t))}):t.$element.one("$animate:close",function(){a.$currentTransition=null}));s.currentSlide=t,d=e,m()}(t,n,e)},a.$on("$destroy",function(){p=!0}),s.getCurrentIndex=function(){return s.currentSlide&&angular.isDefined(s.currentSlide.index)?+s.currentSlide.index:d},a.indexOfSlide=function(t){return angular.isDefined(t.index)?+t.index:l.indexOf(t)},a.next=function(){var t=(s.getCurrentIndex()+1)%l.length;if(0!==t||!a.noWrap())return s.select(f(t),"next");a.pause()},a.prev=function(){var t=s.getCurrentIndex()-1<0?l.length-1:s.getCurrentIndex()-1;if(!a.noWrap()||t!==l.length-1)return s.select(f(t),"prev");a.pause()},a.isActive=function(t){return s.currentSlide===t},a.$watch("interval",m),a.$on("$destroy",h),a.play=function(){r||(r=!0,m())},a.pause=function(){a.noPause||(r=!1,h())},s.addSlide=function(t,e){t.$element=e,l.push(t),1===l.length||t.active?(s.select(l[l.length-1]),1==l.length&&a.play()):t.active=!1},s.removeSlide=function(t){angular.isDefined(t.index)&&l.sort(function(t,e){return+t.index>+e.index});var e=l.indexOf(t);l.splice(e,1),0<l.length&&t.active?e>=l.length?s.select(l[e-1]):s.select(l[e]):e<d&&d--,0===l.length&&(s.currentSlide=null)},a.$watch("noTransition",function(t){e.data("uib-noTransition",t)})}]).directive("carousel",[function(){return{restrict:"EA",transclude:!0,replace:!0,controller:"CarouselController",controllerAs:"carousel",require:"carousel",templateUrl:function(t,e){return e.templateUrl||"template/carousel/carousel.html"},scope:{interval:"=",noTransition:"=",noPause:"=",noWrap:"&"}}}]).directive("slide",function(){return{require:"^carousel",restrict:"EA",transclude:!0,replace:!0,templateUrl:function(t,e){return e.templateUrl||"template/carousel/slide.html"},scope:{active:"=?",actual:"=?",index:"=?"},link:function(e,t,n,a){a.addSlide(e,t),e.$on("$destroy",function(){a.removeSlide(e)}),e.$watch("active",function(t){t&&a.select(e)})}}}).animation(".item",["$injector","$animate",function(t,s){var l="uib-noTransition",c="uib-slideDirection",u=null;function d(t,e,n){t.removeClass(e),n&&n()}return t.has("$animateCss")&&(u=t.get("$animateCss")),{beforeAddClass:function(t,e,n){if("active"==e&&t.parent()&&!t.parent().data(l)){var a=!1,i=t.data(c),o="next"==i?"left":"right",r=d.bind(this,t,o+" "+i,n);return t.addClass(i),u?u(t,{addClass:o}).start().done(r):s.addClass(t,o).then(function(){a||r(),n()}),function(){a=!0}}n()},beforeRemoveClass:function(t,e,n){if("active"===e&&t.parent()&&!t.parent().data(l)){var a=!1,i="next"==t.data(c)?"left":"right",o=d.bind(this,t,i,n);return u?u(t,{addClass:i}).start().done(o):s.addClass(t,i).then(function(){a||o(),n()}),function(){a=!0}}n()}}}]),angular.module("ui.bootstrap.dateparser",[]).service("dateParser",["$log","$locale","orderByFilter",function(h,g,v){var b=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;this.parsers={};var y={yyyy:{regex:"\\d{4}",apply:function(t){this.year=+t}},yy:{regex:"\\d{2}",apply:function(t){this.year=+t+2e3}},y:{regex:"\\d{1,4}",apply:function(t){this.year=+t}},MMMM:{regex:g.DATETIME_FORMATS.MONTH.join("|"),apply:function(t){this.month=g.DATETIME_FORMATS.MONTH.indexOf(t)}},MMM:{regex:g.DATETIME_FORMATS.SHORTMONTH.join("|"),apply:function(t){this.month=g.DATETIME_FORMATS.SHORTMONTH.indexOf(t)}},MM:{regex:"0[1-9]|1[0-2]",apply:function(t){this.month=t-1}},M:{regex:"[1-9]|1[0-2]",apply:function(t){this.month=t-1}},dd:{regex:"[0-2][0-9]{1}|3[0-1]{1}",apply:function(t){this.date=+t}},d:{regex:"[1-2]?[0-9]{1}|3[0-1]{1}",apply:function(t){this.date=+t}},EEEE:{regex:g.DATETIME_FORMATS.DAY.join("|")},EEE:{regex:g.DATETIME_FORMATS.SHORTDAY.join("|")},HH:{regex:"(?:0|1)[0-9]|2[0-3]",apply:function(t){this.hours=+t}},hh:{regex:"0[0-9]|1[0-2]",apply:function(t){this.hours=+t}},H:{regex:"1?[0-9]|2[0-3]",apply:function(t){this.hours=+t}},h:{regex:"[0-9]|1[0-2]",apply:function(t){this.hours=+t}},mm:{regex:"[0-5][0-9]",apply:function(t){this.minutes=+t}},m:{regex:"[0-9]|[1-5][0-9]",apply:function(t){this.minutes=+t}},sss:{regex:"[0-9][0-9][0-9]",apply:function(t){this.milliseconds=+t}},ss:{regex:"[0-5][0-9]",apply:function(t){this.seconds=+t}},s:{regex:"[0-9]|[1-5][0-9]",apply:function(t){this.seconds=+t}},a:{regex:g.DATETIME_FORMATS.AMPMS.join("|"),apply:function(t){12===this.hours&&(this.hours=0),"PM"===t&&(this.hours+=12)}}};this.parse=function(t,e,n){if(!angular.isString(t)||!e)return t;var o,r,s;e=(e=g.DATETIME_FORMATS[e]||e).replace(b,"\\$&"),this.parsers[e]||(this.parsers[e]=(r=[],s=(o=e).split(""),angular.forEach(y,function(t,e){var n=o.indexOf(e);if(-1<n){o=o.split(""),s[n]="("+t.regex+")",o[n]="$";for(var a=n+1,i=n+e.length;a<i;a++)s[a]="",o[a]="$";o=o.join(""),r.push({index:n,apply:t.apply})}}),{regex:new RegExp("^"+s.join("")+"$"),map:v(r,"index")}));var a=this.parsers[e],i=a.regex,l=a.map,c=t.match(i);if(c&&c.length){var u,d;angular.isDate(n)&&!isNaN(n.getTime())?u={year:n.getFullYear(),month:n.getMonth(),date:n.getDate(),hours:n.getHours(),minutes:n.getMinutes(),seconds:n.getSeconds(),milliseconds:n.getMilliseconds()}:(n&&h.warn("dateparser:","baseDate is not a valid date"),u={year:1900,month:0,date:1,hours:0,minutes:0,seconds:0,milliseconds:0});for(var p=1,f=c.length;p<f;p++){var m=l[p-1];m.apply&&m.apply.call(u,c[p])}return function(t,e,n){if(n<1)return!1;if(1===e&&28<n)return 29===n&&(t%4==0&&t%100!=0||t%400==0);if(3===e||5===e||8===e||10===e)return n<31;return!0}(u.year,u.month,u.date)&&(d=new Date(u.year,u.month,u.date,u.hours,u.minutes,u.seconds,u.milliseconds||0)),d}}}]),angular.module("ui.bootstrap.position",[]).factory("$position",["$document","$window",function(o,a){function r(t){return"static"===(n="position",((e=t).currentStyle?e.currentStyle[n]:a.getComputedStyle?a.getComputedStyle(e)[n]:e.style[n])||"static");var e,n}return{position:function(t){var e=this.offset(t),n={top:0,left:0},a=function(t){for(var e=o[0],n=t.offsetParent||e;n&&n!==e&&r(n);)n=n.offsetParent;return n||e}(t[0]);a!=o[0]&&((n=this.offset(angular.element(a))).top+=a.clientTop-a.scrollTop,n.left+=a.clientLeft-a.scrollLeft);var i=t[0].getBoundingClientRect();return{width:i.width||t.prop("offsetWidth"),height:i.height||t.prop("offsetHeight"),top:e.top-n.top,left:e.left-n.left}},offset:function(t){var e=t[0].getBoundingClientRect();return{width:e.width||t.prop("offsetWidth"),height:e.height||t.prop("offsetHeight"),top:e.top+(a.pageYOffset||o[0].documentElement.scrollTop),left:e.left+(a.pageXOffset||o[0].documentElement.scrollLeft)}},positionElements:function(t,e,n,a){var i,o,r,s,l=n.split("-"),c=l[0],u=l[1]||"center";i=a?this.offset(t):this.position(t),o=e.prop("offsetWidth"),r=e.prop("offsetHeight");var d={center:function(){return i.left+i.width/2-o/2},left:function(){return i.left},right:function(){return i.left+i.width}},p={center:function(){return i.top+i.height/2-r/2},top:function(){return i.top},bottom:function(){return i.top+i.height}};switch(c){case"right":s={top:p[u](),left:d[c]()};break;case"left":s={top:p[u](),left:i.left-o};break;case"bottom":s={top:p[c](),left:d[u]()};break;default:s={top:i.top-r,left:d[u]()}}return s}}}]),angular.module("ui.bootstrap.datepicker",["ui.bootstrap.dateparser","ui.bootstrap.position"]).value("$datepickerSuppressError",!1).constant("datepickerConfig",{formatDay:"dd",formatMonth:"MMMM",formatYear:"yyyy",formatDayHeader:"EEE",formatDayTitle:"MMMM yyyy",formatMonthTitle:"yyyy",datepickerMode:"day",minMode:"day",maxMode:"year",showWeeks:!0,startingDay:0,yearRange:20,minDate:null,maxDate:null,shortcutPropagation:!1}).controller("DatepickerController",["$scope","$attrs","$parse","$interpolate","$log","dateFilter","datepickerConfig","$datepickerSuppressError",function(n,a,t,i,e,o,r,s){var l=this,c={$setViewValue:angular.noop};this.modes=["day","month","year"],angular.forEach(["formatDay","formatMonth","formatYear","formatDayHeader","formatDayTitle","formatMonthTitle","showWeeks","startingDay","yearRange","shortcutPropagation"],function(t,e){l[t]=angular.isDefined(a[t])?e<6?i(a[t])(n.$parent):n.$parent.$eval(a[t]):r[t]}),angular.forEach(["minDate","maxDate"],function(e){a[e]?n.$parent.$watch(t(a[e]),function(t){l[e]=t?new Date(t):null,l.refreshView()}):l[e]=r[e]?new Date(r[e]):null}),angular.forEach(["minMode","maxMode"],function(e){a[e]?n.$parent.$watch(t(a[e]),function(t){l[e]=angular.isDefined(t)?t:a[e],n[e]=l[e],("minMode"==e&&l.modes.indexOf(n.datepickerMode)<l.modes.indexOf(l[e])||"maxMode"==e&&l.modes.indexOf(n.datepickerMode)>l.modes.indexOf(l[e]))&&(n.datepickerMode=l[e])}):(l[e]=r[e]||null,n[e]=l[e])}),n.datepickerMode=n.datepickerMode||r.datepickerMode,n.uniqueId="datepicker-"+n.$id+"-"+Math.floor(1e4*Math.random()),angular.isDefined(a.initDate)?(this.activeDate=n.$parent.$eval(a.initDate)||new Date,n.$parent.$watch(a.initDate,function(t){t&&(c.$isEmpty(c.$modelValue)||c.$invalid)&&(l.activeDate=t,l.refreshView())})):this.activeDate=new Date,n.isActive=function(t){return 0===l.compare(t.date,l.activeDate)&&(n.activeDateId=t.uid,!0)},this.init=function(t){(c=t).$render=function(){l.render()}},this.render=function(){if(c.$viewValue){var t=new Date(c.$viewValue);!isNaN(t)?this.activeDate=t:s||e.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')}this.refreshView()},this.refreshView=function(){if(this.element){this._refreshView();var t=c.$viewValue?new Date(c.$viewValue):null;c.$setValidity("dateDisabled",!t||this.element&&!this.isDisabled(t))}},this.createDateObject=function(t,e){var n=c.$viewValue?new Date(c.$viewValue):null;return{date:t,label:o(t,e),selected:n&&0===this.compare(t,n),disabled:this.isDisabled(t),current:0===this.compare(t,new Date),customClass:this.customClass(t)}},this.isDisabled=function(t){return this.minDate&&this.compare(t,this.minDate)<0||this.maxDate&&0<this.compare(t,this.maxDate)||a.dateDisabled&&n.dateDisabled({date:t,mode:n.datepickerMode})},this.customClass=function(t){return n.customClass({date:t,mode:n.datepickerMode})},this.split=function(t,e){for(var n=[];0<t.length;)n.push(t.splice(0,e));return n},this.fixTimeZone=function(t){var e=t.getHours();t.setHours(23===e?e+2:0)},n.select=function(t){if(n.datepickerMode===l.minMode){var e=c.$viewValue?new Date(c.$viewValue):new Date(0,0,0,0,0,0,0);e.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),c.$setViewValue(e),c.$render()}else l.activeDate=t,n.datepickerMode=l.modes[l.modes.indexOf(n.datepickerMode)-1]},n.move=function(t){var e=l.activeDate.getFullYear()+t*(l.step.years||0),n=l.activeDate.getMonth()+t*(l.step.months||0);l.activeDate.setFullYear(e,n,1),l.refreshView()},n.toggleMode=function(t){t=t||1,n.datepickerMode===l.maxMode&&1===t||n.datepickerMode===l.minMode&&-1===t||(n.datepickerMode=l.modes[l.modes.indexOf(n.datepickerMode)+t])},n.keys={13:"enter",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down"};var u=function(){l.element[0].focus()};n.$on("datepicker.focus",u),n.keydown=function(t){var e=n.keys[t.which];if(e&&!t.shiftKey&&!t.altKey)if(t.preventDefault(),l.shortcutPropagation||t.stopPropagation(),"enter"===e||"space"===e){if(l.isDisabled(l.activeDate))return;n.select(l.activeDate),u()}else!t.ctrlKey||"up"!==e&&"down"!==e?(l.handleKeyDown(e,t),l.refreshView()):(n.toggleMode("up"===e?1:-1),u())}}]).directive("datepicker",function(){return{restrict:"EA",replace:!0,templateUrl:function(t,e){return e.templateUrl||"template/datepicker/datepicker.html"},scope:{datepickerMode:"=?",dateDisabled:"&",customClass:"&",shortcutPropagation:"&?"},require:["datepicker","^ngModel"],controller:"DatepickerController",controllerAs:"datepicker",link:function(t,e,n,a){var i=a[0],o=a[1];i.init(o)}}}).directive("daypicker",["dateFilter",function(h){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/day.html",require:"^datepicker",link:function(p,t,e,f){p.showWeeks=f.showWeeks,f.step={months:1},f.element=t;var n=[31,28,31,30,31,30,31,31,30,31,30,31];function i(t,e){return 1!==e||t%4!=0||t%100==0&&t%400!=0?n[e]:29}function m(t){var e=new Date(t);e.setDate(e.getDate()+4-(e.getDay()||7));var n=e.getTime();return e.setMonth(0),e.setDate(1),Math.floor(Math.round((n-e)/864e5)/7)+1}f._refreshView=function(){var t=f.activeDate.getFullYear(),e=f.activeDate.getMonth(),n=new Date(t,e,1),a=f.startingDay-n.getDay(),i=0<a?7-a:-a,o=new Date(n);0<i&&o.setDate(1-i);for(var r=function(t,e){for(var n,a=new Array(e),i=new Date(t),o=0;o<e;)n=new Date(i),f.fixTimeZone(n),a[o++]=n,i.setDate(i.getDate()+1);return a}(o,42),s=0;s<42;s++)r[s]=angular.extend(f.createDateObject(r[s],f.formatDay),{secondary:r[s].getMonth()!==e,uid:p.uniqueId+"-"+s});p.labels=new Array(7);for(var l=0;l<7;l++)p.labels[l]={abbr:h(r[l].date,f.formatDayHeader),full:h(r[l].date,"EEEE")};if(p.title=h(f.activeDate,f.formatDayTitle),p.rows=f.split(r,7),p.showWeeks){p.weekNumbers=[];for(var c=(11-f.startingDay)%7,u=p.rows.length,d=0;d<u;d++)p.weekNumbers.push(m(p.rows[d][c].date))}},f.compare=function(t,e){return new Date(t.getFullYear(),t.getMonth(),t.getDate())-new Date(e.getFullYear(),e.getMonth(),e.getDate())},f.handleKeyDown=function(t,e){var n=f.activeDate.getDate();if("left"===t)n-=1;else if("up"===t)n-=7;else if("right"===t)n+=1;else if("down"===t)n+=7;else if("pageup"===t||"pagedown"===t){var a=f.activeDate.getMonth()+("pageup"===t?-1:1);f.activeDate.setMonth(a,1),n=Math.min(i(f.activeDate.getFullYear(),f.activeDate.getMonth()),n)}else"home"===t?n=1:"end"===t&&(n=i(f.activeDate.getFullYear(),f.activeDate.getMonth()));f.activeDate.setDate(n)},f.refreshView()}}}]).directive("monthpicker",["dateFilter",function(r){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/month.html",require:"^datepicker",link:function(i,t,e,o){o.step={years:1},o.element=t,o._refreshView=function(){for(var t,e=new Array(12),n=o.activeDate.getFullYear(),a=0;a<12;a++)t=new Date(n,a,1),o.fixTimeZone(t),e[a]=angular.extend(o.createDateObject(t,o.formatMonth),{uid:i.uniqueId+"-"+a});i.title=r(o.activeDate,o.formatMonthTitle),i.rows=o.split(e,3)},o.compare=function(t,e){return new Date(t.getFullYear(),t.getMonth())-new Date(e.getFullYear(),e.getMonth())},o.handleKeyDown=function(t,e){var n=o.activeDate.getMonth();if("left"===t)n-=1;else if("up"===t)n-=3;else if("right"===t)n+=1;else if("down"===t)n+=3;else if("pageup"===t||"pagedown"===t){var a=o.activeDate.getFullYear()+("pageup"===t?-1:1);o.activeDate.setFullYear(a)}else"home"===t?n=0:"end"===t&&(n=11);o.activeDate.setMonth(n)},o.refreshView()}}}]).directive("yearpicker",["dateFilter",function(t){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/year.html",require:"^datepicker",link:function(i,t,e,o){var r=o.yearRange;function s(t){return parseInt((t-1)/r,10)*r+1}o.step={years:r},o.element=t,o._refreshView=function(){for(var t,e=new Array(r),n=0,a=s(o.activeDate.getFullYear());n<r;n++)t=new Date(a+n,0,1),o.fixTimeZone(t),e[n]=angular.extend(o.createDateObject(t,o.formatYear),{uid:i.uniqueId+"-"+n});i.title=[e[0].label,e[r-1].label].join(" - "),i.rows=o.split(e,5)},o.compare=function(t,e){return t.getFullYear()-e.getFullYear()},o.handleKeyDown=function(t,e){var n=o.activeDate.getFullYear();"left"===t?n-=1:"up"===t?n-=5:"right"===t?n+=1:"down"===t?n+=5:"pageup"===t||"pagedown"===t?n+=("pageup"===t?-1:1)*o.step.years:"home"===t?n=s(o.activeDate.getFullYear()):"end"===t&&(n=s(o.activeDate.getFullYear())+r-1),o.activeDate.setFullYear(n)},o.refreshView()}}}]).constant("datepickerPopupConfig",{datepickerPopup:"yyyy-MM-dd",datepickerPopupTemplateUrl:"template/datepicker/popup.html",datepickerTemplateUrl:"template/datepicker/datepicker.html",html5Types:{date:"yyyy-MM-dd","datetime-local":"yyyy-MM-ddTHH:mm:ss.sss",month:"yyyy-MM"},currentText:"Today",clearText:"Clear",closeText:"Done",closeOnDateSelection:!0,appendToBody:!1,showButtonBar:!0,onOpenFocus:!0}).directive("datepickerPopup",["$compile","$parse","$document","$rootScope","$position","dateFilter","dateParser","datepickerPopupConfig","$timeout",function(y,$,w,x,k,C,D,T,S){return{restrict:"EA",require:"ngModel",scope:{isOpen:"=?",currentText:"@",clearText:"@",closeText:"@",dateDisabled:"&",customClass:"&"},link:function(a,n,i,o){var r,s=angular.isDefined(i.closeOnDateSelection)?a.$parent.$eval(i.closeOnDateSelection):T.closeOnDateSelection,e=angular.isDefined(i.datepickerAppendToBody)?a.$parent.$eval(i.datepickerAppendToBody):T.appendToBody,l=angular.isDefined(i.onOpenFocus)?a.$parent.$eval(i.onOpenFocus):T.onOpenFocus,t=angular.isDefined(i.datepickerPopupTemplateUrl)?i.datepickerPopupTemplateUrl:T.datepickerPopupTemplateUrl,c=angular.isDefined(i.datepickerTemplateUrl)?i.datepickerTemplateUrl:T.datepickerTemplateUrl,u={};a.showButtonBar=angular.isDefined(i.showButtonBar)?a.$parent.$eval(i.showButtonBar):T.showButtonBar,a.getText=function(t){return a[t+"Text"]||T[t+"Text"]},a.isDisabled=function(t){return"today"===t&&(t=new Date),a.watchData.minDate&&a.compare(t,u.minDate)<0||a.watchData.maxDate&&0<a.compare(t,u.maxDate)};var d=!(a.compare=function(t,e){return new Date(t.getFullYear(),t.getMonth(),t.getDate())-new Date(e.getFullYear(),e.getMonth(),e.getDate())});if(T.html5Types[i.type]?(r=T.html5Types[i.type],d=!0):(r=i.datepickerPopup||T.datepickerPopup,i.$observe("datepickerPopup",function(t,e){var n=t||T.datepickerPopup;if(n!==r&&(r=n,o.$modelValue=null,!r))throw new Error("datepickerPopup must have a date format specified.")})),!r)throw new Error("datepickerPopup must have a date format specified.");if(d&&i.datepickerPopup)throw new Error("HTML5 date input types do not support custom formats.");var p=angular.element("<div datepicker-popup-wrap><div datepicker></div></div>");function f(t){return t.replace(/([A-Z])/g,function(t){return"-"+t.toLowerCase()})}p.attr({"ng-model":"date","ng-change":"dateSelection(date)","template-url":t});var m=angular.element(p.children()[0]);if(m.attr("template-url",c),d&&"month"===i.type&&(m.attr("datepicker-mode",'"month"'),m.attr("min-mode","month")),i.datepickerOptions){var h=a.$parent.$eval(i.datepickerOptions);h&&h.initDate&&(a.initDate=h.initDate,m.attr("init-date","initDate"),delete h.initDate),angular.forEach(h,function(t,e){m.attr(f(e),t)})}a.watchData={},angular.forEach(["minMode","maxMode","minDate","maxDate","datepickerMode","initDate","shortcutPropagation"],function(e){if(i[e]){var t=$(i[e]);if(a.$parent.$watch(t,function(t){a.watchData[e]=t,"minDate"!==e&&"maxDate"!==e||(u[e]=new Date(t))}),m.attr(f(e),"watchData."+e),"datepickerMode"===e){var n=t.assign;a.$watch("watchData."+e,function(t,e){angular.isFunction(n)&&t!==e&&n(a.$parent,t)})}}}),i.dateDisabled&&m.attr("date-disabled","dateDisabled({ date: date, mode: mode })"),i.showWeeks&&m.attr("show-weeks",i.showWeeks),i.customClass&&m.attr("custom-class","customClass({ date: date, mode: mode })"),d?o.$formatters.push(function(t){return a.date=t}):(o.$$parserName="date",o.$validators.date=function(t,e){var n=t||e;if(!i.ngRequired&&!n)return!0;if(angular.isNumber(n)&&(n=new Date(n)),n){if(angular.isDate(n)&&!isNaN(n))return!0;if(angular.isString(n)){var a=D.parse(n,r);return!isNaN(a)}return!1}return!0},o.$parsers.unshift(function(t){if(angular.isNumber(t)&&(t=new Date(t)),!t)return null;if(angular.isDate(t)&&!isNaN(t))return t;if(angular.isString(t)){var e=D.parse(t,r,a.date);return isNaN(e)?void 0:e}}),o.$formatters.push(function(t){return a.date=t,o.$isEmpty(t)?t:C(t,r)})),a.dateSelection=function(t){angular.isDefined(t)&&(a.date=t);var e=a.date?C(a.date,r):null;n.val(e),o.$setViewValue(e),s&&(a.isOpen=!1,n[0].focus())},o.$viewChangeListeners.push(function(){a.date=D.parse(o.$viewValue,r,a.date)});var g=function(t){!a.isOpen||n[0].contains(t.target)||p[0].contains(t.target)||a.$apply(function(){a.isOpen=!1})},v=function(t){27===t.which&&a.isOpen?(t.preventDefault(),t.stopPropagation(),a.$apply(function(){a.isOpen=!1}),n[0].focus()):40!==t.which||a.isOpen||(t.preventDefault(),t.stopPropagation(),a.$apply(function(){a.isOpen=!0}))};n.bind("keydown",v),a.keydown=function(t){27===t.which&&(a.isOpen=!1,n[0].focus())},a.$watch("isOpen",function(t){t?(a.position=e?k.offset(n):k.position(n),a.position.top=a.position.top+n.prop("offsetHeight"),S(function(){l&&a.$broadcast("datepicker.focus"),w.bind("click",g)},0,!1)):w.unbind("click",g)}),a.select=function(t){if("today"===t){var e=new Date;angular.isDate(a.date)?(t=new Date(a.date)).setFullYear(e.getFullYear(),e.getMonth(),e.getDate()):t=new Date(e.setHours(0,0,0,0))}a.dateSelection(t)},a.close=function(){a.isOpen=!1,n[0].focus()};var b=y(p)(a);p.remove(),e?w.find("body").append(b):n.after(b),a.$on("$destroy",function(){!0===a.isOpen&&(x.$$phase||a.$apply(function(){a.isOpen=!1})),b.remove(),n.unbind("keydown",v),w.unbind("click",g)})}}}]).directive("datepickerPopupWrap",function(){return{restrict:"EA",replace:!0,transclude:!0,templateUrl:function(t,e){return e.templateUrl||"template/datepicker/popup.html"}}}),angular.module("ui.bootstrap.dropdown",["ui.bootstrap.position"]).constant("dropdownConfig",{openClass:"open"}).service("dropdownService",["$document","$rootScope",function(e,a){var i=null;this.open=function(t){i||(e.bind("click",n),e.bind("keydown",o)),i&&i!==t&&(i.isOpen=!1),i=t},this.close=function(t){i===t&&(i=null,e.unbind("click",n),e.unbind("keydown",o))};var n=function(t){if(i&&(!t||"disabled"!==i.getAutoClose())){var e=i.getToggleElement();if(!(t&&e&&e[0].contains(t.target))){var n=i.getDropdownElement();t&&"outsideClick"===i.getAutoClose()&&n&&n[0].contains(t.target)||(i.isOpen=!1,a.$$phase||i.$apply())}}},o=function(t){27===t.which?(i.focusToggleElement(),n()):i.isKeynavEnabled()&&/(38|40)/.test(t.which)&&i.isOpen&&(t.preventDefault(),t.stopPropagation(),i.focusDropdownEntry(t.which))}}]).controller("DropdownController",["$scope","$attrs","$parse","dropdownConfig","dropdownService","$animate","$position","$document","$compile","$templateRequest",function(r,e,n,t,s,l,c,a,u,d){var p,i,f=this,m=r.$new(),h=t.openClass,g=angular.noop,v=e.onToggle?n(e.onToggle):angular.noop,b=!1,o=!1,y=a.find("body");this.init=function(t){f.$element=t,e.isOpen&&(i=n(e.isOpen),g=i.assign,r.$watch(i,function(t){m.isOpen=!!t})),b=angular.isDefined(e.dropdownAppendToBody),o=angular.isDefined(e.keyboardNav),b&&f.dropdownMenu&&(y.append(f.dropdownMenu),y.addClass("dropdown"),t.on("$destroy",function(){f.dropdownMenu.remove()}))},this.toggle=function(t){return m.isOpen=arguments.length?!!t:!m.isOpen},this.isOpen=function(){return m.isOpen},m.getToggleElement=function(){return f.toggleElement},m.getAutoClose=function(){return e.autoClose||"always"},m.getElement=function(){return f.$element},m.isKeynavEnabled=function(){return o},m.focusDropdownEntry=function(t){var e=f.dropdownMenu?angular.element(f.dropdownMenu).find("a"):angular.element(f.$element).find("ul").eq(0).find("a");switch(t){case 40:angular.isNumber(f.selectedOption)?f.selectedOption=f.selectedOption===e.length-1?f.selectedOption:f.selectedOption+1:f.selectedOption=0;break;case 38:angular.isNumber(f.selectedOption)?f.selectedOption=0===f.selectedOption?0:f.selectedOption-1:f.selectedOption=e.length-1}e[f.selectedOption].focus()},m.getDropdownElement=function(){return f.dropdownMenu},m.focusToggleElement=function(){f.toggleElement&&f.toggleElement[0].focus()},m.$watch("isOpen",function(t,e){if(b&&f.dropdownMenu){var n=c.positionElements(f.$element,f.dropdownMenu,"bottom-left",!0),a={top:n.top+"px",display:t?"block":"none"};f.dropdownMenu.hasClass("dropdown-menu-right")?(a.left="auto",a.right=window.innerWidth-(n.left+f.$element.prop("offsetWidth"))+"px"):(a.left=n.left+"px",a.right="auto"),f.dropdownMenu.css(a)}var i=b?y:f.$element;if(l[t?"addClass":"removeClass"](i,h).then(function(){angular.isDefined(t)&&t!==e&&v(r,{open:!!t})}),t)f.dropdownMenuTemplateUrl&&d(f.dropdownMenuTemplateUrl).then(function(t){p=m.$new(),u(t.trim())(p,function(t){var e=t;f.dropdownMenu.replaceWith(e),f.dropdownMenu=e})}),m.focusToggleElement(),s.open(m);else{if(f.dropdownMenuTemplateUrl){p&&p.$destroy();var o=angular.element('<ul class="dropdown-menu"></ul>');f.dropdownMenu.replaceWith(o),f.dropdownMenu=o}s.close(m),f.selectedOption=null}angular.isFunction(g)&&g(r,t)}),r.$on("$locationChangeSuccess",function(){"disabled"!==m.getAutoClose()&&(m.isOpen=!1)});var $=r.$on("$destroy",function(){m.$destroy()});m.$on("$destroy",$)}]).directive("dropdown",function(){return{controller:"DropdownController",link:function(t,e,n,a){a.init(e),e.addClass("dropdown")}}}).directive("dropdownMenu",function(){return{restrict:"AC",require:"?^dropdown",link:function(t,e,n,a){if(a){var i=n.templateUrl;i&&(a.dropdownMenuTemplateUrl=i),a.dropdownMenu||(a.dropdownMenu=e)}}}}).directive("keyboardNav",function(){return{restrict:"A",require:"?^dropdown",link:function(t,e,n,a){e.bind("keydown",function(t){if(-1!==[38,40].indexOf(t.which)){t.preventDefault(),t.stopPropagation();var e=a.dropdownMenu.find("a");switch(t.which){case 40:angular.isNumber(a.selectedOption)?a.selectedOption=a.selectedOption===e.length-1?a.selectedOption:a.selectedOption+1:a.selectedOption=0;break;case 38:angular.isNumber(a.selectedOption)?a.selectedOption=0===a.selectedOption?0:a.selectedOption-1:a.selectedOption=e.length-1}e[a.selectedOption].focus()}})}}}).directive("dropdownToggle",function(){return{require:"?^dropdown",link:function(e,n,a,i){if(i){n.addClass("dropdown-toggle"),i.toggleElement=n;var t=function(t){t.preventDefault(),n.hasClass("disabled")||a.disabled||e.$apply(function(){i.toggle()})};n.bind("click",t),n.attr({"aria-haspopup":!0,"aria-expanded":!1}),e.$watch(i.isOpen,function(t){n.attr("aria-expanded",!!t)}),e.$on("$destroy",function(){n.unbind("click",t)})}}}}),angular.module("ui.bootstrap.modal",[]).factory("$$stackedMap",function(){return{createNew:function(){var a=[];return{add:function(t,e){a.push({key:t,value:e})},get:function(t){for(var e=0;e<a.length;e++)if(t==a[e].key)return a[e]},keys:function(){for(var t=[],e=0;e<a.length;e++)t.push(a[e].key);return t},top:function(){return a[a.length-1]},remove:function(t){for(var e=-1,n=0;n<a.length;n++)if(t==a[n].key){e=n;break}return a.splice(e,1)[0]},removeTop:function(){return a.splice(a.length-1,1)[0]},length:function(){return a.length}}}}}).factory("$$multiMap",function(){return{createNew:function(){var i={};return{entries:function(){return Object.keys(i).map(function(t){return{key:t,value:i[t]}})},get:function(t){return i[t]},hasKey:function(t){return!!i[t]},keys:function(){return Object.keys(i)},put:function(t,e){i[t]||(i[t]=[]),i[t].push(e)},remove:function(t,e){var n=i[t];if(n){var a=n.indexOf(e);-1!==a&&n.splice(a,1),n.length||delete i[t]}}}}}}).directive("modalBackdrop",["$animate","$injector","$modalStack",function(o,t,e){var r=null;return t.has("$animateCss")&&(r=t.get("$animateCss")),{restrict:"EA",replace:!0,templateUrl:"template/modal/backdrop.html",compile:function(t,e){return t.addClass(e.backdropClass),n}};function n(t,a,i){i.modalInClass&&(r?r(a,{addClass:i.modalInClass}).start():o.addClass(a,i.modalInClass),t.$on(e.NOW_CLOSING_EVENT,function(t,e){var n=e();r?r(a,{removeClass:i.modalInClass}).start().then(n):o.removeClass(a,i.modalInClass).then(n)}))}}]).directive("modalWindow",["$modalStack","$q","$animate","$injector",function(o,r,s,t){var l=null;return t.has("$animateCss")&&(l=t.get("$animateCss")),{restrict:"EA",scope:{index:"@"},replace:!0,transclude:!0,templateUrl:function(t,e){return e.templateUrl||"template/modal/window.html"},link:function(n,a,i){a.addClass(i.windowClass||""),n.size=i.size,n.close=function(t){var e=o.getTop();e&&e.value.backdrop&&"static"!==e.value.backdrop&&t.target===t.currentTarget&&(t.preventDefault(),t.stopPropagation(),o.dismiss(e.key,"backdrop click"))},n.$isRendered=!0;var e=r.defer();i.$observe("modalRender",function(t){"true"==t&&e.resolve()}),e.promise.then(function(){var t=null;i.modalInClass&&(t=l?l(a,{addClass:i.modalInClass}).start():s.addClass(a,i.modalInClass),n.$on(o.NOW_CLOSING_EVENT,function(t,e){var n=e();l?l(a,{removeClass:i.modalInClass}).start().then(n):s.removeClass(a,i.modalInClass).then(n)})),r.when(t).then(function(){var t=a[0].querySelectorAll("[autofocus]");t.length?t[0].focus():a[0].focus()});var e=o.getTop();e&&o.modalRendered(e.key)})}}}]).directive("modalAnimationClass",[function(){return{compile:function(t,e){e.modalAnimation&&t.addClass(e.modalAnimationClass)}}}]).directive("modalTransclude",function(){return{link:function(t,e,n,a,i){i(t.$parent,function(t){e.empty(),e.append(t)})}}}).factory("$modalStack",["$animate","$timeout","$document","$compile","$rootScope","$q","$injector","$$multiMap","$$stackedMap",function(o,t,c,u,d,r,e,n,a){var s=null;e.has("$animateCss")&&(s=e.get("$animateCss"));var p,f,i,m="modal-open",h=a.createNew(),g=n.createNew(),v={NOW_CLOSING_EVENT:"modal.stack.now-closing"};function b(){for(var t=-1,e=h.keys(),n=0;n<e.length;n++)h.get(e[n]).value.backdrop&&(t=n);return t}function l(e,t){var n=c.find("body").eq(0),a=h.get(e).value;h.remove(e),y(a.modalDomEl,a.modalScope,function(){var t=a.openedClass||m;g.remove(t,e),n.toggleClass(t,g.hasKey(t))}),function(){if(p&&-1==b()){y(p,f,function(){null}),f=p=void 0}}(),t&&t.focus?t.focus():n.focus()}function y(e,n,a){var t,i=null;return n.$broadcast(v.NOW_CLOSING_EVENT,function(){return t||(t=r.defer(),i=t.promise),function(){t.resolve()}}),r.when(i).then(function t(){if(t.done)return;t.done=!0;s?s(e,{event:"leave"}).start().then(function(){e.remove()}):o.leave(e);n.$destroy();a&&a()})}function $(t,e,n){return!t.value.modalScope.$broadcast("modal.closing",e,n).defaultPrevented}return d.$watch(b,function(t){f&&(f.index=t)}),c.bind("keydown",function(t){if(t.isDefaultPrevented())return t;var e=h.top();if(e&&e.value.keyboard)switch(t.which){case 27:t.preventDefault(),d.$apply(function(){v.dismiss(e.key,"escape key press")});break;case 9:v.loadFocusElementList(e);var n=!1;t.shiftKey?v.isFocusInFirstItem(t)&&(n=v.focusLastFocusableElement()):v.isFocusInLastItem(t)&&(n=v.focusFirstFocusableElement()),n&&(t.preventDefault(),t.stopPropagation())}}),v.open=function(t,e){var n=c[0].activeElement,a=e.openedClass||m;h.add(t,{deferred:e.deferred,renderDeferred:e.renderDeferred,modalScope:e.scope,backdrop:e.backdrop,keyboard:e.keyboard,openedClass:e.openedClass}),g.put(a,t);var i=c.find("body").eq(0),o=b();if(0<=o&&!p){(f=d.$new(!0)).index=o;var r=angular.element('<div modal-backdrop="modal-backdrop"></div>');r.attr("backdrop-class",e.backdropClass),e.animation&&r.attr("modal-animation","true"),p=u(r)(f),i.append(p)}var s=angular.element('<div modal-window="modal-window"></div>');s.attr({"template-url":e.windowTemplateUrl,"window-class":e.windowClass,size:e.size,index:h.length()-1,animate:"animate"}).html(e.content),e.animation&&s.attr("modal-animation","true");var l=u(s)(e.scope);h.top().value.modalDomEl=l,h.top().value.modalOpener=n,i.append(l),i.addClass(a),v.clearFocusListCache()},v.close=function(t,e){var n=h.get(t);return n&&$(n,e,!0)?(n.value.modalScope.$$uibDestructionScheduled=!0,n.value.deferred.resolve(e),l(t,n.value.modalOpener),!0):!n},v.dismiss=function(t,e){var n=h.get(t);return n&&$(n,e,!1)?(n.value.modalScope.$$uibDestructionScheduled=!0,n.value.deferred.reject(e),l(t,n.value.modalOpener),!0):!n},v.dismissAll=function(t){for(var e=this.getTop();e&&this.dismiss(e.key,t);)e=this.getTop()},v.getTop=function(){return h.top()},v.modalRendered=function(t){var e=h.get(t);e&&e.value.renderDeferred.resolve()},v.focusFirstFocusableElement=function(){return 0<i.length&&(i[0].focus(),!0)},v.focusLastFocusableElement=function(){return 0<i.length&&(i[i.length-1].focus(),!0)},v.isFocusInFirstItem=function(t){return 0<i.length&&(t.target||t.srcElement)==i[0]},v.isFocusInLastItem=function(t){return 0<i.length&&(t.target||t.srcElement)==i[i.length-1]},v.clearFocusListCache=function(){i=[],0},v.loadFocusElementList=function(t){if((void 0===i||!i.length0)&&t){var e=t.value.modalDomEl;e&&e.length&&(i=e[0].querySelectorAll("a[href], area[href], input:not([disabled]), button:not([disabled]),select:not([disabled]), textarea:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable=true]"))}},v}]).provider("$modal",function(){var v={options:{animation:!0,backdrop:!0,keyboard:!0},$get:["$injector","$rootScope","$q","$templateRequest","$controller","$modalStack",function(u,d,p,f,m,h){var t={};var g=null;return t.getPromiseChain=function(){return g},t.open=function(o){var r=p.defer(),s=p.defer(),l=p.defer(),c={result:r.promise,opened:s.promise,rendered:l.promise,close:function(t){return h.close(c,t)},dismiss:function(t){return h.dismiss(c,t)}};if((o=angular.extend({},v.options,o)).resolve=o.resolve||{},!o.template&&!o.templateUrl)throw new Error("One of template or templateUrl options is required.");var t,e,n,a,i=p.all([(n=o,n.template?p.when(n.template):f(angular.isFunction(n.templateUrl)?n.templateUrl():n.templateUrl))].concat((t=o.resolve,e=[],angular.forEach(t,function(t){angular.isFunction(t)||angular.isArray(t)?e.push(p.when(u.invoke(t))):angular.isString(t)?e.push(p.when(u.get(t))):e.push(p.when(t))}),e)));return a=g=p.all([g]).then(function(){return i},function(){return i}).then(function(n){var t=(o.scope||d).$new();t.$close=c.close,t.$dismiss=c.dismiss,t.$on("$destroy",function(){t.$$uibDestructionScheduled||t.$dismiss("$uibUnscheduledDestruction")});var e,a={},i=1;o.controller&&(a.$scope=t,a.$modalInstance=c,angular.forEach(o.resolve,function(t,e){a[e]=n[i++]}),e=m(o.controller,a),o.controllerAs&&(o.bindToController&&angular.extend(e,t),t[o.controllerAs]=e)),h.open(c,{scope:t,deferred:r,renderDeferred:l,content:n[0],animation:o.animation,backdrop:o.backdrop,keyboard:o.keyboard,backdropClass:o.backdropClass,windowClass:o.windowClass,windowTemplateUrl:o.windowTemplateUrl,size:o.size,openedClass:o.openedClass}),s.resolve(!0)},function(t){s.reject(t),r.reject(t)}).finally(function(){g===a&&(g=null)}),c},t}]};return v}),angular.module("ui.bootstrap.pagination",[]).controller("PaginationController",["$scope","$attrs","$parse",function(n,a,i){var o=this,r={$setViewValue:angular.noop},s=a.numPages?i(a.numPages).assign:angular.noop;this.init=function(t,e){r=t,this.config=e,r.$render=function(){o.render()},a.itemsPerPage?n.$parent.$watch(i(a.itemsPerPage),function(t){o.itemsPerPage=parseInt(t,10),n.totalPages=o.calculateTotalPages()}):this.itemsPerPage=e.itemsPerPage,n.$watch("totalItems",function(){n.totalPages=o.calculateTotalPages()}),n.$watch("totalPages",function(t){s(n.$parent,t),n.page>t?n.selectPage(t):r.$render()})},this.calculateTotalPages=function(){var t=this.itemsPerPage<1?1:Math.ceil(n.totalItems/this.itemsPerPage);return Math.max(t||0,1)},this.render=function(){n.page=parseInt(r.$viewValue,10)||1},n.selectPage=function(t,e){e&&e.preventDefault(),(!n.ngDisabled||!e)&&n.page!==t&&0<t&&t<=n.totalPages&&(e&&e.target&&e.target.blur(),r.$setViewValue(t),r.$render())},n.getText=function(t){return n[t+"Text"]||o.config[t+"Text"]},n.noPrevious=function(){return 1===n.page},n.noNext=function(){return n.page===n.totalPages}}]).constant("paginationConfig",{itemsPerPage:10,boundaryLinks:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0}).directive("pagination",["$parse","paginationConfig",function(s,l){return{restrict:"EA",scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@",ngDisabled:"="},require:["pagination","?ngModel"],controller:"PaginationController",controllerAs:"pagination",templateUrl:function(t,e){return e.templateUrl||"template/pagination/pagination.html"},replace:!0,link:function(t,e,n,a){var i=a[0],o=a[1];if(o){var u=angular.isDefined(n.maxSize)?t.$parent.$eval(n.maxSize):l.maxSize,d=angular.isDefined(n.rotate)?t.$parent.$eval(n.rotate):l.rotate;t.boundaryLinks=angular.isDefined(n.boundaryLinks)?t.$parent.$eval(n.boundaryLinks):l.boundaryLinks,t.directionLinks=angular.isDefined(n.directionLinks)?t.$parent.$eval(n.directionLinks):l.directionLinks,i.init(o,l),n.maxSize&&t.$parent.$watch(s(n.maxSize),function(t){u=parseInt(t,10),i.render()});var r=i.render;i.render=function(){r(),0<t.page&&t.page<=t.totalPages&&(t.pages=function(t,e){var n=[],a=1,i=e,o=angular.isDefined(u)&&u<e;o&&(d?e<(i=(a=Math.max(t-Math.floor(u/2),1))+u-1)&&(a=(i=e)-u+1):(a=(Math.ceil(t/u)-1)*u+1,i=Math.min(a+u-1,e)));for(var r=a;r<=i;r++){var s=p(r,r,r===t);n.push(s)}if(o&&!d){if(1<a){var l=p(a-1,"...",!1);n.unshift(l)}if(i<e){var c=p(i+1,"...",!1);n.push(c)}}return n}(t.page,t.totalPages))}}function p(t,e,n){return{number:t,text:e,active:n}}}}}]).constant("pagerConfig",{itemsPerPage:10,previousText:"« Previous",nextText:"Next »",align:!0}).directive("pager",["pagerConfig",function(r){return{restrict:"EA",scope:{totalItems:"=",previousText:"@",nextText:"@",ngDisabled:"="},require:["pager","?ngModel"],controller:"PaginationController",controllerAs:"pagination",templateUrl:function(t,e){return e.templateUrl||"template/pagination/pager.html"},replace:!0,link:function(t,e,n,a){var i=a[0],o=a[1];o&&(t.align=angular.isDefined(n.align)?t.$parent.$eval(n.align):r.align,i.init(o,r))}}}]),angular.module("ui.bootstrap.tooltip",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).provider("$tooltip",function(){var s={placement:"top",animation:!0,popupDelay:0,useContentExp:!1},l={mouseenter:"mouseleave",click:"click",focus:"blur",none:""},c={};this.options=function(t){angular.extend(c,t)},this.setTriggers=function(t){angular.extend(l,t)},this.$get=["$window","$compile","$timeout","$document","$position","$interpolate","$rootScope","$parse",function(t,o,P,I,F,r,L,U){return function(E,O,a,M){function A(t){var e=(t||M.trigger||a).split(" "),n=e.map(function(t){return l[t]||t});return{show:e,hide:n}}M=angular.extend({},s,c,M);var t=E.replace(/[A-Z]/g,function(t,e){return(e?"-":"")+t.toLowerCase()}),e=r.startSymbol(),n=r.endSymbol(),i="<div "+t+'-popup title="'+e+"title"+n+'" '+(M.useContentExp?'content-exp="contentExp()" ':'content="'+e+"content"+n+'" ')+'placement="'+e+"placement"+n+'" popup-class="'+e+"popupClass"+n+'" animation="animation" is-open="isOpen"origin-scope="origScope" ></div>';return{restrict:"EA",compile:function(t,e){var S=o(i);return function(n,a,i,t){var o,e,r,s,l,c=!!angular.isDefined(M.appendToBody)&&M.appendToBody,u=A(void 0),d=angular.isDefined(i[O+"Enable"]),p=n.$new(!0),f=!1,m=!!angular.isDefined(i[O+"IsOpen"])&&U(i[O+"IsOpen"]),h=function(){o&&(l||(l=P(function(){o.css({top:0,left:0,width:"auto",height:"auto"});var t=F.position(o),e=F.positionElements(a,o,p.placement,c);e.top+="px",e.left+="px",e.width=t.width+"px",e.height=t.height+"px",o.css(e),l=null},0,!1)))};function g(){p.isOpen?b():v()}function v(){var t,e;d&&!n.$eval(i[O+"Enable"])||(p.popupClass=i[O+"Class"],x(),t=i[O+"PopupDelay"],e=parseInt(t,10),p.popupDelay=isNaN(e)?M.popupDelay:e,p.popupDelay?s||(s=P(y,p.popupDelay,!1)):y())}function b(){$(),L.$$phase||L.$digest()}function y(){if(s=null,r&&(P.cancel(r),r=null),!(M.useContentExp?p.contentExp():p.content))return angular.noop;!function(){o&&w();e=p.$new(),o=S(e,function(t){c?I.find("body").append(t):a.after(t)}),M.useContentExp&&(e.$watch("contentExp()",function(t){!t&&p.isOpen&&$()}),e.$watch(function(){f||(f=!0,e.$$postDigest(function(){f=!1,p.isOpen&&h()}))}))}(),p.isOpen=!0,m&&m.assign(p.origScope,p.isOpen),L.$$phase||p.$apply(),o.css({display:"block"}),h()}function $(){p.isOpen=!1,m&&m.assign(p.origScope,p.isOpen),P.cancel(s),s=null,P.cancel(l),l=null,p.animation?r||(r=P(w,500)):w()}function w(){r=null,o&&(o.remove(),o=null),e&&(e.$destroy(),e=null)}function x(){var t=i[O+"Placement"];p.placement=angular.isDefined(t)?t:M.placement}p.origScope=n,p.isOpen=!1,p.contentExp=function(){return n.$eval(i[E])},M.useContentExp||i.$observe(E,function(t){!(p.content=t)&&p.isOpen?$():h()}),i.$observe("disabled",function(t){s&&t&&(P.cancel(s),s=null),t&&p.isOpen&&$()}),i.$observe(O+"Title",function(t){p.title=t,h()}),i.$observe(O+"Placement",function(){p.isOpen&&(x(),h())}),m&&n.$watch(m,function(t){t!==p.isOpen&&g()});var k,C=function(){u.show.forEach(function(t){a.unbind(t,v)}),u.hide.forEach(function(t){a.unbind(t,b)})};k=i[O+"Trigger"],C(),"none"!==(u=A(k)).show&&u.show.forEach(function(t,e){t===u.hide[e]?a[0].addEventListener(t,g):t&&(a[0].addEventListener(t,v),a[0].addEventListener(u.hide[e],b))});var D=n.$eval(i[O+"Animation"]);p.animation=angular.isDefined(D)?!!D:M.animation;var T=n.$eval(i[O+"AppendToBody"]);(c=angular.isDefined(T)?T:c)&&n.$on("$locationChangeSuccess",function(){p.isOpen&&$()}),n.$on("$destroy",function(){P.cancel(r),P.cancel(s),P.cancel(l),C(),w(),p=null})}}}}}]}).directive("tooltipTemplateTransclude",["$animate","$sce","$compile","$templateRequest",function(d,a,p,f){return{link:function(t,o,e){var r,n,s,l=t.$eval(e.tooltipTemplateTranscludeScope),c=0,u=function(){n&&(n.remove(),n=null),r&&(r.$destroy(),r=null),s&&(d.leave(s).then(function(){n=null}),n=s,s=null)};t.$watch(a.parseAsResourceUrl(e.tooltipTemplateTransclude),function(a){var i=++c;a?(f(a,!0).then(function(t){if(i===c){var e=l.$new(),n=p(t)(e,function(t){u(),d.enter(t,o)});s=n,(r=e).$emit("$includeContentLoaded",a)}},function(){i===c&&(u(),t.$emit("$includeContentError",a))}),t.$emit("$includeContentRequested",a)):u()}),t.$on("$destroy",u)}}}]).directive("tooltipClasses",function(){return{restrict:"A",link:function(t,e,n){t.placement&&e.addClass(t.placement),t.popupClass&&e.addClass(t.popupClass),t.animation()&&e.addClass(n.tooltipAnimationClass)}}}).directive("tooltipPopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-popup.html"}}).directive("tooltip",["$tooltip",function(t){return t("tooltip","tooltip","mouseenter")}]).directive("tooltipTemplatePopup",function(){return{restrict:"EA",replace:!0,scope:{contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&",originScope:"&"},templateUrl:"template/tooltip/tooltip-template-popup.html"}}).directive("tooltipTemplate",["$tooltip",function(t){return t("tooltipTemplate","tooltip","mouseenter",{useContentExp:!0})}]).directive("tooltipHtmlPopup",function(){return{restrict:"EA",replace:!0,scope:{contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-html-popup.html"}}).directive("tooltipHtml",["$tooltip",function(t){return t("tooltipHtml","tooltip","mouseenter",{useContentExp:!0})}]).directive("tooltipHtmlUnsafePopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-html-unsafe-popup.html"}}).value("tooltipHtmlUnsafeSuppressDeprecated",!1).directive("tooltipHtmlUnsafe",["$tooltip","tooltipHtmlUnsafeSuppressDeprecated","$log",function(t,e,n){return e||n.warn("tooltip-html-unsafe is now deprecated. Use tooltip-html or tooltip-template instead."),t("tooltipHtmlUnsafe","tooltip","mouseenter")}]),angular.module("ui.bootstrap.popover",["ui.bootstrap.tooltip"]).directive("popoverTemplatePopup",function(){return{restrict:"EA",replace:!0,scope:{title:"@",contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&",originScope:"&"},templateUrl:"template/popover/popover-template.html"}}).directive("popoverTemplate",["$tooltip",function(t){return t("popoverTemplate","popover","click",{useContentExp:!0})}]).directive("popoverHtmlPopup",function(){return{restrict:"EA",replace:!0,scope:{contentExp:"&",title:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/popover/popover-html.html"}}).directive("popoverHtml",["$tooltip",function(t){return t("popoverHtml","popover","click",{useContentExp:!0})}]).directive("popoverPopup",function(){return{restrict:"EA",replace:!0,scope:{title:"@",content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/popover/popover.html"}}).directive("popover",["$tooltip",function(t){return t("popover","popover","click")}]),angular.module("ui.bootstrap.progressbar",[]).constant("progressConfig",{animate:!0,max:100}).value("$progressSuppressWarning",!1).controller("ProgressController",["$scope","$attrs","progressConfig",function(n,t,e){var a=this,i=angular.isDefined(t.animate)?n.$parent.$eval(t.animate):e.animate;this.bars=[],n.max=angular.isDefined(n.max)?n.max:e.max,this.addBar=function(e,t){i||t.css({transition:"none"}),this.bars.push(e),e.max=n.max,e.$watch("value",function(t){e.recalculatePercentage()}),e.recalculatePercentage=function(){e.percent=+(100*e.value/e.max).toFixed(2);var t=a.bars.reduce(function(t,e){return t+e.percent},0);100<t&&(e.percent-=t-100)},e.$on("$destroy",function(){t=null,a.removeBar(e)})},this.removeBar=function(t){this.bars.splice(this.bars.indexOf(t),1)},n.$watch("max",function(t){a.bars.forEach(function(t){t.max=n.max,t.recalculatePercentage()})})}]).directive("uibProgress",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",require:"uibProgress",scope:{max:"=?"},templateUrl:"template/progressbar/progress.html"}}).directive("progress",["$log","$progressSuppressWarning",function(t,e){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",require:"progress",scope:{max:"=?"},templateUrl:"template/progressbar/progress.html",link:function(){e&&t.warn("progress is now deprecated. Use uib-progress instead")}}}]).directive("uibBar",function(){return{restrict:"EA",replace:!0,transclude:!0,require:"^uibProgress",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/bar.html",link:function(t,e,n,a){a.addBar(t,e)}}}).directive("bar",["$log","$progressSuppressWarning",function(i,o){return{restrict:"EA",replace:!0,transclude:!0,require:"^progress",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/bar.html",link:function(t,e,n,a){o&&i.warn("bar is now deprecated. Use uib-bar instead"),a.addBar(t,e)}}}]).directive("progressbar",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",scope:{value:"=",max:"=?",type:"@"},templateUrl:"template/progressbar/progressbar.html",link:function(t,e,n,a){a.addBar(t,angular.element(e.children()[0]))}}}),angular.module("ui.bootstrap.rating",[]).constant("ratingConfig",{max:5,stateOn:null,stateOff:null,titles:["one","two","three","four","five"]}).controller("RatingController",["$scope","$attrs","ratingConfig",function(a,i,o){var r={$setViewValue:angular.noop};this.init=function(t){(r=t).$render=this.render,r.$formatters.push(function(t){return angular.isNumber(t)&&t<<0!==t&&(t=Math.round(t)),t}),this.stateOn=angular.isDefined(i.stateOn)?a.$parent.$eval(i.stateOn):o.stateOn,this.stateOff=angular.isDefined(i.stateOff)?a.$parent.$eval(i.stateOff):o.stateOff;var e=angular.isDefined(i.titles)?a.$parent.$eval(i.titles):o.titles;this.titles=angular.isArray(e)&&0<e.length?e:o.titles;var n=angular.isDefined(i.ratingStates)?a.$parent.$eval(i.ratingStates):new Array(angular.isDefined(i.max)?a.$parent.$eval(i.max):o.max);a.range=this.buildTemplateObjects(n)},this.buildTemplateObjects=function(t){for(var e=0,n=t.length;e<n;e++)t[e]=angular.extend({index:e},{stateOn:this.stateOn,stateOff:this.stateOff,title:this.getTitle(e)},t[e]);return t},this.getTitle=function(t){return t>=this.titles.length?t+1:this.titles[t]},a.rate=function(t){!a.readonly&&0<=t&&t<=a.range.length&&(r.$setViewValue(r.$viewValue===t?0:t),r.$render())},a.enter=function(t){a.readonly||(a.value=t),a.onHover({value:t})},a.reset=function(){a.value=r.$viewValue,a.onLeave()},a.onKeydown=function(t){/(37|38|39|40)/.test(t.which)&&(t.preventDefault(),t.stopPropagation(),a.rate(a.value+(38===t.which||39===t.which?1:-1)))},this.render=function(){a.value=r.$viewValue}}]).directive("rating",function(){return{restrict:"EA",require:["rating","ngModel"],scope:{readonly:"=?",onHover:"&",onLeave:"&"},controller:"RatingController",templateUrl:"template/rating/rating.html",replace:!0,link:function(t,e,n,a){var i=a[0],o=a[1];i.init(o)}}}),angular.module("ui.bootstrap.tabs",[]).controller("TabsetController",["$scope",function(t){var a,i=this,o=i.tabs=t.tabs=[];i.select=function(e){angular.forEach(o,function(t){t.active&&t!==e&&(t.active=!1,t.onDeselect(),e.selectCalled=!1)}),e.active=!0,e.selectCalled||(e.onSelect(),e.selectCalled=!0)},i.addTab=function(t){o.push(t),1===o.length&&!1!==t.active?t.active=!0:t.active?i.select(t):t.active=!1},i.removeTab=function(t){var e=o.indexOf(t);if(t.active&&1<o.length&&!a){var n=e==o.length-1?e-1:e+1;i.select(o[n])}o.splice(e,1)},t.$on("$destroy",function(){a=!0})}]).directive("tabset",function(){return{restrict:"EA",transclude:!0,replace:!0,scope:{type:"@"},controller:"TabsetController",templateUrl:"template/tabs/tabset.html",link:function(t,e,n){t.vertical=!!angular.isDefined(n.vertical)&&t.$parent.$eval(n.vertical),t.justified=!!angular.isDefined(n.justified)&&t.$parent.$eval(n.justified)}}}).directive("tab",["$parse","$log",function(o,r){return{require:"^tabset",restrict:"EA",replace:!0,templateUrl:"template/tabs/tab.html",transclude:!0,scope:{active:"=?",heading:"@",onSelect:"&select",onDeselect:"&deselect"},controller:function(){},link:function(e,t,n,a,i){e.$watch("active",function(t){t&&a.select(e)}),e.disabled=!1,n.disable&&e.$parent.$watch(o(n.disable),function(t){e.disabled=!!t}),n.disabled&&(r.warn('Use of "disabled" attribute has been deprecated, please use "disable"'),e.$parent.$watch(o(n.disabled),function(t){e.disabled=!!t})),e.select=function(){e.disabled||(e.active=!0)},a.addTab(e),e.$on("$destroy",function(){a.removeTab(e)}),e.$transcludeFn=i}}}]).directive("tabHeadingTransclude",function(){return{restrict:"A",require:"^tab",link:function(t,e,n,a){t.$watch("headingElement",function(t){t&&(e.html(""),e.append(t))})}}}).directive("tabContentTransclude",function(){return{restrict:"A",require:"^tabset",link:function(t,n,e){var a=t.$eval(e.tabContentTransclude);a.$transcludeFn(a.$parent,function(t){angular.forEach(t,function(t){var e;(e=t).tagName&&(e.hasAttribute("tab-heading")||e.hasAttribute("data-tab-heading")||e.hasAttribute("x-tab-heading")||"tab-heading"===e.tagName.toLowerCase()||"data-tab-heading"===e.tagName.toLowerCase()||"x-tab-heading"===e.tagName.toLowerCase())?a.headingElement=t:n.append(t)})})}}}),angular.module("ui.bootstrap.timepicker",[]).constant("timepickerConfig",{hourStep:1,minuteStep:1,showMeridian:!0,meridians:null,readonlyInput:!1,mousewheel:!0,arrowkeys:!0,showSpinners:!0}).controller("TimepickerController",["$scope","$attrs","$parse","$log","$locale","timepickerConfig",function(i,o,t,e,n,r){var a=new Date,s={$setViewValue:angular.noop},l=angular.isDefined(o.meridians)?i.$parent.$eval(o.meridians):r.meridians||n.DATETIME_FORMATS.AMPMS;this.init=function(t,e){(s=t).$render=this.render,s.$formatters.unshift(function(t){return t?new Date(t):null});var n=e.eq(0),a=e.eq(1);(angular.isDefined(o.mousewheel)?i.$parent.$eval(o.mousewheel):r.mousewheel)&&this.setupMousewheelEvents(n,a),(angular.isDefined(o.arrowkeys)?i.$parent.$eval(o.arrowkeys):r.arrowkeys)&&this.setupArrowkeyEvents(n,a),i.readonlyInput=angular.isDefined(o.readonlyInput)?i.$parent.$eval(o.readonlyInput):r.readonlyInput,this.setupInputEvents(n,a)};var c=r.hourStep;o.hourStep&&i.$parent.$watch(t(o.hourStep),function(t){c=parseInt(t,10)});var u,d,p=r.minuteStep;function f(){var t=parseInt(i.hours,10);if(i.showMeridian?0<t&&t<13:0<=t&&t<24)return i.showMeridian&&(12===t&&(t=0),i.meridian===l[1]&&(t+=12)),t}function m(){var t=parseInt(i.minutes,10);return 0<=t&&t<60?t:void 0}function h(t){return angular.isDefined(t)&&t.toString().length<2?"0"+t:t.toString()}function g(t){v(),s.$setViewValue(new Date(a)),b(t)}function v(){s.$setValidity("time",!0),i.invalidHours=!1,i.invalidMinutes=!1}function b(t){var e=a.getHours(),n=a.getMinutes();i.showMeridian&&(e=0===e||12===e?12:e%12),i.hours="h"===t?e:h(e),"m"!==t&&(i.minutes=h(n)),i.meridian=a.getHours()<12?l[0]:l[1]}function y(t,e){var n=new Date(t.getTime()+6e4*e),a=new Date(t);return a.setHours(n.getHours(),n.getMinutes()),a}function $(t){a=y(a,t),g()}o.minuteStep&&i.$parent.$watch(t(o.minuteStep),function(t){p=parseInt(t,10)}),i.$parent.$watch(t(o.min),function(t){var e=new Date(t);u=isNaN(e)?void 0:e}),i.$parent.$watch(t(o.max),function(t){var e=new Date(t);d=isNaN(e)?void 0:e}),i.noIncrementHours=function(){var t=y(a,60*c);return d<t||t<a&&t<u},i.noDecrementHours=function(){var t=y(a,60*-c);return t<u||a<t&&d<t},i.noIncrementMinutes=function(){var t=y(a,p);return d<t||t<a&&t<u},i.noDecrementMinutes=function(){var t=y(a,-p);return t<u||a<t&&d<t},i.noToggleMeridian=function(){return a.getHours()<13?y(a,720)>d:y(a,-720)<u},i.showMeridian=r.showMeridian,o.showMeridian&&i.$parent.$watch(t(o.showMeridian),function(t){if(i.showMeridian=!!t,s.$error.time){var e=f(),n=m();angular.isDefined(e)&&angular.isDefined(n)&&(a.setHours(e),g())}else b()}),this.setupMousewheelEvents=function(t,e){var n=function(t){t.originalEvent&&(t=t.originalEvent);var e=t.wheelDelta?t.wheelDelta:-t.deltaY;return t.detail||0<e};t.bind("mousewheel wheel",function(t){i.$apply(n(t)?i.incrementHours():i.decrementHours()),t.preventDefault()}),e.bind("mousewheel wheel",function(t){i.$apply(n(t)?i.incrementMinutes():i.decrementMinutes()),t.preventDefault()})},this.setupArrowkeyEvents=function(t,e){t.bind("keydown",function(t){38===t.which?(t.preventDefault(),i.incrementHours(),i.$apply()):40===t.which&&(t.preventDefault(),i.decrementHours(),i.$apply())}),e.bind("keydown",function(t){38===t.which?(t.preventDefault(),i.incrementMinutes(),i.$apply()):40===t.which&&(t.preventDefault(),i.decrementMinutes(),i.$apply())})},this.setupInputEvents=function(t,e){if(i.readonlyInput)return i.updateHours=angular.noop,void(i.updateMinutes=angular.noop);var n=function(t,e){s.$setViewValue(null),s.$setValidity("time",!1),angular.isDefined(t)&&(i.invalidHours=t),angular.isDefined(e)&&(i.invalidMinutes=e)};i.updateHours=function(){var t=f(),e=m();angular.isDefined(t)&&angular.isDefined(e)?(a.setHours(t),a<u||d<a?n(!0):g("h")):n(!0)},t.bind("blur",function(t){!i.invalidHours&&i.hours<10&&i.$apply(function(){i.hours=h(i.hours)})}),i.updateMinutes=function(){var t=m(),e=f();angular.isDefined(t)&&angular.isDefined(e)?(a.setMinutes(t),a<u||d<a?n(void 0,!0):g("m")):n(void 0,!0)},e.bind("blur",function(t){!i.invalidMinutes&&i.minutes<10&&i.$apply(function(){i.minutes=h(i.minutes)})})},this.render=function(){var t=s.$viewValue;isNaN(t)?(s.$setValidity("time",!1),e.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')):(t&&(a=t),a<u||d<a?(s.$setValidity("time",!1),i.invalidHours=!0,i.invalidMinutes=!0):v(),b())},i.showSpinners=angular.isDefined(o.showSpinners)?i.$parent.$eval(o.showSpinners):r.showSpinners,i.incrementHours=function(){i.noIncrementHours()||$(60*c)},i.decrementHours=function(){i.noDecrementHours()||$(60*-c)},i.incrementMinutes=function(){i.noIncrementMinutes()||$(p)},i.decrementMinutes=function(){i.noDecrementMinutes()||$(-p)},i.toggleMeridian=function(){i.noToggleMeridian()||$(720*(a.getHours()<12?1:-1))}}]).directive("timepicker",function(){return{restrict:"EA",require:["timepicker","?^ngModel"],controller:"TimepickerController",controllerAs:"timepicker",replace:!0,scope:{},templateUrl:function(t,e){return e.templateUrl||"template/timepicker/timepicker.html"},link:function(t,e,n,a){var i=a[0],o=a[1];o&&i.init(o,e.find("input"))}}}),angular.module("ui.bootstrap.transition",[]).value("$transitionSuppressDeprecated",!1).factory("$transition",["$q","$timeout","$rootScope","$log","$transitionSuppressDeprecated",function(r,s,l,t,e){e||t.warn("$transition is now deprecated. Use $animate from ngAnimate instead.");var c=function(e,t,n){n=n||{};var a=r.defer(),i=c[n.animation?"animationEndEventName":"transitionEndEventName"],o=function(t){l.$apply(function(){e.unbind(i,o),a.resolve(e)})};return i&&e.bind(i,o),s(function(){angular.isString(t)?e.addClass(t):angular.isFunction(t)?t(e):angular.isObject(t)&&e.css(t),i||a.resolve(e)}),a.promise.cancel=function(){i&&e.unbind(i,o),a.reject("Transition cancelled")},a.promise},n=document.createElement("trans");function a(t){for(var e in t)if(void 0!==n.style[e])return t[e]}return c.transitionEndEventName=a({WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"}),c.animationEndEventName=a({WebkitTransition:"webkitAnimationEnd",MozTransition:"animationend",OTransition:"oAnimationEnd",transition:"animationend"}),c}]),angular.module("ui.bootstrap.typeahead",["ui.bootstrap.position"]).factory("typeaheadParser",["$parse",function(n){var a=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;return{parse:function(t){var e=t.match(a);if(!e)throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "'+t+'".');return{itemName:e[3],source:n(e[4]),viewMapper:n(e[2]||e[1]),modelMapper:n(e[1])}}}}]).directive("typeahead",["$compile","$parse","$q","$timeout","$document","$window","$rootScope","$position","typeaheadParser",function(U,N,V,H,z,j,R,_,q){var B=[9,13,27,38,40];return{require:["ngModel","^?ngModelOptions"],link:function(s,l,r,t){var c=t[0],u=t[1],n=s.$eval(r.typeaheadMinLength);n||0===n||(n=1);var d,p,a=s.$eval(r.typeaheadWaitMs)||0,i=!1!==s.$eval(r.typeaheadEditable),f=N(r.typeaheadLoading).assign||angular.noop,m=N(r.typeaheadOnSelect),e=!!angular.isDefined(r.typeaheadSelectOnBlur)&&s.$eval(r.typeaheadSelectOnBlur),h=N(r.typeaheadNoResults).assign||angular.noop,o=r.typeaheadInputFormatter?N(r.typeaheadInputFormatter):void 0,g=!!r.typeaheadAppendToBody&&s.$eval(r.typeaheadAppendToBody),v=!1!==s.$eval(r.typeaheadFocusFirst),b=!!r.typeaheadSelectOnExact&&s.$eval(r.typeaheadSelectOnExact),y=N(r.ngModel),$=N(r.ngModel+"($$$p)"),w=q.parse(r.typeahead),x=s.$new(),k=s.$on("$destroy",function(){x.$destroy()});x.$on("$destroy",k);var C="typeahead-"+x.$id+"-"+Math.floor(1e4*Math.random());l.attr({"aria-autocomplete":"list","aria-expanded":!1,"aria-owns":C});var D=angular.element("<div typeahead-popup></div>");D.attr({id:C,matches:"matches",active:"activeIdx",select:"select(activeIdx)","move-in-progress":"moveInProgress",query:"query",position:"position"}),angular.isDefined(r.typeaheadTemplateUrl)&&D.attr("template-url",r.typeaheadTemplateUrl),angular.isDefined(r.typeaheadPopupTemplateUrl)&&D.attr("popup-template-url",r.typeaheadPopupTemplateUrl);var T=function(){x.matches=[],x.activeIdx=-1,l.attr("aria-expanded",!1)},S=function(t){return C+"-option-"+t};x.$watch("activeIdx",function(t){t<0?l.removeAttr("aria-activedescendant"):l.attr("aria-activedescendant",S(t))});var E,O,M=function(o){var r={$viewValue:o};f(s,!0),h(s,!1),V.when(w.source(s,r)).then(function(t){var e,n,a=o===c.$viewValue;if(a&&d)if(t&&0<t.length){x.activeIdx=v?0:-1,h(s,!1);for(var i=x.matches.length=0;i<t.length;i++)r[w.itemName]=t[i],x.matches.push({id:S(i),label:w.viewMapper(x,r),model:t[i]});x.query=o,P(),l.attr("aria-expanded",!0),b&&1===x.matches.length&&(e=o,n=0,x.matches.length>n&&e&&e.toUpperCase()===x.matches[n].label.toUpperCase())&&x.select(0)}else T(),h(s,!0);a&&f(s,!1)},function(){T(),f(s,!1),h(s,!0)})};function A(){x.moveInProgress||(x.moveInProgress=!0,x.$digest()),E&&H.cancel(E),E=H(function(){x.matches.length&&P(),x.moveInProgress=!1,x.$digest()},200)}function P(){x.position=g?_.offset(l):_.position(l),x.position.top+=l.prop("offsetHeight")}g&&(angular.element(j).bind("resize",A),z.find("body").bind("scroll",A)),x.moveInProgress=!1,T(),x.query=void 0;var I=function(){O&&H.cancel(O)};c.$parsers.unshift(function(t){var e;return d=!0,0===n||t&&t.length>=n?0<a?(I(),e=t,O=H(function(){M(e)},a)):M(t):(f(s,!1),I(),T()),i?t:t?void c.$setValidity("editable",!1):(c.$setValidity("editable",!0),null)}),c.$formatters.push(function(t){var e,n={};return i||c.$setValidity("editable",!0),o?(n.$model=t,o(s,n)):(n[w.itemName]=t,e=w.viewMapper(s,n),n[w.itemName]=void 0,e!==w.viewMapper(s,n)?e:t)}),x.select=function(t){var e,n,a,i,o={};p=!0,o[w.itemName]=n=x.matches[t].model,e=w.modelMapper(s,o),a=s,i=e,angular.isFunction(y(s))&&u&&u.$options&&u.$options.getterSetter?$(a,{$$$p:i}):y.assign(a,i),c.$setValidity("editable",!0),c.$setValidity("parse",!0),m(s,{$item:n,$model:e,$label:w.viewMapper(s,o)}),T(),!1!==x.$eval(r.typeaheadFocusOnSelect)&&H(function(){l[0].focus()},0,!1)},l.bind("keydown",function(t){if(0!==x.matches.length&&-1!==B.indexOf(t.which)){if(-1===x.activeIdx&&(9===t.which||13===t.which))return T(),void x.$digest();t.preventDefault(),40===t.which?(x.activeIdx=(x.activeIdx+1)%x.matches.length,x.$digest()):38===t.which?(x.activeIdx=(0<x.activeIdx?x.activeIdx:x.matches.length)-1,x.$digest()):13===t.which||9===t.which?x.$apply(function(){x.select(x.activeIdx)}):27===t.which&&(t.stopPropagation(),T(),x.$digest())}}),l.bind("blur",function(){e&&x.matches.length&&-1!==x.activeIdx&&!p&&(p=!0,x.$apply(function(){x.select(x.activeIdx)})),p=d=!1});var F=function(t){l[0]!==t.target&&3!==t.which&&0!==x.matches.length&&(T(),R.$$phase||x.$digest())};z.bind("click",F),s.$on("$destroy",function(){z.unbind("click",F),g&&L.remove(),D.remove()});var L=U(D)(x);g?z.find("body").append(L):l.after(L)}}}]).directive("typeaheadPopup",function(){return{restrict:"EA",scope:{matches:"=",query:"=",active:"=",position:"&",moveInProgress:"=",select:"&"},replace:!0,templateUrl:function(t,e){return e.popupTemplateUrl||"template/typeahead/typeahead-popup.html"},link:function(e,t,n){e.templateUrl=n.templateUrl,e.isOpen=function(){return 0<e.matches.length},e.isActive=function(t){return e.active==t},e.selectActive=function(t){e.active=t},e.selectMatch=function(t){e.select({activeIdx:t})}}}}).directive("typeaheadMatch",["$templateRequest","$compile","$parse",function(i,o,r){return{restrict:"EA",scope:{index:"=",match:"=",query:"="},link:function(e,n,t){var a=r(t.templateUrl)(e.$parent)||"template/typeahead/typeahead-match.html";i(a).then(function(t){o(t.trim())(e,function(t){n.replaceWith(t)})})}}}]).filter("typeaheadHighlight",["$sce","$injector","$log",function(n,t,a){var i;return i=t.has("$sanitize"),function(t,e){return!i&&/<.*>/g.test(t)&&a.warn("Unsafe use of typeahead please use ngSanitize"),t=e?(""+t).replace(new RegExp(e.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1"),"gi"),"<strong>$&</strong>"):t,i||(t=n.trustAsHtml(t)),t}}]),angular.module("template/accordion/accordion-group.html",[]).run(["$templateCache",function(t){t.put("template/accordion/accordion-group.html",'<div class="panel {{panelClass || \'panel-default\'}}">\n  <div class="panel-heading" ng-keypress="toggleOpen($event)">\n    <h4 class="panel-title">\n      <a href tabindex="0" class="accordion-toggle" ng-click="toggleOpen()" accordion-transclude="heading"><span ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n    </h4>\n  </div>\n  <div class="panel-collapse collapse" collapse="!isOpen">\n\t  <div class="panel-body" ng-transclude></div>\n  </div>\n</div>\n')}]),angular.module("template/accordion/accordion.html",[]).run(["$templateCache",function(t){t.put("template/accordion/accordion.html",'<div class="panel-group" ng-transclude></div>')}]),angular.module("template/alert/alert.html",[]).run(["$templateCache",function(t){t.put("template/alert/alert.html",'<div class="alert" ng-class="[\'alert-\' + (type || \'warning\'), closeable ? \'alert-dismissible\' : null]" role="alert">\n    <button ng-show="closeable" type="button" class="close" ng-click="close($event)">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <div ng-transclude></div>\n</div>\n')}]),angular.module("template/carousel/carousel.html",[]).run(["$templateCache",function(t){t.put("template/carousel/carousel.html",'<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" ng-swipe-right="prev()" ng-swipe-left="next()">\n    <ol class="carousel-indicators" ng-show="slides.length > 1">\n        <li ng-repeat="slide in slides | orderBy:indexOfSlide track by $index" ng-class="{active: isActive(slide)}" ng-click="select(slide)"></li>\n    </ol>\n    <div class="carousel-inner" ng-transclude></div>\n    <a class="left carousel-control" ng-click="prev()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-left"></span></a>\n    <a class="right carousel-control" ng-click="next()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-right"></span></a>\n</div>\n')}]),angular.module("template/carousel/slide.html",[]).run(["$templateCache",function(t){t.put("template/carousel/slide.html",'<div ng-class="{\n    \'active\': active\n  }" class="item text-center" ng-transclude></div>\n')}]),angular.module("template/datepicker/datepicker.html",[]).run(["$templateCache",function(t){t.put("template/datepicker/datepicker.html",'<div ng-switch="datepickerMode" role="application" ng-keydown="keydown($event)">\n  <daypicker ng-switch-when="day" tabindex="0"></daypicker>\n  <monthpicker ng-switch-when="month" tabindex="0"></monthpicker>\n  <yearpicker ng-switch-when="year" tabindex="0"></yearpicker>\n</div>')}]),angular.module("template/datepicker/day.html",[]).run(["$templateCache",function(t){t.put("template/datepicker/day.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{::5 + showWeeks}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n    <tr>\n      <th ng-if="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in ::labels track by $index" class="text-center"><small aria-label="{{::label.full}}">{{::label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-if="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}" ng-class="::dt.customClass">\n        <button type="button" style="min-width:100%;" class="btn btn-default btn-sm" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/month.html",[]).run(["$templateCache",function(t){t.put("template/datepicker/month.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}" ng-class="::dt.customClass">\n        <button type="button" style="min-width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/popup.html",[]).run(["$templateCache",function(t){t.put("template/datepicker/popup.html",'<ul class="dropdown-menu" ng-if="isOpen" style="display: block" ng-style="{top: position.top+\'px\', left: position.left+\'px\'}" ng-keydown="keydown($event)" ng-click="$event.stopPropagation()">\n\t<li ng-transclude></li>\n\t<li ng-if="showButtonBar" style="padding:10px 9px 2px">\n\t\t<span class="btn-group pull-left">\n\t\t\t<button type="button" class="btn btn-sm btn-info" ng-click="select(\'today\')" ng-disabled="isDisabled(\'today\')">{{ getText(\'current\') }}</button>\n\t\t\t<button type="button" class="btn btn-sm btn-danger" ng-click="select(null)">{{ getText(\'clear\') }}</button>\n\t\t</span>\n\t\t<button type="button" class="btn btn-sm btn-success pull-right" ng-click="close()">{{ getText(\'close\') }}</button>\n\t</li>\n</ul>\n')}]),angular.module("template/datepicker/year.html",[]).run(["$templateCache",function(t){t.put("template/datepicker/year.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="3"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}">\n        <button type="button" style="min-width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/modal/backdrop.html",[]).run(["$templateCache",function(t){t.put("template/modal/backdrop.html",'<div class="modal-backdrop"\n     modal-animation-class="fade"\n     modal-in-class="in"\n     ng-style="{\'z-index\': 1040 + (index && 1 || 0) + index*10}"\n></div>\n')}]),angular.module("template/modal/window.html",[]).run(["$templateCache",function(t){t.put("template/modal/window.html",'<div modal-render="{{$isRendered}}" tabindex="-1" role="dialog" class="modal"\n    modal-animation-class="fade"\n    modal-in-class="in"\n\tng-style="{\'z-index\': 1050 + index*10, display: \'block\'}" ng-click="close($event)">\n    <div class="modal-dialog" ng-class="size ? \'modal-\' + size : \'\'"><div class="modal-content" modal-transclude></div></div>\n</div>\n')}]),angular.module("template/pagination/pager.html",[]).run(["$templateCache",function(t){t.put("template/pagination/pager.html",'<ul class="pager">\n  <li ng-class="{disabled: noPrevious()||ngDisabled, previous: align}"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n  <li ng-class="{disabled: noNext()||ngDisabled, next: align}"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n</ul>\n')}]),angular.module("template/pagination/pagination.html",[]).run(["$templateCache",function(t){t.put("template/pagination/pagination.html",'<ul class="pagination">\n  <li ng-if="::boundaryLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-first"><a href ng-click="selectPage(1, $event)">{{::getText(\'first\')}}</a></li>\n  <li ng-if="::directionLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-prev"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n  <li ng-repeat="page in pages track by $index" ng-class="{active: page.active,disabled: ngDisabled&&!page.active}" class="pagination-page"><a href ng-click="selectPage(page.number, $event)">{{page.text}}</a></li>\n  <li ng-if="::directionLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-next"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n  <li ng-if="::boundaryLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-last"><a href ng-click="selectPage(totalPages, $event)">{{::getText(\'last\')}}</a></li>\n</ul>\n')}]),angular.module("template/tooltip/tooltip-html-popup.html",[]).run(["$templateCache",function(t){t.put("template/tooltip/tooltip-html-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind-html="contentExp()"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-html-unsafe-popup.html",[]).run(["$templateCache",function(t){t.put("template/tooltip/tooltip-html-unsafe-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" bind-html-unsafe="content"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-popup.html",[]).run(["$templateCache",function(t){t.put("template/tooltip/tooltip-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind="content"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-template-popup.html",[]).run(["$templateCache",function(t){t.put("template/tooltip/tooltip-template-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner"\n    tooltip-template-transclude="contentExp()"\n    tooltip-template-transclude-scope="originScope()"></div>\n</div>\n')}]),angular.module("template/popover/popover-html.html",[]).run(["$templateCache",function(t){t.put("template/popover/popover-html.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content" ng-bind-html="contentExp()"></div>\n  </div>\n</div>\n')}]),angular.module("template/popover/popover-template.html",[]).run(["$templateCache",function(t){t.put("template/popover/popover-template.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content"\n        tooltip-template-transclude="contentExp()"\n        tooltip-template-transclude-scope="originScope()"></div>\n  </div>\n</div>\n')}]),angular.module("template/popover/popover.html",[]).run(["$templateCache",function(t){t.put("template/popover/popover.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content" ng-bind="content"></div>\n  </div>\n</div>\n')}]),angular.module("template/progressbar/bar.html",[]).run(["$templateCache",function(t){t.put("template/progressbar/bar.html",'<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" style="min-width: 0;" ng-transclude></div>\n')}]),angular.module("template/progressbar/progress.html",[]).run(["$templateCache",function(t){t.put("template/progressbar/progress.html",'<div class="progress" ng-transclude></div>')}]),angular.module("template/progressbar/progressbar.html",[]).run(["$templateCache",function(t){t.put("template/progressbar/progressbar.html",'<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" style="min-width: 0;" ng-transclude></div>\n</div>\n')}]),angular.module("template/rating/rating.html",[]).run(["$templateCache",function(t){t.put("template/rating/rating.html",'<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}">\n    <span ng-repeat-start="r in range track by $index" class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    <i ng-repeat-end ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')" ng-attr-title="{{r.title}}" ></i>\n</span>\n')}]),angular.module("template/tabs/tab.html",[]).run(["$templateCache",function(t){t.put("template/tabs/tab.html",'<li ng-class="{active: active, disabled: disabled}">\n  <a href ng-click="select()" tab-heading-transclude>{{heading}}</a>\n</li>\n')}]),angular.module("template/tabs/tabset.html",[]).run(["$templateCache",function(t){t.put("template/tabs/tabset.html",'<div>\n  <ul class="nav nav-{{type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane" \n         ng-repeat="tab in tabs" \n         ng-class="{active: tab.active}"\n         tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n')}]),angular.module("template/timepicker/timepicker.html",[]).run(["$templateCache",function(t){t.put("template/timepicker/timepicker.html",'<table>\n  <tbody>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td><a ng-click="incrementHours()" ng-class="{disabled: noIncrementHours()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td>&nbsp;</td>\n      <td><a ng-click="incrementMinutes()" ng-class="{disabled: noIncrementMinutes()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n    <tr>\n      <td class="form-group" ng-class="{\'has-error\': invalidHours}">\n        <input style="width:50px;" type="text" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2">\n      </td>\n      <td>:</td>\n      <td class="form-group" ng-class="{\'has-error\': invalidMinutes}">\n        <input style="width:50px;" type="text" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2">\n      </td>\n      <td ng-show="showMeridian"><button type="button" ng-class="{disabled: noToggleMeridian()}" class="btn btn-default text-center" ng-click="toggleMeridian()">{{meridian}}</button></td>\n    </tr>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td><a ng-click="decrementHours()" ng-class="{disabled: noDecrementHours()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td>&nbsp;</td>\n      <td><a ng-click="decrementMinutes()" ng-class="{disabled: noDecrementMinutes()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/typeahead/typeahead-match.html",[]).run(["$templateCache",function(t){t.put("template/typeahead/typeahead-match.html",'<a href tabindex="-1" ng-bind-html="match.label | typeaheadHighlight:query"></a>\n')}]),angular.module("template/typeahead/typeahead-popup.html",[]).run(["$templateCache",function(t){t.put("template/typeahead/typeahead-popup.html",'<ul class="dropdown-menu" ng-show="isOpen() && !moveInProgress" ng-style="{top: position().top+\'px\', left: position().left+\'px\'}" style="display: block;" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index)" role="option" id="{{::match.id}}">\n        <div typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n')}]),!angular.$$csp()&&angular.element(document).find("head").prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>'),void 0===TEMPLATES)var TEMPLATES={};TEMPLATES["alignment.html"]='<div class="btn-group alignment">\n  <button type="button" class="btn btn-default btn-sm btn-alignment dropdown-toggle"\n    data-toggle="dropdown" data-wysihtml5-command-value="left">\n    <i class="fa fa-align-left"></i>\n    <span class="caret"></span>\n  </button>\n  <div class="dropdown-menu" role="menu">\n    <div class="btn-group">\n      <button type="button" class="btn btn-default btn-sm" data-wysihtml5-command="alignment"\n        data-wysihtml5-command-value="left" tabindex="-1">\n        <i class="fa fa-align-left"></i>\n      </button>\n      <button type="button" class="btn btn-default btn-sm" data-wysihtml5-command="alignment"\n        data-wysihtml5-command-value="center" tabindex="-1">\n        <i class="fa fa-align-center"></i>\n      </button>\n      <button type="button" class="btn btn-default btn-sm" data-wysihtml5-command="alignment"\n        data-wysihtml5-command-value="right" tabindex="-1">\n        <i class="fa fa-align-right"></i>\n      </button>\n      <button type="button" class="btn btn-default btn-sm" data-wysihtml5-command="alignment"\n        data-wysihtml5-command-value="justify" tabindex="-1">\n        <i class="fa fa-align-justify"></i>\n      </button>\n    </div>\n  </div>\n</div>\n',function(a,t,e,r,n){"use strict";var i="alignment";function o(t,e){var i=a(t),o=null;function n(t){var e=i.find(".btn-alignment .fa"),n=e.attr("class").match(/fa-align-[a-z]+/g),a="fa-align-"+t;n&&0<n.length&&e.removeClass(n[0]),e.addClass(a),o.data("wysihtml5-command-value",t)}return e=a.extend({},{align:"left"},e),i.append(r["alignment.html"]),o=i.find(".btn-alignment"),n(e.align),i.find(".dropdown-menu button").on("click",function(){var t=a(this).data("wysihtml5-command-value");n(t),i.trigger("alignmentChanged",t)}),{getAlignment:function(){return o.data("wysihtml5-command-value")},setAlignment:n,reset:function(){n("left")}}}a.fn.alignment=function(t){return this.each(function(){a.data(this,"plugin_"+i)||a.data(this,"plugin_"+i,new o(this,t))})}}(jQuery,window,document,TEMPLATES);var WIDGET_SETTINGS_UI_CONFIG={families:"Andale Mono=andale mono,monospace;Arial=arial,helvetica,sans-serif;Arial Black=arial black,sans-serif;Book Antiqua=book antiqua,palatino,serif;Comic Sans MS=comic sans ms,sans-serif;Courier New=courier new,courier,monospace;Georgia=georgia,palatino,serif;Helvetica=helvetica,arial,sans-serif;Impact=impact,sans-serif;Symbol=symbol;Tahoma=tahoma,arial,helvetica,sans-serif;Terminal=terminal,monaco,monospace;Times New Roman=times new roman,times,serif;Trebuchet MS=trebuchet ms,geneva,sans-serif;Verdana=verdana,geneva,sans-serif;",sizes:"8px 9px 10px 11px 12px 14px 18px 24px 30px 36px 48px 60px 72px 96px"};!function(){"use strict";angular.module("risevision.widget.common.url-field",["risevision.common.i18n","risevision.widget.common.tooltip"]).directive("urlField",["$templateCache","$log",function(t,o){return{restrict:"E",require:"?ngModel",scope:{url:"=",hideLabel:"@",fileType:"@"},template:t.get("_angular/url-field/url-field.html"),link:function(a,t,e,n){function i(t){var e,n;return e=/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/i,-1===t.indexOf("://")&&(t="http://"+t),(n=e.test(t))&&void 0!==a.fileType?(n=function(t,e){var n,a=t.toLowerCase();switch(e){case"image":n=[".jpg",".jpeg",".png",".bmp",".svg",".gif"];break;case"video":n=[".webm",".mp4",".ogv",".ogg"];break;default:n=[]}for(var i=0,o=n.length;i<o;i++)if(-1!==a.indexOf(n[i]))return!0;return!1}(t,a.fileType))||(a.invalidType=a.fileType):a.invalidType="url",n&&function(){if("undefined"!==a.fileType&&"undefined"!==a.url&&"image"===a.fileType){var t=new Image;t.onload=function(){a.valid=!0,a.$apply()},t.onerror=function(){a.valid=!1,a.invalidType=a.fileType,a.$apply()},t.src=a.url}}(),n}a.doValidation=!0,a.forcedValid=!1,a.valid=!0,a.invalidType="url",a.allowInitEmpty=void 0!==e.initEmpty,a.blur=function(){a.$emit("urlFieldBlur")},a.$watch("url",function(t){null!=t&&(""!==t&&a.allowInitEmpty&&(a.allowInitEmpty=!1),a.doValidation&&!a.allowInitEmpty&&(a.valid=i(a.url)))}),a.$watch("valid",function(t){n&&(o.info("Calling $setValidity() on parent controller"),n.$setValidity("valid",t))}),a.$watch("doValidation",function(t){void 0!==a.url&&(t?(a.forcedValid=!1,a.allowInitEmpty||(a.valid=i(a.url))):(a.forcedValid=!0,a.valid=!0))})}}}])}(),function(e){try{e=angular.module("risevision.widget.common.url-field")}catch(t){e=angular.module("risevision.widget.common.url-field",[])}e.run(["$templateCache",function(t){"use strict";t.put("_angular/url-field/url-field.html",'<div class="form-group" >\n  <label ng-if="!hideLabel">{{ "url.label" | translate }}</label>\n  <div>\n    <input name="url" type="text" ng-model="url" ng-blur="blur()" class="form-control" placeholder="http://">\n  </div>\n  <p ng-if="!valid && invalidType === \'url\'" class="text-danger">{{ "url.errors.url" | translate }}</p>\n  <p ng-if="!valid && invalidType === \'image\'" class="text-danger">{{ "url.errors.image" | translate }}</p>\n  <p ng-if="!valid && invalidType === \'video\'" class="text-danger">{{ "url.errors.video" | translate }}</p>\n  <div class="checkbox" ng-show="forcedValid || !valid">\n    <label>\n      <input name="validate-url" ng-click="doValidation = !doValidation" type="checkbox"\n             value="validate-url"> {{"url.validate.label" | translate}}\n    </label>\n  </div>\n</div>\n')}])}(),function(){"use strict";angular.module("risevision.widget.common.font-setting",["angularLoad","ui.tinymce","risevision.common.i18n","risevision.widget.common.url-field"]).directive("fontSetting",["$templateCache","$log","$window","googleFontLoader",function(t,e,n,a){return{restrict:"AE",scope:{fontData:"=",previewText:"@",verticalAlign:"@"},template:t.get("_angular/font-setting/font-setting.html"),transclude:!1,link:function(i,t){var o=$(t),r=o.find(".custom-font"),s=o.find(".custom-font-size"),l=!0;i.googleFontList="",i.defaultFont={font:{family:"verdana,geneva,sans-serif",type:"standard",url:""},size:"24px",customSize:"",align:"left",verticalAlign:"middle",bold:!1,italic:!1,underline:!1,forecolor:"black",backcolor:"transparent"},a.getFonts().then(function(t){i.googleFontList=t}),i.customFontSize=null,i.applyCustomFont=function(){var t=p();null!==t&&(f(t),i.fontData.font.family=t,i.fontData.font.type="custom",d(i.fontData)),r.modal("hide")},i.applyCustomFontSize=function(){s.modal("hide"),null!==i.customFontSize&&8<=i.customFontSize&&i.customFontSize+"px"!==i.fontData.size&&(i.fontData.size=i.customFontSize+"px",-1!==WIDGET_SETTINGS_UI_CONFIG.sizes.indexOf(i.fontData.size)||i.fontData.customSize===i.fontData.size?n.tinymce.activeEditor.execCommand("FontSize",!1,i.fontData.size):(i.fontData.customSize=i.customFontSize+"px",i.tinymceOptions.fontsize_formats="Custom "+(""!==i.fontData.customSize?i.fontData.customSize+" ":"")+WIDGET_SETTINGS_UI_CONFIG.sizes)),i.customFontSize=null},i.defaults=function(t){if(t)for(var e=1,n=arguments.length;e<n;e++){var a=arguments[e];for(var i in a)void 0===t[i]&&(t[i]=a[i])}return t};var c=i.$watchGroup(["fontData","googleFontList"],function(t){var e=null,n=t[0],a=t[1];n&&a&&(i.defaults(n,i.defaultFont),i.fontData.font.url&&null!==(e=p())&&f(e),d(n),i.tinymceOptions={font_formats:"Use Custom Font=custom;"+WIDGET_SETTINGS_UI_CONFIG.families+i.googleFontList,fontsize_formats:"Custom "+(""!==i.fontData.customSize?i.fontData.customSize+" ":"")+WIDGET_SETTINGS_UI_CONFIG.sizes,menubar:!1,plugins:"textcolor colorpicker",skin_url:"//s3.amazonaws.com/rise-common/styles/tinymce/rise",statusbar:!1,toolbar:"fontselect fontsizeselect | alignleft aligncenter alignright alignjustify"+(i.verticalAlign?" aligntop alignmiddle alignbottom":"")+" | forecolor backcolor | bold italic underline",setup:function(t){var e;i.verticalAlign&&((e=t).addButton("aligntop",{image:"//s3.amazonaws.com/Rise-Images/Icons/align-top.svg",tooltip:"Align Top",onclick:function(){e.execCommand("mceToggleVertical",!1,"top")}}),e.addButton("alignmiddle",{image:"//s3.amazonaws.com/Rise-Images/Icons/align-vertical-middle.svg",tooltip:"Align Middle",onclick:function(){e.execCommand("mceToggleVertical",!1,"middle")}}),e.addButton("alignbottom",{image:"//s3.amazonaws.com/Rise-Images/Icons/align-bottom.svg",tooltip:"Align Bottom",onclick:function(){e.execCommand("mceToggleVertical",!1,"bottom")}}),e.addCommand("mceToggleVertical",function(){})),t.on("init",function(){!function(t){if(i.fontData){switch("custom"===i.fontData.font.type&&i.fontData.font.url?t.execCommand("FontName",!1,"custom"):t.execCommand("FontName",!1,i.fontData.font.family),t.execCommand("FontSize",!1,i.fontData.size),i.fontData.align){case"left":t.execCommand("JustifyLeft",!1);break;case"center":t.execCommand("JustifyCenter",!1);break;case"right":t.execCommand("JustifyRight",!1);break;case"justify":t.execCommand("JustifyFull",!1)}i.verticalAlign&&t.execCommand("mceToggleVertical",!1,i.fontData.verticalAlign),o.find(".mce-colorbutton[aria-label='Text color'] span").css("background-color",i.fontData.forecolor),o.find(".mce-colorbutton[aria-label='Background color'] span").css("background-color",i.fontData.backcolor),i.fontData.bold&&u(o.find(".mce-btn[aria-label='Bold']")),i.fontData.italic&&u(o.find(".mce-btn[aria-label='Italic']")),i.fontData.underline&&u(o.find(".mce-btn[aria-label='Underline']"))}}(t),l=!1}),t.on("ExecCommand",function(t){!function(t,e){switch(e.command){case"FontName":if(l)return;if("custom"===e.value)return r.modal("show");i.fontData.font.family=e.value,i.fontData.font.type=(n=e.value,-1!==WIDGET_SETTINGS_UI_CONFIG.families.indexOf(n)?"standard":-1!==i.googleFontList.indexOf(n)?"google":"custom");break;case"FontSize":if(l)return;if("Custom"===e.value)return s.modal("show");i.fontData.size=e.value;break;case"JustifyLeft":i.fontData.align="left";break;case"JustifyCenter":i.fontData.align="center";break;case"JustifyRight":i.fontData.align="right";break;case"JustifyFull":i.fontData.align="justify";break;case"mceToggleVertical":e.value?(m(e.value),i.fontData.verticalAlign!==e.value&&m(i.fontData.verticalAlign)):m(i.defaultFont.verticalAlign),i.fontData.verticalAlign=e.value?e.value:i.defaultFont.verticalAlign;break;case"forecolor":i.fontData.forecolor=e.value?e.value:i.defaultFont.forecolor;break;case"hilitecolor":i.fontData.backcolor=e.value?e.value:i.defaultFont.backcolor;break;case"mceToggleFormat":"bold"===e.value?(i.fontData.bold=!i.fontData.bold,u(o.find(".mce-btn[aria-label='Bold']"))):"italic"===e.value?(i.fontData.italic=!i.fontData.italic,u(o.find(".mce-btn[aria-label='Italic']"))):"underline"===e.value&&(i.fontData.underline=!i.fontData.underline,u(o.find(".mce-btn[aria-label='Underline']")))}var n;d(i.fontData)}(0,t)})},init_instance_callback:function(i){var o=i.formatter.apply,r=i.formatter.remove;i.formatter.apply=function(t,e,n){var a={command:t,value:e.value};o(t,e,n),i.fire("ExecCommand",a)},i.formatter.remove=function(t,e,n){var a={command:t,value:e&&e.value?e.value:null};r(t,e,n),i.fire("ExecCommand",a)}}},c(),i.previewText&&i.$watch("fontData",d,!0))});function u(t){t.toggleClass("mce-active")}function d(t){var e=o.find(".text-container"),n=o.find(".text");i.previewText&&t&&(n.css("fontFamily",t.font.family),n.css("fontSize",t.size),n.css("fontWeight",t.bold?"bold":"normal"),n.css("fontStyle",t.italic?"italic":"normal"),n.css("textDecoration",t.underline?"underline":"none"),n.css("color",t.forecolor),n.css("backgroundColor",t.backcolor),e.css("textAlign",t.align))}function p(){return i.fontData.font.url?decodeURI(i.fontData.font.url.trim()).split("/").pop().split(".")[0]:null}function f(t){var e=null,n="font-family: "+t+"; src: url('"+$.trim(i.fontData.font.url)+"');";null!==(e=document.styleSheets[0])&&e.addRule("@font-face",n)}function m(t){switch(t){case"top":u(o.find(".mce-btn[aria-label='Align Top']"));break;case"middle":u(o.find(".mce-btn[aria-label='Align Middle']"));break;case"bottom":u(o.find(".mce-btn[aria-label='Align Bottom']"))}}i.$watch("tinymceOptions.fontsize_formats",function(t){void 0===t||l||i.$broadcast("$tinymce:refresh")})}}}])}(),function(){"use strict";angular.module("risevision.widget.common.font-setting").factory("googleFontLoader",["$http","angularLoad",function(t,o){var r=["Buda","Coda Caption","Open Sans Condensed","UnifrakturCook","Molle"],s=",sans-serif;",e={getFonts:function(){return t.get("https://www.googleapis.com/webfonts/v1/webfonts?key=AIzaSyBXxVK_IOV7LNQMuVVo_l7ZvN53ejN86zY",{cache:!0}).then(function(t){var e="",n="",a=!1;if(t.data&&t.data.items)for(var i=0;i<t.data.items.length;i++)e=t.data.items[i].family,-1===r.indexOf(e)&&(o.loadCSS("//fonts.googleapis.com/css?family="+e).then(function(){}),/\s/.test(e)&&(a=!0),n+=a?e+"='"+e+"'"+s:e+"="+e+s);return n})}};return e}])}(),function(e){try{e=angular.module("risevision.widget.common.font-setting")}catch(t){e=angular.module("risevision.widget.common.font-setting",[])}e.run(["$templateCache",function(t){"use strict";t.put("_angular/font-setting/font-setting.html",'<div class="font-setting">\n  <div class="row">\n    <div class="col-md-12">\n      <div ng-class="{\'form-group\': !previewText}">\n        <textarea ui-tinymce="tinymceOptions" ng-model="tinymceModel" ng-if="tinymceOptions"></textarea>\n      </div>\n    </div>\n  </div>\n  <div class="row" ng-if="previewText">\n    <div class="col-md-12">\n      <div class="text-container form-group">\n        <span class="text">{{previewText}}</span>\n      </div>\n    </div>\n  </div>\n\n  \x3c!-- Custom Font --\x3e\n  <div class="custom-font modal" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="false">\n    <div class="modal-dialog">\n      <div class="modal-content">\n\n        <div class="modal-header">\n          <button type="button" class="close" data-dismiss="modal">\n            <i class="fa fa-times half-top"></i>\n          </button>\n          <h2 class="modal-title">{{"font-setting.custom-font" | translate}}</h2>\n        </div>\n\n        <form role="form" name="customFontForm">\n          <div class="modal-body">\n            <url-field url="fontData.font.url" ng-model="customFont" init-empty></url-field>\n          </div>\n\n          <div class="modal-footer">\n            <button type="button" class="select btn btn-primary btn-fixed-width" ng-click="applyCustomFont()" ng-disabled="customFontForm.$invalid">\n              <span>{{"common.select" | translate}}</span>\n              <i class="fa fa-white fa-check icon-right"></i>\n            </button>\n            <button type="button" class="cancel btn btn-default btn-fixed-width" data-dismiss="modal">\n              <span>{{"common.cancel" | translate}}</span>\n              <i class="fa fa-white fa-times icon-right"></i>\n            </button>\n          </div>\n        </form>\n\n      </div>\n    </div>\n  </div>\n\n  \x3c!-- Custom Font Size --\x3e\n  <div class="custom-font-size modal" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="false">\n    <div class="modal-dialog">\n      <div class="modal-content">\n\n        <div class="modal-header">\n          <button type="button" class="close" data-dismiss="modal">\n            <i class="fa fa-times half-top"></i>\n          </button>\n          <h2 class="modal-title">{{"font-setting.custom-font-size" | translate}}</h2>\n        </div>\n\n        <form role="form" name="customFontSizeForm">\n          <div class="modal-body">\n            <div class="row">\n              <div class="col-md-3">\n                <div class="input-group">\n                  <input type="number" ng-model="customFontSize" class="form-control" />\n                  <span class="input-group-addon">{{\'common.units.pixels\' | translate}}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class="modal-footer">\n            <button type="button" class="select btn btn-primary btn-fixed-width" ng-click="applyCustomFontSize()" ng-disabled="customFontSizeForm.$invalid">\n              <span>{{"common.select" | translate}}</span>\n              <i class="fa fa-white fa-check icon-right"></i>\n            </button>\n            <button type="button" class="cancel btn btn-default btn-fixed-width" data-dismiss="modal">\n              <span>{{"common.cancel" | translate}}</span>\n              <i class="fa fa-white fa-times icon-right"></i>\n            </button>\n          </div>\n        </form>\n\n      </div>\n    </div>\n  </div>\n</div>\n')}])}(),function(){"use strict";angular.module("risevision.widget.common.transition-setting",["risevision.common.i18n","risevision.widget.common.tooltip"]).directive("transitionSetting",["$templateCache","$log",function(t){return{restrict:"E",scope:{transition:"=",hideFade:"@"},template:t.get("_angular/transition-setting/transition-setting.html"),link:function(e){e.defaultSetting={type:"none",direction:"up",duration:10,pud:10,resume:5,speed:"medium"},e.defaults=function(t){if(t)for(var e=1,n=arguments.length;e<n;e++){var a=arguments[e];for(var i in a)void 0===t[i]&&(t[i]=a[i])}return t},e.$watch("transition",function(t){e.defaults(t,e.defaultSetting)})}}}])}(),function(e){try{e=angular.module("risevision.widget.common.transition-setting")}catch(t){e=angular.module("risevision.widget.common.transition-setting",[])}e.run(["$templateCache",function(t){"use strict";t.put("_angular/transition-setting/transition-setting.html",'<div class="row">\n  <div class="col-md-3">\n    <div class="form-group">\n      <label class="control-label">{{"transition.heading" | translate}}</label>\n      <select name="transition-by" ng-model="transition.type" class="form-control">\n        <option value="none">{{"transition.type.none" | translate}}</option>\n        <option value="fade" ng-if="!hideFade">{{"transition.type.fade" | translate}}</option>\n        <option value="scroll">{{"transition.type.scroll" | translate}}</option>\n        <option value="page">{{"transition.type.page" | translate}}</option>\n      </select>\n    </div>\n  </div>\n</div>\n<div class="row">\n  <div class="col-md-3" ng-if="transition.type !== \'scroll\'">\n    <div class="form-group">\n      <label class="control-label">{{"transition.duration" | translate }}</label>\n      <div class="input-group">\n        <input name="transition-duration" type="number"  class="form-control" ng-model="transition.duration">\n        <span class="input-group-addon">sec</span>\n      </div>\n    </div>\n  </div>\n  <div class="col-md-3" ng-if="transition.type === \'scroll\'">\n    <div class="form-group">\n      <label class="control-label">{{"transition.direction.label" | translate}}</label>\n      <select name="transition-direction" ng-model="transition.direction" class="form-control">\n        <option value="up">{{"transition.direction.up" | translate}}</option>\n        <option value="left">{{"transition.direction.left" | translate}}</option>\n      </select>\n    </div>\n  </div>\n  <div class="col-md-3" ng-if="transition.type === \'scroll\'">\n    <div class="form-group">\n      <label class="control-label">{{"transition.speed.label" | translate}}</label>\n      <select name="transition-speed" ng-model="transition.speed" class="form-control">\n        <option value="slow">{{"transition.speed.slow" | translate}}</option>\n        <option value="medium">{{"transition.speed.medium" | translate}}</option>\n        <option value="fast">{{"transition.speed.fast" | translate}}</option>\n      </select>\n    </div>\n  </div>\n  <div class="col-md-3" ng-if="transition.type === \'scroll\' && transition.direction === \'up\' || transition.type === \'page\'">\n    <div class="form-group">\n      <label class="control-label">{{"transition.resume.label" | translate}}</label>\n      <span popover="{{\'transition.resume.tooltip\' | translate}}" popover-trigger="click"\n            popover-placement="right" rv-tooltip></span>\n      <div class="input-group">\n        <input name="transition-resume" type="number" ng-model="transition.resume" class="form-control" />\n        <span class="input-group-addon">{{"common.units.seconds" | translate}}</span>\n      </div>\n    </div>\n  </div>\n  <div class="col-md-3" ng-if="transition.type === \'scroll\' && transition.direction === \'up\' || transition.type === \'page\'">\n    <div class="form-group">\n      <label class="control-label">{{"transition.pud.label" | translate}}</label>\n      <span popover="{{\'transition.pud.tooltip\' | translate}}" popover-trigger="click"\n            popover-placement="right" rv-tooltip></span>\n      <div class="input-group">\n        <input name="transition-pud" type="number" ng-model="transition.pud" class="form-control" />\n        <span class="input-group-addon">{{"common.units.seconds" | translate}}</span>\n      </div>\n    </div>\n  </div>\n</div>\n')}])}(),angular.module("colorpicker.module",[]).factory("Helper",function(){"use strict";return{closestSlider:function(t){return(t.matches||t.webkitMatchesSelector||t.mozMatchesSelector||t.msMatchesSelector).bind(t)("I")?t.parentNode:t},getOffset:function(t,e){for(var n=0,a=0,i=t.getBoundingClientRect();t&&!isNaN(t.offsetLeft)&&!isNaN(t.offsetTop);)e||"BODY"!==t.tagName?(n+=t.scrollLeft,a+=t.scrollTop):(n+=document.documentElement.scrollLeft||t.scrollLeft,a+=document.documentElement.scrollTop||t.scrollTop),t=t.offsetParent;return{top:i.top+window.pageYOffset,left:i.left+window.pageXOffset,scrollX:n,scrollY:a}},stringParsers:[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,parse:function(t){return[t[1],t[2],t[3],t[4]]}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,parse:function(t){return[2.55*t[1],2.55*t[2],2.55*t[3],t[4]]}},{re:/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,parse:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]}},{re:/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/,parse:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]}}]}}).factory("Color",["Helper",function(o){"use strict";return{value:{h:1,s:1,b:1,a:1},rgb:function(){var t=this.toRGB();return"rgb("+t.r+","+t.g+","+t.b+")"},rgba:function(){var t=this.toRGB();return"rgba("+t.r+","+t.g+","+t.b+","+t.a+")"},hex:function(){return this.toHex()},RGBtoHSB:function(t,e,n,a){var i,o;return t/=255,e/=255,n/=255,{h:((0===(o=(i=Math.max(t,e,n))-Math.min(t,e,n))?null:i===t?(e-n)/o:i===e?(n-t)/o+2:(t-e)/o+4)+360)%6*60/360||1,s:0===o?0:o/i,b:i,a:a||1}},setColor:function(t){for(var e in t=t?t.toLowerCase():t,o.stringParsers)if(o.stringParsers.hasOwnProperty(e)){var n=o.stringParsers[e],a=n.re.exec(t),i=a&&n.parse(a);if(i)return this.value=this.RGBtoHSB.apply(null,i),!1}},setHue:function(t){this.value.h=1-t},setSaturation:function(t){this.value.s=t},setLightness:function(t){this.value.b=1-t},setAlpha:function(t){this.value.a=parseInt(100*(1-t),10)/100},toRGB:function(t,e,n,a){var i,o,r,s,l;return t||(t=this.value.h,e=this.value.s,n=this.value.b),t=(t*=360)%360/60,i=o=r=n-(l=n*e),i+=[l,s=l*(1-Math.abs(t%2-1)),0,0,s,l][t=~~t],o+=[s,l,l,s,0,0][t],r+=[0,0,s,l,l,s][t],{r:Math.round(255*i),g:Math.round(255*o),b:Math.round(255*r),a:a||this.value.a}},toHex:function(t,e,n,a){var i=this.toRGB(t,e,n,a);return"#"+(1<<24|parseInt(i.r,10)<<16|parseInt(i.g,10)<<8|parseInt(i.b,10)).toString(16).substr(1)}}}]).factory("Slider",["Helper",function(s){"use strict";var l={maxLeft:0,maxTop:0,callLeft:null,callTop:null,knob:{top:0,left:0}},c={};return{getSlider:function(){return l},getLeftPosition:function(t){return Math.max(0,Math.min(l.maxLeft,l.left+((t.pageX||c.left)-c.left)))},getTopPosition:function(t){return Math.max(0,Math.min(l.maxTop,l.top+((t.pageY||c.top)-c.top)))},setSlider:function(t,e){var n=s.closestSlider(t.target),a=s.getOffset(n,e),i=n.getBoundingClientRect(),o=t.clientX-i.left,r=t.clientY-i.top;l.knob=n.children[0].style,l.left=t.pageX-a.left-window.pageXOffset+a.scrollX,l.top=t.pageY-a.top-window.pageYOffset+a.scrollY,c={left:t.pageX-(o-l.left),top:t.pageY-(r-l.top)}},setSaturation:function(t,e){l={maxLeft:100,maxTop:100,callLeft:"setSaturation",callTop:"setLightness"},this.setSlider(t,e)},setHue:function(t,e){l={maxLeft:0,maxTop:100,callLeft:!1,callTop:"setHue"},this.setSlider(t,e)},setAlpha:function(t,e){l={maxLeft:0,maxTop:100,callLeft:!1,callTop:"setAlpha"},this.setSlider(t,e)},setKnob:function(t,e){l.knob.top=t+"px",l.knob.left=e+"px"}}}]).directive("colorpicker",["$document","$compile","Color","Slider","Helper",function(M,A,P,I,F){"use strict";return{require:"?ngModel",restrict:"A",link:function(o,r,n,s){var t,l=n.colorpicker?n.colorpicker:"hex",e=!!angular.isDefined(n.backgroundSetting),a=angular.isDefined(n.colorpickerPosition)?n.colorpickerPosition:"bottom",i=!!angular.isDefined(n.colorpickerInline)&&n.colorpickerInline,c=!!angular.isDefined(n.colorpickerFixedPosition)&&n.colorpickerFixedPosition,u=angular.isDefined(n.colorpickerParent)?r.parent():angular.element(document.body),d=!!angular.isDefined(n.colorpickerWithInput)&&n.colorpickerWithInput,p=d?'<input type="text" name="colorpicker-input" spellcheck="false">':"",f=e?'<div class="colorpicker dropdown"><div class="dropdown-menu"><colorpicker-saturation><i></i></colorpicker-saturation><colorpicker-hue><i></i></colorpicker-hue><colorpicker-alpha><i></i></colorpicker-alpha>'+p+"</div></div>":'<div class="colorpicker dropdown"><div class="dropdown-menu"><colorpicker-saturation><i></i></colorpicker-saturation><colorpicker-hue><i></i></colorpicker-hue><colorpicker-alpha><i></i></colorpicker-alpha><colorpicker-preview></colorpicker-preview>'+p+(i?"":'<button type="button" class="close close-colorpicker">&times;</button>')+"</div></div>",m=angular.element(f),h=P,g=m.find("colorpicker-hue"),v=m.find("colorpicker-saturation"),b=m.find("colorpicker-preview"),y=m.find("i");if(A(m)(o),d){var $=m.find("input");$.on("mousedown",function(t){t.stopPropagation()}).on("keyup",function(){var t=this.value;r.val(t),s&&s.$modelValue!==t&&(o.$apply(s.$setViewValue(t)),D(!0))})}function w(){M.on("mousemove",k),M.on("mouseup",C)}function x(){try{b.css("backgroundColor",h[l]())}catch(t){b.css("backgroundColor",h.toHex())}v.css("backgroundColor",h.toHex(h.value.h,1,1,1)),"rgba"===l&&(t.css.backgroundColor=h.toHex())}function k(t){var e=I.getLeftPosition(t),n=I.getTopPosition(t),a=I.getSlider();I.setKnob(n,e),a.callLeft&&h[a.callLeft].call(h,e/100),a.callTop&&h[a.callTop].call(h,n/100),x();var i=h[l]();return r.val(i),s&&o.$apply(s.$setViewValue(i)),d&&$.val(i),!1}function C(){E("colorpicker-selected"),M.off("mousemove",k),M.off("mouseup",C)}function D(t){h.setColor(r.val()),d&&!t&&$.val(r.val()),y.eq(0).css({left:100*h.value.s+"px",top:100-100*h.value.b+"px"}),y.eq(1).css("top",100*(1-h.value.h)+"px"),y.eq(2).css("top",100*(1-h.value.a)+"px"),x()}function T(){O()}function S(){var t,e;m.hasClass("colorpicker-visible")||(D(),m.addClass("colorpicker-visible").css((e=F.getOffset(r[0]),angular.isDefined(n.colorpickerParent)&&(e.left=0,e.top=0),"top"===a?t={top:e.top-147,left:e.left}:"right"===a?t={top:e.top,left:e.left+126}:"bottom"===a?t={top:e.top+r[0].offsetHeight+2,left:e.left}:"left"===a&&(t={top:e.top,left:e.left-150}),{top:t.top+"px",left:t.left+"px"})),E("colorpicker-shown"),!1===i&&M.on("mousedown",T),n.colorpickerIsOpen&&(o[n.colorpickerIsOpen]=!0,o.$$phase||o.$digest()))}function E(t){s&&o.$emit(t,{name:n.ngModel,value:s.$modelValue})}function O(){m.hasClass("colorpicker-visible")&&(m.removeClass("colorpicker-visible"),E("colorpicker-closed"),M.off("mousedown",T),n.colorpickerIsOpen&&(o[n.colorpickerIsOpen]=!1,o.$$phase||o.$digest()))}"rgba"===l&&(m.addClass("alpha"),(t=m.find("colorpicker-alpha")).on("click",function(t){I.setAlpha(t,c),k(t)}).on("mousedown",function(t){I.setAlpha(t,c),w()}).on("mouseup",function(t){E("colorpicker-selected-alpha")})),g.on("click",function(t){I.setHue(t,c),k(t)}).on("mousedown",function(t){I.setHue(t,c),w()}).on("mouseup",function(t){E("colorpicker-selected-hue")}),v.on("click",function(t){I.setSaturation(t,c),k(t),angular.isDefined(n.colorpickerCloseOnSelect)&&O()}).on("mousedown",function(t){I.setSaturation(t,c),w()}).on("mouseup",function(t){E("colorpicker-selected-saturation")}),c&&m.addClass("colorpicker-fixed-position"),m.addClass("colorpicker-position-"+a),"true"===i&&m.addClass("colorpicker-inline"),u.append(m),s&&(s.$render=function(){r.val(s.$viewValue),D()}),r.on("blur keyup change",function(){D()}),r.on("$destroy",function(){m.remove()}),!1===i?r.on("click",S):S(),m.on("mousedown",function(t){t.stopPropagation(),t.preventDefault()}),m.find("button").on("click",function(){O()}),n.colorpickerIsOpen&&o.$watch(n.colorpickerIsOpen,function(t){!0===t?S():!1===t&&O()})}}}]),angular.module("ui.tinymce",[]).value("uiTinymceConfig",{}).directive("uiTinymce",["$rootScope","$compile","$timeout","$window","$sce","uiTinymceConfig","uiTinymceService",function(g,v,b,y,$,w,x){return(w=w||{}).baseUrl&&(tinymce.baseURL=w.baseUrl),{require:["ngModel","^?form"],priority:599,link:function(o,r,s,t){if(y.tinymce){var e,n,a=t[0],i=t[1]||null,l={debounce:!0},c=function(t){var e=t.getContent({format:l.format}).trim();e=$.trustAsHtml(e),a.$setViewValue(e),g.$$phase||o.$digest()},u=x.getUniqueId();s.$set("id",u),e={},angular.extend(e,o.$eval(s.uiTinymce));var d,p=function(e){b.cancel(d),d=b(function(){var t;(t=e).isDirty()&&(t.save(),c(t))},400)},f={setup:function(t){t.on("init",function(){a.$render(),a.$setPristine(),a.$setUntouched(),i&&i.$setPristine()}),t.on("ExecCommand change NodeChange ObjectResized",function(){if(!l.debounce)return t.save(),void c(t);p(t)}),t.on("blur",function(){r[0].blur(),a.$setTouched(),g.$$phase||o.$digest()}),t.on("remove",function(){r.remove()}),w.setup&&w.setup(t,{updateView:c}),e.setup&&e.setup(t,{updateView:c})},format:e.format||"html",selector:"#"+s.id};angular.extend(l,w,e,f),b(function(){l.baseURL&&(tinymce.baseURL=l.baseURL);var t=tinymce.init(l);t&&"function"==typeof t.then?t.then(function(){m(o.$eval(s.ngDisabled))}):m(o.$eval(s.ngDisabled))}),a.$formatters.unshift(function(t){return t?$.trustAsHtml(t):""}),a.$parsers.unshift(function(t){return t?$.getTrustedHtml(t):""}),a.$render=function(){h();var t=a.$viewValue?$.getTrustedHtml(a.$viewValue):"";n&&n.getDoc()&&(n.setContent(t),n.fire("change"))},s.$observe("disabled",m),o.$on("$tinymce:refresh",function(t,e){var n=s.id;if(angular.isUndefined(e)||e===n){var a=r.parent(),i=r.clone();i.removeAttr("id"),i.removeAttr("style"),i.removeAttr("aria-hidden"),tinymce.execCommand("mceRemoveEditor",!1,n),a.append(v(i)(o))}}),o.$on("$destroy",function(){h(),n&&(n.remove(),n=null)})}function m(t){t?(h(),n&&n.getBody().setAttribute("contenteditable",!1)):(h(),n&&!n.settings.readonly&&n.getDoc()&&n.getBody().setAttribute("contenteditable",!0))}function h(){n||(n=tinymce.get(s.id))}}}}]).service("uiTinymceService",[function(){return new function(){var t=0;return{getUniqueId:function(){return"ui-tinymce-"+ ++t}}}}]),function(){"use strict";angular.module("risevision.widget.common.widget-button-toolbar",["risevision.common.i18n"]).directive("widgetButtonToolbar",["$templateCache",function(t){return{restrict:"E",scope:{save:"&",cancel:"&",disableSave:"&"},template:t.get("_angular/widget-button-toolbar/widget-button-toolbar.html")}}])}(),function(e){try{e=angular.module("risevision.widget.common.widget-button-toolbar")}catch(t){e=angular.module("risevision.widget.common.widget-button-toolbar",[])}e.run(["$templateCache",function(t){"use strict";t.put("_angular/widget-button-toolbar/widget-button-toolbar.html",'<div class="pull-right">\n  <button id="save" class="btn btn-primary btn-fixed-width" type="button" ng-click="save()" ng-disabled="disableSave()">\n    <span>{{"common.save" | translate}}</span>\n    <i class="fa fa-white fa-check icon-right"></i>\n  </button>\n  <button id="cancel" class="btn btn-default btn-fixed-width" type="button" ng-click="cancel()">\n    <span>{{"common.cancel" | translate}}</span>\n    <i class="fa fa-white fa-times icon-right"></i>\n  </button>\n</div>\n')}])}(),function(){"use strict";angular.module("risevision.widget.common.tooltip",["ui.bootstrap"]).directive("rvTooltip",[function(){return{restrict:"A",link:function(t,e){e.addClass("fa"),e.addClass("fa-question-circle"),e.addClass("fa-lg")}}}])}();var config={};"undefined"!=typeof angular&&(angular.module("risevision.widget.rss.config",[]).value("layout4x1","https://s3.amazonaws.com/widget-rss/1.0.0/dist/layout-4x1.html").value("layout2x1","https://s3.amazonaws.com/widget-rss/1.0.0/dist/layout-2x1.html").value("layout1x2","https://s3.amazonaws.com/widget-rss/1.0.0/dist/layout-1x2.html"),angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json")),angular.module("risevision.widget.rss.settings",["risevision.common.i18n","risevision.widget.rss.config","risevision.widget.common","risevision.widget.common.widget-button-toolbar","risevision.widget.common.tooltip","risevision.widget.common.font-setting","risevision.widget.common.transition-setting","colorpicker.module"]),angular.module("risevision.widget.common",[]),angular.module("risevision.widget.common").controller("settingsController",["$scope","settingsSaver","settingsGetter","settingsCloser",function(a,t,e,n){a.settings={params:{},additionalParams:{}},a.alerts=[],a.getAdditionalParam=function(t,e){var n=a.settings.additionalParams[t];return angular.isUndefined(n)?e:n},a.setAdditionalParam=function(t,e){a.settings.additionalParams[t]=e},a.loadAdditionalParams=function(){e.getAdditionalParams().then(function(t){a.settings.additionalParams=t,a.$broadcast("loadAdditionalParams",t)},function(t){alert(t)})},a.setAdditionalParams=function(t,e){a.settings.additionalParams[t]=e},a.saveSettings=function(){a.alerts=[],a.$broadcast("collectAdditionalParams"),t.saveSettings(a.settings).then(function(){},function(t){a.alerts=t.alerts})},a.closeSettings=function(){n.closeSettings().then(function(){},function(t){a.alerts=t.alerts})},a.settings.params=e.getParams(),a.loadAdditionalParams()}]).directive("scrollOnAlerts",function(){return{restrict:"A",scope:!1,link:function(t,n){t.$watchCollection("alerts",function(t,e){0<t.length&&0===e.length&&$("body").animate({scrollTop:n.offset().top},"fast")})}}}),angular.module("risevision.widget.common").constant("STORAGE_FILE_URL_BASE","storage.googleapis.com/risemedialibrary-").constant("STORAGE_FOLDER_URL_BASE","googleapis.com/storage/").factory("commonSettings",["$log","STORAGE_FILE_URL_BASE","STORAGE_FOLDER_URL_BASE",function(t,c,u){return{getStorageUrlData:function(t){var e,n,a,i,o={};function r(t){return-1!==t.indexOf(c)?"file":-1!==t.indexOf(u)?"folder":null}function s(t){var e=t.split("risemedialibrary-");return e[1].slice(0,e[1].indexOf("/"))}if("file"===r(t))e=t.split(c)[1],n=(e=decodeURIComponent(e.slice(e.indexOf("/")+1))).split("/"),o.companyId=s(t),o.fileName=n.pop(),o.folder=0<n.length?n.join("/"):"",""!==o.folder&&(o.folder+="/");else if("folder"===r(t)){a=t.split("?");for(var l=0;l<a.length;l++)if("prefix"===(i=a[l].split("="))[0]&&void 0!==i[1]&&""!==i[1]){o.companyId=s(t),o.folder=decodeURIComponent(i[1]),o.fileName="";break}}return o}}}]),angular.module("risevision.widget.common").factory("gadgetsApi",["$window",function(t){return t.gadgets}]),angular.module("risevision.widget.common").factory("googleFontLoader",["$http","angularLoad",function(t,l){var e={},c=[];function i(){for(var t="",e="",n="",a=[],i=!1,o=",sans-serif;",r=["Buda","Coda Caption","Open Sans Condensed","UnifrakturCook","Molle"],s=0;s<c.length;s++)t=c[s],-1===r.indexOf(t)&&(n="//fonts.googleapis.com/css?family="+t,l.loadCSS(n),a.push(n),/\s/.test(t)&&(i=!0),e+=i?t+"='"+t+"'"+o:t+"="+t+o);return{fonts:e,urls:a}}return e.getGoogleFonts=function(){return 0===c.length?t.get("https://www.googleapis.com/webfonts/v1/webfonts?key=AIzaSyBXxVK_IOV7LNQMuVVo_l7ZvN53ejN86zY&sort=alpha",{cache:!0}).then(function(t){var e=null;if(t.data&&t.data.items){for(var n=0,a=t.data.items.length;n<a;n++)(e=t.data.items[n]).subsets&&1===e.subsets.length&&"khmer"===e.subsets[0].toLowerCase()||c.push(e.family);return i()}}):i()},e.getFontsUsed=function(e){var n=[];return angular.forEach(c,function(t){-1!==e.indexOf(t)&&n.push(t)}),n},e}]),angular.module("risevision.widget.common").service("i18nLoader",["$window","$q",function(t,e){var n=e.defer();t.i18n.init({fallbackLng:"en",resGetPath:"locales/__ns_____lng__.json"},function(){n.resolve(t.i18n)}),this.get=function(){return n.promise}}]),angular.module("risevision.widget.common").factory("imageValidator",["$q",function(a){return{isImage:function(t){var e=a.defer(),n=new Image;return n.onload=function(){e.resolve(!0)},n.onerror=function(){e.resolve(!1)},n.src=t,e.promise}}}]),angular.module("risevision.widget.common").service("settingsSaver",["$q","$log","gadgetsApi","settingsParser",function(l,c,u,d){this.saveSettings=function(e,t){var n,a,i=l.defer(),o=[],r="";n=e,delete(a=angular.copy(n)).params.id,delete a.params.companyId,delete a.params.rsW,delete a.params.rsH,e=a,t&&(o=t(e)),0<o.length&&(c.debug("Validation failed.",o),i.reject({alerts:o})),e.params.hasOwnProperty("layoutURL")&&(r+=e.params.layoutURL+"?",delete e.params.layoutURL),r+=d.encodeParams(e.params);var s=d.encodeAdditionalParams(e.additionalParams);return u.rpc.call("","rscmd_saveSettings",function(t){c.debug("encoded settings",JSON.stringify(t)),c.debug("Settings saved. ",e),i.resolve(t)},{params:r,additionalParams:s}),i.promise}}]).service("settingsGetter",["$q","gadgetsApi","$log","settingsParser","$window","defaultSettings",function(t,a,i,o,e,r){this.getAdditionalParams=function(){var e=t.defer(),n=r.additionalParams||{};return a.rpc.call("","rscmd_getAdditionalParams",function(t){t=t?o.parseAdditionalParams(t):{},i.debug("getAdditionalParams returns ",t),e.resolve($.extend(!0,n,t))}),e.promise},this.getParams=function(){var t=r.params||{};return angular.extend(t,o.parseParams(e.location.search))}}]).service("settingsParser",[function(){this.parseAdditionalParams=function(t){return t?JSON.parse(t):{}},this.encodeAdditionalParams=function(t){return JSON.stringify(t)},this.encodeParams=function(t){var e=[];for(var n in t){var a;if(t.hasOwnProperty(n))a="object"==typeof t[n]?JSON.stringify(t[n]):t[n],e.push("up_"+encodeURIComponent(n)+"="+encodeURIComponent(a))}return e.join("&")},this.parseParams=function(t){"?"===t[0]&&(t=t.slice(1));for(var e,n={},a=t.split("&"),i=0;i<a.length;i++){var o=a[i].split("="),r=0===(e=decodeURIComponent(o[0])).indexOf("up_")?e.slice(3):null;if(r)try{n[r]=JSON.parse(decodeURIComponent(o[1]))}catch(t){n[r]=decodeURIComponent(o[1])}}return n}}]).service("settingsCloser",["$q","$log","gadgetsApi",function(e,t,n){this.closeSettings=function(){var t=e.defer();return n.rpc.call("","rscmd_closeSettings",function(){t.resolve(!0)}),t.promise}}]).value("defaultSettings",{}),function(t){"use strict";angular.module("risevision.widget.common.visualization",[]).factory("visualizationApi",["$q","$window",function(t,e){var n,a=t.defer();return{get:function(){return n||(n=a.promise,e.google.visualization?a.resolve(e.google.visualization):e.google.setOnLoadCallback(function(){a.resolve(e.google.visualization)})),n}}}])}(),angular.module("risevision.widget.rss.settings").controller("rssSettingsController",["$scope","$log","feedValidator",function(n,t,e){function a(){return"left"===n.settings.additionalParams.transition.direction&&"scroll"===n.settings.additionalParams.transition.type}n.feedValid=!0,n.requiresAuthentication=!1,n.notAFeed=!1,n.horizontalScrolling=!1,n.validateFeed=function(){e.isValid(n.settings.additionalParams.url).then(function(t){n.feedValid=t})},n.checkWithFeedParser=function(){n.settings.additionalParams.url&&n.settingsForm.rssUrl.$valid?e.isParsable(n.settings.additionalParams.url).then(function(t){"401 Unauthorized"===t?n.requiresAuthentication=!0:"Not a feed"===t&&(n.notAFeed=!0),t||(n.requiresAuthentication=!1,n.notAFeed=!1,n.validateFeed())}):(n.requiresAuthentication=!1,n.notAFeed=!1,n.feedValid=!0)},n.$on("urlFieldBlur",function(){n.checkWithFeedParser()}),n.$watch("settings.additionalParams.url",function(t,e){void 0===e&&t&&""!==t?n.checkWithFeedParser():void 0!==t&&(n.feedValid=!0,n.requiresAuthentication=!1)}),n.$watch("settings.additionalParams.transition.type",function(t){void 0!==t&&(n.horizontalScrolling=a())}),n.$watch("settings.additionalParams.transition.direction",function(t){void 0!==t&&(n.horizontalScrolling=a())}),n.$watch("settings.additionalParams.dataSelection.showTitle",function(t){void 0===t||""===t||t||(n.settings.additionalParams.headline.fontStyle={})}),n.$watch("settings.additionalParams.dataSelection.showTimestamp",function(t){void 0===t||""===t||t||(n.settings.additionalParams.timestamp.fontStyle={})}),n.$watch("settings.additionalParams.dataSelection.showAuthor",function(t){void 0===t||""===t||t||(n.settings.additionalParams.author.fontStyle={})}),n.$watch("settings.additionalParams.dataSelection.showDescription",function(t){void 0!==t&&"snippet"!==t&&(n.settings.additionalParams.dataSelection.snippetLength?n.settings.additionalParams.dataSelection.snippetLength=n.settings.additionalParams.dataSelection.snippetLength:n.settings.additionalParams.dataSelection.snippetLength=120)})}]).filter("escape",function(){return window.encodeURIComponent}).value("defaultSettings",{params:{},additionalParams:{url:"",itemsInQueue:5,itemsToShow:1,headline:{fontStyle:{font:{family:"verdana,geneva,sans-serif",type:"standard",url:""},size:"24px",customSize:"",align:"left",bold:!0,italic:!1,underline:!1,forecolor:"black",backcolor:"transparent"}},story:{fontStyle:{font:{family:"verdana,geneva,sans-serif",type:"standard",url:""},size:"18px",customSize:"",align:"left",bold:!0,italic:!1,underline:!1,forecolor:"black",backcolor:"transparent"}},timestamp:{fontStyle:{font:{family:"verdana,geneva,sans-serif",type:"standard",url:""},size:"14px",customSize:"",align:"left",bold:!0,italic:!1,underline:!1,forecolor:"#969696",backcolor:"transparent"}},author:{fontStyle:{font:{family:"verdana,geneva,sans-serif",type:"standard",url:""},size:"14px",customSize:"",align:"left",bold:!0,italic:!1,underline:!1,forecolor:"#969696",backcolor:"transparent"}},transition:{},dataSelection:{showTitle:!0,showTimestamp:!0,showAuthor:!0,showImage:!0,showDescription:"snippet",snippetLength:120},layout:"layout-4x1",layoutUrl:"",separator:{show:!0,size:1,color:"rgb(238,238,238)"}}}),angular.module("risevision.widget.rss.settings").factory("feedValidator",["$log","$http","$window",function(e,n,a){return{isValid:function(t){return n({method:"GET",url:"https://proxy.risevision.com/https://validator.w3.org/feed/check.cgi?url="+t+"&output=soap12"}).then(function(t){if(t&&t.data)return a.xmlToJSON.parseString(t.data).Envelope[0].Body[0].feedvalidationresponse[0].validity[0]._text},function(t){e.debug("Validation request failed with status code "+t.status+": "+t.statusText)})},isParsable:function(t){return n({method:"GET",url:"https://feed-parser.risevision.com/"+t}).then(function(t){return t&&t.data&&t.data.Error?t.data.Error:null},function(t){return e.debug("Feed parser check failed with status code "+t.status+": "+t.statusText),null})}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
