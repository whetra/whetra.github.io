angular.module("pascalprecht.translate",["ng"]).run(["$translate",function(t){var e=t.storageKey(),n=t.storage(),a=function(){var a=t.preferredLanguage();angular.isString(a)?t.use(a):n.put(e,t.use())};n?n.get(e)?t.use(n.get(e))["catch"](a):a():angular.isString(t.preferredLanguage())&&t.use(t.preferredLanguage())}]),angular.module("pascalprecht.translate").provider("$translate",["$STORAGE_KEY",function(t){var e,n,a,i,o,r,s,l,c,u,d,p,f,m,h,g={},v=[],b=t,y=[],$=!1,w="translate-cloak",k=!1,x=".",C="2.5.2",D=function(){var t,e,n=window.navigator,a=["language","browserLanguage","systemLanguage","userLanguage"];if(angular.isArray(n.languages))for(t=0;t<n.languages.length;t++)if(e=n.languages[t],e&&e.length)return e;for(t=0;t<a.length;t++)if(e=n[a[t]],e&&e.length)return e;return null};D.displayName="angular-translate/service: getFirstBrowserLanguage";var T=function(){return(D()||"").split("-").join("_")};T.displayName="angular-translate/service: getLocale";var S=function(t,e){for(var n=0,a=t.length;a>n;n++)if(t[n]===e)return n;return-1},E=function(){return this.replace(/^\s+|\s+$/g,"")},O=function(t){for(var e=[],a=angular.lowercase(t),i=0,o=v.length;o>i;i++)e.push(angular.lowercase(v[i]));if(S(e,a)>-1)return t;if(n){var r;for(var s in n){var l=!1,c=Object.prototype.hasOwnProperty.call(n,s)&&angular.lowercase(s)===angular.lowercase(t);if("*"===s.slice(-1)&&(l=s.slice(0,-1)===t.slice(0,s.length-1)),(c||l)&&(r=n[s],S(e,angular.lowercase(r))>-1))return r}}var u=t.split("_");return u.length>1&&S(e,angular.lowercase(u[0]))>-1?u[0]:t},M=function(t,e){if(!t&&!e)return g;if(t&&!e){if(angular.isString(t))return g[t]}else angular.isObject(g[t])||(g[t]={}),angular.extend(g[t],A(e));return this};this.translations=M,this.cloakClassName=function(t){return t?(w=t,this):w};var A=function(t,e,n,a){var i,o,r,s;e||(e=[]),n||(n={});for(i in t)Object.prototype.hasOwnProperty.call(t,i)&&(s=t[i],angular.isObject(s)?A(s,e.concat(i),n,i):(o=e.length?""+e.join(x)+x+i:i,e.length&&i===a&&(r=""+e.join(x),n[r]="@:"+o),n[o]=s));return n};this.addInterpolation=function(t){return y.push(t),this},this.useMessageFormatInterpolation=function(){return this.useInterpolation("$translateMessageFormatInterpolation")},this.useInterpolation=function(t){return u=t,this},this.useSanitizeValueStrategy=function(t){return $=t,this},this.preferredLanguage=function(t){return P(t),this};var P=function(t){return t&&(e=t),e};this.translationNotFoundIndicator=function(t){return this.translationNotFoundIndicatorLeft(t),this.translationNotFoundIndicatorRight(t),this},this.translationNotFoundIndicatorLeft=function(t){return t?(f=t,this):f},this.translationNotFoundIndicatorRight=function(t){return t?(m=t,this):m},this.fallbackLanguage=function(t){return I(t),this};var I=function(t){return t?(angular.isString(t)?(i=!0,a=[t]):angular.isArray(t)&&(i=!1,a=t),angular.isString(e)&&S(a,e)<0&&a.push(e),this):i?a[0]:a};this.use=function(t){if(t){if(!g[t]&&!d)throw new Error("$translateProvider couldn't find translationTable for langKey: '"+t+"'");return o=t,this}return o};var F=function(t){return t?(b=t,void 0):l?l+b:b};this.storageKey=F,this.useUrlLoader=function(t,e){return this.useLoader("$translateUrlLoader",angular.extend({url:t},e))},this.useStaticFilesLoader=function(t){return this.useLoader("$translateStaticFilesLoader",t)},this.useLoader=function(t,e){return d=t,p=e||{},this},this.useLocalStorage=function(){return this.useStorage("$translateLocalStorage")},this.useCookieStorage=function(){return this.useStorage("$translateCookieStorage")},this.useStorage=function(t){return s=t,this},this.storagePrefix=function(t){return t?(l=t,this):t},this.useMissingTranslationHandlerLog=function(){return this.useMissingTranslationHandler("$translateMissingTranslationHandlerLog")},this.useMissingTranslationHandler=function(t){return c=t,this},this.usePostCompiling=function(t){return k=!!t,this},this.determinePreferredLanguage=function(t){var n=t&&angular.isFunction(t)?t():T();return e=v.length?O(n):n,this},this.registerAvailableLanguageKeys=function(t,e){return t?(v=t,e&&(n=e),this):v},this.useLoaderCache=function(t){return t===!1?h=void 0:t===!0?h=!0:"undefined"==typeof t?h="$translationCache":t&&(h=t),this},this.$get=["$log","$injector","$rootScope","$q",function(t,n,l,v){var x,D,T,L=n.get(u||"$translateDefaultInterpolation"),U=!1,N={},V={},H=function(t,n,i){if(angular.isArray(t)){var r=function(t){for(var e={},a=[],o=function(t){var a=v.defer(),o=function(n){e[t]=n,a.resolve([t,n])};return H(t,n,i).then(o,o),a.promise},r=0,s=t.length;s>r;r++)a.push(o(t[r]));return v.all(a).then(function(){return e})};return r(t)}var l=v.defer();t&&(t=E.apply(t));var c=function(){var t=e?V[e]:V[o];if(D=0,s&&!t){var n=x.get(b);if(t=V[n],a&&a.length){var i=S(a,n);D=0===i?1:0,S(a,e)<0&&a.push(e)}}return t}();return c?c.then(function(){J(t,n,i).then(l.resolve,l.reject)},l.reject):J(t,n,i).then(l.resolve,l.reject),l.promise},z=function(t){return f&&(t=[f,t].join(" ")),m&&(t=[t,m].join(" ")),t},j=function(t){o=t,l.$emit("$translateChangeSuccess",{language:t}),s&&x.put(H.storageKey(),o),L.setLocale(o),angular.forEach(N,function(t,e){N[e].setLocale(o)}),l.$emit("$translateChangeEnd",{language:t})},R=function(t){if(!t)throw"No language key specified for loading.";var e=v.defer();l.$emit("$translateLoadingStart",{language:t}),U=!0;var a=h;"string"==typeof a&&(a=n.get(a));var i=angular.extend({},p,{key:t,$http:angular.extend({},{cache:a},p.$http)});return n.get(d)(i).then(function(n){var a={};l.$emit("$translateLoadingSuccess",{language:t}),angular.isArray(n)?angular.forEach(n,function(t){angular.extend(a,A(t))}):angular.extend(a,A(n)),U=!1,e.resolve({key:t,table:a}),l.$emit("$translateLoadingEnd",{language:t})},function(t){l.$emit("$translateLoadingError",{language:t}),e.reject(t),l.$emit("$translateLoadingEnd",{language:t})}),e.promise};if(s&&(x=n.get(s),!x.get||!x.put))throw new Error("Couldn't use storage '"+s+"', missing get() or put() method!");angular.isFunction(L.useSanitizeValueStrategy)&&L.useSanitizeValueStrategy($),y.length&&angular.forEach(y,function(t){var a=n.get(t);a.setLocale(e||o),angular.isFunction(a.useSanitizeValueStrategy)&&a.useSanitizeValueStrategy($),N[a.getInterpolationIdentifier()]=a});var _=function(t){var e=v.defer();return Object.prototype.hasOwnProperty.call(g,t)?e.resolve(g[t]):V[t]?V[t].then(function(t){M(t.key,t.table),e.resolve(t.table)},e.reject):e.reject(),e.promise},q=function(t,e,n,a){var i=v.defer();return _(t).then(function(r){Object.prototype.hasOwnProperty.call(r,e)?(a.setLocale(t),i.resolve(a.interpolate(r[e],n)),a.setLocale(o)):i.reject()},i.reject),i.promise},B=function(t,e,n,a){var i,r=g[t];return r&&Object.prototype.hasOwnProperty.call(r,e)&&(a.setLocale(t),i=a.interpolate(r[e],n),a.setLocale(o)),i},W=function(t){if(c){var e=n.get(c)(t,o);return void 0!==e?e:t}return t},G=function(t,e,n,i){var o=v.defer();if(t<a.length){var r=a[t];q(r,e,n,i).then(o.resolve,function(){G(t+1,e,n,i).then(o.resolve)})}else o.resolve(W(e));return o.promise},K=function(t,e,n,i){var o;if(t<a.length){var r=a[t];o=B(r,e,n,i),o||(o=K(t+1,e,n,i))}return o},Y=function(t,e,n){return G(T>0?T:D,t,e,n)},X=function(t,e,n){return K(T>0?T:D,t,e,n)},J=function(t,e,n){var i=v.defer(),r=o?g[o]:g,s=n?N[n]:L;if(r&&Object.prototype.hasOwnProperty.call(r,t)){var l=r[t];"@:"===l.substr(0,2)?H(l.substr(2),e,n).then(i.resolve,i.reject):i.resolve(s.interpolate(l,e))}else{var u;c&&!U&&(u=W(t)),o&&a&&a.length?Y(t,e,s).then(function(t){i.resolve(t)},function(t){i.reject(z(t))}):c&&!U&&u?i.resolve(u):i.reject(z(t))}return i.promise},Q=function(t,e,n){var i,r=o?g[o]:g,s=n?N[n]:L;if(r&&Object.prototype.hasOwnProperty.call(r,t)){var l=r[t];i="@:"===l.substr(0,2)?Q(l.substr(2),e,n):s.interpolate(l,e)}else{var u;c&&!U&&(u=W(t)),o&&a&&a.length?(D=0,i=X(t,e,s)):i=c&&!U&&u?u:z(t)}return i};if(H.preferredLanguage=function(t){return t&&P(t),e},H.cloakClassName=function(){return w},H.fallbackLanguage=function(t){if(void 0!==t&&null!==t){if(I(t),d&&a&&a.length)for(var e=0,n=a.length;n>e;e++)V[a[e]]||(V[a[e]]=R(a[e]));H.use(H.use())}return i?a[0]:a},H.useFallbackLanguage=function(t){if(void 0!==t&&null!==t)if(t){var e=S(a,t);e>-1&&(T=e)}else T=0},H.proposedLanguage=function(){return r},H.storage=function(){return x},H.use=function(t){if(!t)return o;var e=v.defer();l.$emit("$translateChangeStart",{language:t});var n=O(t);return n&&(t=n),g[t]||!d||V[t]?(e.resolve(t),j(t)):(r=t,V[t]=R(t).then(function(n){return M(n.key,n.table),e.resolve(n.key),j(n.key),r===t&&(r=void 0),n},function(t){r===t&&(r=void 0),l.$emit("$translateChangeError",{language:t}),e.reject(t),l.$emit("$translateChangeEnd",{language:t})})),e.promise},H.storageKey=function(){return F()},H.isPostCompilingEnabled=function(){return k},H.refresh=function(t){function e(){i.resolve(),l.$emit("$translateRefreshEnd",{language:t})}function n(){i.reject(),l.$emit("$translateRefreshEnd",{language:t})}if(!d)throw new Error("Couldn't refresh translation table, no loader registered!");var i=v.defer();if(l.$emit("$translateRefreshStart",{language:t}),t)g[t]?R(t).then(function(n){M(n.key,n.table),t===o&&j(o),e()},n):n();else{var r=[],s={};if(a&&a.length)for(var c=0,u=a.length;u>c;c++)r.push(R(a[c])),s[a[c]]=!0;o&&!s[o]&&r.push(R(o)),v.all(r).then(function(t){angular.forEach(t,function(t){g[t.key]&&delete g[t.key],M(t.key,t.table)}),o&&j(o),e()})}return i.promise},H.instant=function(t,n,i){if(null===t||angular.isUndefined(t))return t;if(angular.isArray(t)){for(var r={},s=0,l=t.length;l>s;s++)r[t[s]]=H.instant(t[s],n,i);return r}if(angular.isString(t)&&t.length<1)return t;t&&(t=E.apply(t));var u,d=[];e&&d.push(e),o&&d.push(o),a&&a.length&&(d=d.concat(a));for(var p=0,f=d.length;f>p;p++){var m=d[p];if(g[m]&&"undefined"!=typeof g[m][t]&&(u=Q(t,n,i)),"undefined"!=typeof u)break}return u||""===u||(u=L.interpolate(t,n),c&&!U&&(u=W(t))),u},H.versionInfo=function(){return C},H.loaderCache=function(){return h},d&&(angular.equals(g,{})&&H.use(H.use()),a&&a.length))for(var Z=function(t){return M(t.key,t.table),l.$emit("$translateChangeEnd",{language:t.key}),t},te=0,ee=a.length;ee>te;te++)V[a[te]]=R(a[te]).then(Z);return H}]}]),angular.module("pascalprecht.translate").factory("$translateDefaultInterpolation",["$interpolate",function(t){var e,n={},a="default",i=null,o={escaped:function(t){var e={};for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=angular.element("<div></div>").text(t[n]).html());return e}},r=function(t){var e;return e=angular.isFunction(o[i])?o[i](t):t};return n.setLocale=function(t){e=t},n.getInterpolationIdentifier=function(){return a},n.useSanitizeValueStrategy=function(t){return i=t,this},n.interpolate=function(e,n){return i&&(n=r(n)),t(e)(n||{})},n}]),angular.module("pascalprecht.translate").constant("$STORAGE_KEY","NG_TRANSLATE_LANG_KEY"),angular.module("pascalprecht.translate").directive("translate",["$translate","$q","$interpolate","$compile","$parse","$rootScope",function(t,e,n,a,i,o){return{restrict:"AE",scope:!0,compile:function(e,r){var s=r.translateValues?r.translateValues:void 0,l=r.translateInterpolation?r.translateInterpolation:void 0,c=e[0].outerHTML.match(/translate-value-+/i),u="^(.*)("+n.startSymbol()+".*"+n.endSymbol()+")(.*)",d="^(.*)"+n.startSymbol()+"(.*)"+n.endSymbol()+"(.*)";return function(e,p,f){e.interpolateParams={},e.preText="",e.postText="";var m={},h=function(t){if(angular.equals(t,"")||!angular.isDefined(t)){var a=p.text().match(u);angular.isArray(a)?(e.preText=a[1],e.postText=a[3],m.translate=n(a[2])(e.$parent),watcherMatches=p.text().match(d),angular.isArray(watcherMatches)&&watcherMatches[2]&&watcherMatches[2].length&&e.$watch(watcherMatches[2],function(t){m.translate=t,$()})):m.translate=p.text().replace(/^\s+|\s+$/g,"")}else m.translate=t;$()},g=function(t){f.$observe(t,function(e){m[t]=e,$()})};f.$observe("translate",function(t){h(t)});for(var v in f)f.hasOwnProperty(v)&&"translateAttr"===v.substr(0,13)&&g(v);if(f.$observe("translateDefault",function(t){e.defaultText=t}),s&&f.$observe("translateValues",function(t){t&&e.$parent.$watch(function(){angular.extend(e.interpolateParams,i(t)(e.$parent))})}),c){var b=function(t){f.$observe(t,function(n){var a=angular.lowercase(t.substr(14,1))+t.substr(15);e.interpolateParams[a]=n})};for(var y in f)Object.prototype.hasOwnProperty.call(f,y)&&"translateValue"===y.substr(0,14)&&"translateValues"!==y&&b(y)}var $=function(){for(var t in m)m.hasOwnProperty(t)&&m[t]&&w(t,m[t],e,e.interpolateParams)},w=function(e,n,a,i){t(n,i,l).then(function(t){k(t,a,!0,e)},function(t){k(t,a,!1,e)})},k=function(e,n,i,o){if("translate"===o){i||"undefined"==typeof n.defaultText||(e=n.defaultText),p.html(n.preText+e+n.postText);var s=t.isPostCompilingEnabled(),l="undefined"!=typeof r.translateCompile,c=l&&"false"!==r.translateCompile;(s&&!l||c)&&a(p.contents())(n)}else{i||"undefined"==typeof n.defaultText||(e=n.defaultText);var u=f.$attr[o].substr(15);p.attr(u,e)}};e.$watch("interpolateParams",$,!0);var x=o.$on("$translateChangeSuccess",$);p.text().length&&h(""),$(),e.$on("$destroy",x)}}}}]),angular.module("pascalprecht.translate").directive("translateCloak",["$rootScope","$translate",function(t,e){return{compile:function(n){var a=function(){n.addClass(e.cloakClassName())},i=function(){n.removeClass(e.cloakClassName())},o=t.$on("$translateChangeEnd",function(){i(),o(),o=null});return a(),function(t,n,o){o.translateCloak&&o.translateCloak.length&&o.$observe("translateCloak",function(t){e(t).then(i,a)})}}}}]),angular.module("pascalprecht.translate").filter("translate",["$parse","$translate",function(t,e){var n=function(n,a,i){return angular.isObject(a)||(a=t(a)(this)),e.instant(n,a,i)};return n.$stateful=!0,n}]),function(t,e){"use strict";function n(){this.$get=["$$sanitizeUri",function(t){return function(e){var n=[];return o(e,l(n,function(e,n){return!/^unsafe/.test(t(e,n))})),n.join("")}}]}function a(t){var n=[],a=l(n,e.noop);return a.chars(t),n.join("")}function i(t){var e,n={},a=t.split(",");for(e=0;e<a.length;e++)n[a[e]]=!0;return n}function o(t,n){function a(t,a,o,s){if(a=e.lowercase(a),C[a])for(;y.last()&&D[y.last()];)i("",y.last());x[a]&&y.last()==a&&i("",a),s=$[a]||!!s,s||y.push(a);var l={};o.replace(p,function(t,e,n,a,i){var o=n||a||i||"";l[e]=r(o)}),n.start&&n.start(a,l,s)}function i(t,a){var i,o=0;if(a=e.lowercase(a))for(o=y.length-1;o>=0&&y[o]!=a;o--);if(o>=0){for(i=y.length-1;i>=o;i--)n.end&&n.end(y[i]);y.length=o}}"string"!=typeof t&&(t=null===t||"undefined"==typeof t?"":""+t);var o,s,l,b,y=[],w=t;for(y.last=function(){return y[y.length-1]};t;){if(b="",s=!0,y.last()&&S[y.last()]?(t=t.replace(new RegExp("([\\W\\w]*)<\\s*\\/\\s*"+y.last()+"[^>]*>","i"),function(t,e){return e=e.replace(h,"$1").replace(v,"$1"),n.chars&&n.chars(r(e)),""}),i("",y.last())):(0===t.indexOf("<!--")?(o=t.indexOf("--",4),o>=0&&t.lastIndexOf("-->",o)===o&&(n.comment&&n.comment(t.substring(4,o)),t=t.substring(o+3),s=!1)):g.test(t)?(l=t.match(g),l&&(t=t.replace(l[0],""),s=!1)):m.test(t)?(l=t.match(d),l&&(t=t.substring(l[0].length),l[0].replace(d,i),s=!1)):f.test(t)&&(l=t.match(u),l?(l[4]&&(t=t.substring(l[0].length),l[0].replace(u,a)),s=!1):(b+="<",t=t.substring(1))),s&&(o=t.indexOf("<"),b+=0>o?t:t.substring(0,o),t=0>o?"":t.substring(o),n.chars&&n.chars(r(b)))),t==w)throw c("badparse","The sanitizer was unable to parse the following block of html: {0}",t);w=t}i()}function r(t){return t?(I.innerHTML=t.replace(/</g,"&lt;"),I.textContent):""}function s(t){return t.replace(/&/g,"&amp;").replace(b,function(t){var e=t.charCodeAt(0),n=t.charCodeAt(1);return"&#"+(1024*(e-55296)+(n-56320)+65536)+";"}).replace(y,function(t){return"&#"+t.charCodeAt(0)+";"}).replace(/</g,"&lt;").replace(/>/g,"&gt;")}function l(t,n){var a=!1,i=e.bind(t,t.push);return{start:function(t,o,r){t=e.lowercase(t),!a&&S[t]&&(a=t),a||E[t]!==!0||(i("<"),i(t),e.forEach(o,function(a,o){var r=e.lowercase(o),l="img"===t&&"src"===r||"background"===r;P[r]!==!0||O[r]===!0&&!n(a,l)||(i(" "),i(o),i('="'),i(s(a)),i('"'))}),i(r?"/>":">"))},end:function(t){t=e.lowercase(t),a||E[t]!==!0||(i("</"),i(t),i(">")),t==a&&(a=!1)},chars:function(t){a||i(s(t))}}}var c=e.$$minErr("$sanitize"),u=/^<((?:[a-zA-Z])[\w:-]*)((?:\s+[\w:-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*(>?)/,d=/^<\/\s*([\w:-]+)[^>]*>/,p=/([\w:-]+)(?:\s*=\s*(?:(?:"((?:[^"])*)")|(?:'((?:[^'])*)')|([^>\s]+)))?/g,f=/^</,m=/^<\//,h=/<!--(.*?)-->/g,g=/<!DOCTYPE([^>]*?)>/i,v=/<!\[CDATA\[(.*?)]]>/g,b=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,y=/([^\#-~| |!])/g,$=i("area,br,col,hr,img,wbr"),w=i("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),k=i("rp,rt"),x=e.extend({},k,w),C=e.extend({},w,i("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul")),D=e.extend({},k,i("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var")),T=i("animate,animateColor,animateMotion,animateTransform,circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,set,stop,svg,switch,text,title,tspan,use"),S=i("script,style"),E=e.extend({},$,C,D,x,T),O=i("background,cite,href,longdesc,src,usemap,xlink:href"),M=i("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,target,title,type,valign,value,vspace,width"),A=i("accent-height,accumulate,additive,alphabetic,arabic-form,ascent,attributeName,attributeType,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan"),P=e.extend({},O,A,M),I=document.createElement("pre");e.module("ngSanitize",[]).provider("$sanitize",n),e.module("ngSanitize").filter("linky",["$sanitize",function(t){var n=/((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"”’]/i,i=/^mailto:/i;return function(o,r){function s(t){t&&f.push(a(t))}function l(t,n){f.push("<a "),e.isDefined(r)&&f.push('target="',r,'" '),f.push('href="',t.replace(/"/g,"&quot;"),'">'),s(n),f.push("</a>")}if(!o)return o;for(var c,u,d,p=o,f=[];c=p.match(n);)u=c[0],c[2]||c[4]||(u=(c[3]?"http://":"mailto:")+u),d=c.index,s(p.substr(0,d)),l(u,c[0].replace(i,"")),p=p.substring(d+c[0].length);return s(p),t(f.join(""))}}])}(window,window.angular),function(){"use strict";angular.module("angularLoad",[]).service("angularLoad",["$document","$q","$timeout",function(t,e,n){function a(t){var a={};return function(i){if("undefined"==typeof a[i]){var o=e.defer(),r=t(i);r.onload=r.onreadystatechange=function(t){r.readyState&&"complete"!==r.readyState&&"loaded"!==r.readyState||n(function(){o.resolve(t)})},r.onerror=function(t){n(function(){o.reject(t)})},a[i]=o.promise}return a[i]}}var i=t[0];this.loadScript=a(function(t){var e=i.createElement("script");return e.src=t,i.body.appendChild(e),e}),this.loadCSS=a(function(t){var e=i.createElement("link");return e.rel="stylesheet",e.type="text/css",e.href=t,i.head.appendChild(e),e})}])}(),angular.module("pascalprecht.translate").factory("$translateStaticFilesLoader",["$q","$http",function(t,e){return function(n){if(!n||!angular.isString(n.prefix)||!angular.isString(n.suffix))throw new Error("Couldn't load static files, no prefix or suffix specified!");var a=t.defer();return e(angular.extend({url:[n.prefix,n.key,n.suffix].join(""),method:"GET",params:""},n.$http)).success(function(t){a.resolve(t)}).error(function(){a.reject(n.key)}),a.promise}}]),angular.module("pascalprecht.translate").factory("$translateStaticFilesLoader",["$q","$http",function(t,e){function n(t,a){e(angular.extend({url:[t.prefix,t.key.toLowerCase(),t.suffix].join(""),method:"GET",params:""},t.$http)).success(function(t){a.resolve(t)}).error(function(){if(t.key.indexOf("_")>=0){var e=t.key.substr(0,t.key.lastIndexOf("_")),i=angular.extend({},t,{key:e});n(i,a)}else a.resolve("{}")})}return function(e){if(!e||!angular.isString(e.prefix)||!angular.isString(e.suffix))throw new Error('Couldn"t load static files, no prefix or suffix specified!');var a=t.defer();return n(e,a),a.promise}}]),angular.module("risevision.common.i18n",["pascalprecht.translate","risevision.common.i18n.config"]).config(["$translateProvider","LOCALES_PREFIX","LOCALES_SUFIX",function(t,e,n){t.useStaticFilesLoader({prefix:e,suffix:n}),t.determinePreferredLanguage().fallbackLanguage("en")}]);var xmlToJSON=function(){this.version="1.3";var t={mergeCDATA:!0,grokAttr:!0,grokText:!0,normalize:!0,xmlns:!0,namespaceKey:"_ns",textKey:"_text",valueKey:"_value",attrKey:"_attr",cdataKey:"_cdata",attrsAsObject:!0,stripAttrPrefix:!0,stripElemPrefix:!0,childrenAsArray:!0},e=new RegExp(/(?!xmlns)^.*:/),n=new RegExp(/^\s+|\s+$/g);return this.grokType=function(t){return/^\s*$/.test(t)?null:/^(?:true|false)$/i.test(t)?"true"===t.toLowerCase():isFinite(t)?parseFloat(t):t},this.parseString=function(t,e){return this.parseXML(this.stringToXML(t),e)},this.parseXML=function(a,i){for(var o in i)t[o]=i[o];var r={},s=0,l="";if(t.xmlns&&a.namespaceURI&&(r[t.namespaceKey]=a.namespaceURI),a.attributes&&a.attributes.length>0){var c={};for(s;s<a.attributes.length;s++){var u=a.attributes.item(s);m={};var d="";d=t.stripAttrPrefix?u.name.replace(e,""):u.name,m[t.valueKey]=t.grokAttr?this.grokType(u.value.replace(n,"")):u.value.replace(n,""),t.xmlns&&u.namespaceURI&&(m[t.namespaceKey]=u.namespaceURI),t.attrsAsObject?c[d]=m:r[t.attrKey+d]=m}t.attrsAsObject&&(r[t.attrKey]=c)}if(a.hasChildNodes())for(var p,f,m,h=0;h<a.childNodes.length;h++)p=a.childNodes.item(h),4===p.nodeType?t.mergeCDATA?l+=p.nodeValue:r.hasOwnProperty(t.cdataKey)?(r[t.cdataKey].constructor!==Array&&(r[t.cdataKey]=[r[t.cdataKey]]),r[t.cdataKey].push(p.nodeValue)):t.childrenAsArray?(r[t.cdataKey]=[],r[t.cdataKey].push(p.nodeValue)):r[t.cdataKey]=p.nodeValue:3===p.nodeType?l+=p.nodeValue:1===p.nodeType&&(0===s&&(r={}),f=t.stripElemPrefix?p.nodeName.replace(e,""):p.nodeName,m=xmlToJSON.parseXML(p),r.hasOwnProperty(f)?(r[f].constructor!==Array&&(r[f]=[r[f]]),r[f].push(m)):(t.childrenAsArray?(r[f]=[],r[f].push(m)):r[f]=m,s++));else l||(t.childrenAsArray?(r[t.textKey]=[],r[t.textKey].push(null)):r[t.textKey]=null);if(l)if(t.grokText){var g=this.grokType(l.replace(n,""));null!==g&&void 0!==g&&(r[t.textKey]=g)}else r[t.textKey]=t.normalize?l.replace(n,"").replace(/\s+/g," "):l.replace(n,"");return r},this.xmlToString=function(t){try{var e=t.xml?t.xml:(new XMLSerializer).serializeToString(t);return e}catch(n){return null}},this.stringToXML=function(t){try{var e=null;if(window.DOMParser){var n=new DOMParser;return e=n.parseFromString(t,"text/xml")}return e=new ActiveXObject("Microsoft.XMLDOM"),e.async=!1,e.loadXML(t),e}catch(a){return null}},this}.call({});if("undefined"!=typeof module&&null!==module&&module.exports?module.exports=xmlToJSON:"function"==typeof define&&define.amd&&define(function(){return xmlToJSON}),+function(t){"use strict";function e(e){return this.each(function(){var a=t(this),i=a.data("bs.affix"),o="object"==typeof e&&e;i||a.data("bs.affix",i=new n(this,o)),"string"==typeof e&&i[e]()})}var n=function(e,a){this.options=t.extend({},n.DEFAULTS,a),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=this.unpin=this.pinnedOffset=null,this.checkPosition()};n.VERSION="3.2.0",n.RESET="affix affix-top affix-bottom",n.DEFAULTS={offset:0,target:window},n.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(n.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},n.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},n.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=t(document).height(),a=this.$target.scrollTop(),i=this.$element.offset(),o=this.options.offset,r=o.top,s=o.bottom;"object"!=typeof o&&(s=r=o),"function"==typeof r&&(r=o.top(this.$element)),"function"==typeof s&&(s=o.bottom(this.$element));var l=null!=this.unpin&&a+this.unpin<=i.top?!1:null!=s&&i.top+this.$element.height()>=e-s?"bottom":null!=r&&r>=a?"top":!1;if(this.affixed!==l){null!=this.unpin&&this.$element.css("top","");var c="affix"+(l?"-"+l:""),u=t.Event(c+".bs.affix");this.$element.trigger(u),u.isDefaultPrevented()||(this.affixed=l,this.unpin="bottom"==l?this.getPinnedOffset():null,this.$element.removeClass(n.RESET).addClass(c).trigger(t.Event(c.replace("affix","affixed"))),"bottom"==l&&this.$element.offset({top:e-this.$element.height()-s}))}}};var a=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=n,t.fn.affix.noConflict=function(){return t.fn.affix=a,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var n=t(this),a=n.data();a.offset=a.offset||{},a.offsetBottom&&(a.offset.bottom=a.offsetBottom),a.offsetTop&&(a.offset.top=a.offsetTop),e.call(n,a)})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var n=t(this),i=n.data("bs.alert");i||n.data("bs.alert",i=new a(this)),"string"==typeof e&&i[e].call(n)})}var n='[data-dismiss="alert"]',a=function(e){t(e).on("click",n,this.close)};a.VERSION="3.2.0",a.prototype.close=function(e){function n(){o.detach().trigger("closed.bs.alert").remove()}var a=t(this),i=a.attr("data-target");i||(i=a.attr("href"),i=i&&i.replace(/.*(?=#[^\s]*$)/,""));var o=t(i);e&&e.preventDefault(),o.length||(o=a.hasClass("alert")?a:a.parent()),o.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(o.removeClass("in"),t.support.transition&&o.hasClass("fade")?o.one("bsTransitionEnd",n).emulateTransitionEnd(150):n())};var i=t.fn.alert;t.fn.alert=e,t.fn.alert.Constructor=a,t.fn.alert.noConflict=function(){return t.fn.alert=i,this},t(document).on("click.bs.alert.data-api",n,a.prototype.close)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var a=t(this),i=a.data("bs.button"),o="object"==typeof e&&e;i||a.data("bs.button",i=new n(this,o)),"toggle"==e?i.toggle():e&&i.setState(e)})}var n=function(e,a){this.$element=t(e),this.options=t.extend({},n.DEFAULTS,a),this.isLoading=!1};n.VERSION="3.2.0",n.DEFAULTS={loadingText:"loading..."},n.prototype.setState=function(e){var n="disabled",a=this.$element,i=a.is("input")?"val":"html",o=a.data();e+="Text",null==o.resetText&&a.data("resetText",a[i]()),a[i](null==o[e]?this.options[e]:o[e]),setTimeout(t.proxy(function(){"loadingText"==e?(this.isLoading=!0,a.addClass(n).attr(n,n)):this.isLoading&&(this.isLoading=!1,a.removeClass(n).removeAttr(n))},this),0)},n.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var n=this.$element.find("input");"radio"==n.prop("type")&&(n.prop("checked")&&this.$element.hasClass("active")?t=!1:e.find(".active").removeClass("active")),t&&n.prop("checked",!this.$element.hasClass("active")).trigger("change")}t&&this.$element.toggleClass("active")};var a=t.fn.button;t.fn.button=e,t.fn.button.Constructor=n,t.fn.button.noConflict=function(){return t.fn.button=a,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(n){var a=t(n.target);a.hasClass("btn")||(a=a.closest(".btn")),e.call(a,"toggle"),n.preventDefault()})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var a=t(this),i=a.data("bs.carousel"),o=t.extend({},n.DEFAULTS,a.data(),"object"==typeof e&&e),r="string"==typeof e?e:o.slide;i||a.data("bs.carousel",i=new n(this,o)),"number"==typeof e?i.to(e):r?i[r]():o.interval&&i.pause().cycle()})}var n=function(e,n){this.$element=t(e).on("keydown.bs.carousel",t.proxy(this.keydown,this)),this.$indicators=this.$element.find(".carousel-indicators"),this.options=n,this.paused=this.sliding=this.interval=this.$active=this.$items=null,"hover"==this.options.pause&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};n.VERSION="3.2.0",n.DEFAULTS={interval:5e3,pause:"hover",wrap:!0},n.prototype.keydown=function(t){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()},n.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},n.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},n.prototype.to=function(e){var n=this,a=this.getItemIndex(this.$active=this.$element.find(".item.active"));return e>this.$items.length-1||0>e?void 0:this.sliding?this.$element.one("slid.bs.carousel",function(){n.to(e)}):a==e?this.pause().cycle():this.slide(e>a?"next":"prev",t(this.$items[e]))},n.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},n.prototype.next=function(){return this.sliding?void 0:this.slide("next")},n.prototype.prev=function(){return this.sliding?void 0:this.slide("prev")},n.prototype.slide=function(e,n){var a=this.$element.find(".item.active"),i=n||a[e](),o=this.interval,r="next"==e?"left":"right",s="next"==e?"first":"last",l=this;if(!i.length){if(!this.options.wrap)return;i=this.$element.find(".item")[s]()}if(i.hasClass("active"))return this.sliding=!1;var c=i[0],u=t.Event("slide.bs.carousel",{relatedTarget:c,direction:r});if(this.$element.trigger(u),!u.isDefaultPrevented()){if(this.sliding=!0,o&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var d=t(this.$indicators.children()[this.getItemIndex(i)]);d&&d.addClass("active")}var p=t.Event("slid.bs.carousel",{relatedTarget:c,direction:r});return t.support.transition&&this.$element.hasClass("slide")?(i.addClass(e),i[0].offsetWidth,a.addClass(r),i.addClass(r),a.one("bsTransitionEnd",function(){i.removeClass([e,r].join(" ")).addClass("active"),a.removeClass(["active",r].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger(p)},0)}).emulateTransitionEnd(1e3*a.css("transition-duration").slice(0,-1))):(a.removeClass("active"),i.addClass("active"),this.sliding=!1,this.$element.trigger(p)),o&&this.cycle(),this}};var a=t.fn.carousel;t.fn.carousel=e,t.fn.carousel.Constructor=n,t.fn.carousel.noConflict=function(){return t.fn.carousel=a,this},t(document).on("click.bs.carousel.data-api","[data-slide], [data-slide-to]",function(n){var a,i=t(this),o=t(i.attr("data-target")||(a=i.attr("href"))&&a.replace(/.*(?=#[^\s]+$)/,""));if(o.hasClass("carousel")){var r=t.extend({},o.data(),i.data()),s=i.attr("data-slide-to");
s&&(r.interval=!1),e.call(o,r),s&&o.data("bs.carousel").to(s),n.preventDefault()}}),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var n=t(this);e.call(n,n.data())})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var a=t(this),i=a.data("bs.collapse"),o=t.extend({},n.DEFAULTS,a.data(),"object"==typeof e&&e);!i&&o.toggle&&"show"==e&&(e=!e),i||a.data("bs.collapse",i=new n(this,o)),"string"==typeof e&&i[e]()})}var n=function(e,a){this.$element=t(e),this.options=t.extend({},n.DEFAULTS,a),this.transitioning=null,this.options.parent&&(this.$parent=t(this.options.parent)),this.options.toggle&&this.toggle()};n.VERSION="3.2.0",n.DEFAULTS={toggle:!0},n.prototype.dimension=function(){var t=this.$element.hasClass("width");return t?"width":"height"},n.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var n=t.Event("show.bs.collapse");if(this.$element.trigger(n),!n.isDefaultPrevented()){var a=this.$parent&&this.$parent.find("> .panel > .in");if(a&&a.length){var i=a.data("bs.collapse");if(i&&i.transitioning)return;e.call(a,"hide"),i||a.data("bs.collapse",null)}var o=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[o](0),this.transitioning=1;var r=function(){this.$element.removeClass("collapsing").addClass("collapse in")[o](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return r.call(this);var s=t.camelCase(["scroll",o].join("-"));this.$element.one("bsTransitionEnd",t.proxy(r,this)).emulateTransitionEnd(350)[o](this.$element[0][s])}}},n.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var n=this.dimension();this.$element[n](this.$element[n]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse").removeClass("in"),this.transitioning=1;var a=function(){this.transitioning=0,this.$element.trigger("hidden.bs.collapse").removeClass("collapsing").addClass("collapse")};return t.support.transition?(this.$element[n](0).one("bsTransitionEnd",t.proxy(a,this)).emulateTransitionEnd(350),void 0):a.call(this)}}},n.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()};var a=t.fn.collapse;t.fn.collapse=e,t.fn.collapse.Constructor=n,t.fn.collapse.noConflict=function(){return t.fn.collapse=a,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(n){var a,i=t(this),o=i.attr("data-target")||n.preventDefault()||(a=i.attr("href"))&&a.replace(/.*(?=#[^\s]+$)/,""),r=t(o),s=r.data("bs.collapse"),l=s?"toggle":i.data(),c=i.attr("data-parent"),u=c&&t(c);s&&s.transitioning||(u&&u.find('[data-toggle="collapse"][data-parent="'+c+'"]').not(i).addClass("collapsed"),i[r.hasClass("in")?"addClass":"removeClass"]("collapsed")),e.call(r,l)})}(jQuery),+function(t){"use strict";function e(e){e&&3===e.which||(t(i).remove(),t(o).each(function(){var a=n(t(this)),i={relatedTarget:this};a.hasClass("open")&&(a.trigger(e=t.Event("hide.bs.dropdown",i)),e.isDefaultPrevented()||a.removeClass("open").trigger("hidden.bs.dropdown",i))}))}function n(e){var n=e.attr("data-target");n||(n=e.attr("href"),n=n&&/#[A-Za-z]/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,""));var a=n&&t(n);return a&&a.length?a:e.parent()}function a(e){return this.each(function(){var n=t(this),a=n.data("bs.dropdown");a||n.data("bs.dropdown",a=new r(this)),"string"==typeof e&&a[e].call(n)})}var i=".dropdown-backdrop",o='[data-toggle="dropdown"]',r=function(e){t(e).on("click.bs.dropdown",this.toggle)};r.VERSION="3.2.0",r.prototype.toggle=function(a){var i=t(this);if(!i.is(".disabled, :disabled")){var o=n(i),r=o.hasClass("open");if(e(),!r){"ontouchstart"in document.documentElement&&!o.closest(".navbar-nav").length&&t('<div class="dropdown-backdrop"/>').insertAfter(t(this)).on("click",e);var s={relatedTarget:this};if(o.trigger(a=t.Event("show.bs.dropdown",s)),a.isDefaultPrevented())return;i.trigger("focus"),o.toggleClass("open").trigger("shown.bs.dropdown",s)}return!1}},r.prototype.keydown=function(e){if(/(38|40|27)/.test(e.keyCode)){var a=t(this);if(e.preventDefault(),e.stopPropagation(),!a.is(".disabled, :disabled")){var i=n(a),r=i.hasClass("open");if(!r||r&&27==e.keyCode)return 27==e.which&&i.find(o).trigger("focus"),a.trigger("click");var s=" li:not(.divider):visible a",l=i.find('[role="menu"]'+s+', [role="listbox"]'+s);if(l.length){var c=l.index(l.filter(":focus"));38==e.keyCode&&c>0&&c--,40==e.keyCode&&c<l.length-1&&c++,~c||(c=0),l.eq(c).trigger("focus")}}}};var s=t.fn.dropdown;t.fn.dropdown=a,t.fn.dropdown.Constructor=r,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=s,this},t(document).on("click.bs.dropdown.data-api",e).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",o,r.prototype.toggle).on("keydown.bs.dropdown.data-api",o+', [role="menu"], [role="listbox"]',r.prototype.keydown)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var a=t(this),i=a.data("bs.tab");i||a.data("bs.tab",i=new n(this)),"string"==typeof e&&i[e]()})}var n=function(e){this.element=t(e)};n.VERSION="3.2.0",n.prototype.show=function(){var e=this.element,n=e.closest("ul:not(.dropdown-menu)"),a=e.data("target");if(a||(a=e.attr("href"),a=a&&a.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var i=n.find(".active:last a")[0],o=t.Event("show.bs.tab",{relatedTarget:i});if(e.trigger(o),!o.isDefaultPrevented()){var r=t(a);this.activate(e.closest("li"),n),this.activate(r,r.parent(),function(){e.trigger({type:"shown.bs.tab",relatedTarget:i})})}}},n.prototype.activate=function(e,n,a){function i(){o.removeClass("active").find("> .dropdown-menu > .active").removeClass("active"),e.addClass("active"),r?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu")&&e.closest("li.dropdown").addClass("active"),a&&a()}var o=n.find("> .active"),r=a&&t.support.transition&&o.hasClass("fade");r?o.one("bsTransitionEnd",i).emulateTransitionEnd(150):i(),o.removeClass("in")};var a=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=n,t.fn.tab.noConflict=function(){return t.fn.tab=a,this},t(document).on("click.bs.tab.data-api",'[data-toggle="tab"], [data-toggle="pill"]',function(n){n.preventDefault(),e.call(t(this),"show")})}(jQuery),+function(t){"use strict";function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in e)if(void 0!==t.style[n])return{end:e[n]};return!1}t.fn.emulateTransitionEnd=function(e){var n=!1,a=this;t(this).one("bsTransitionEnd",function(){n=!0});var i=function(){n||t(a).trigger(t.support.transition.end)};return setTimeout(i,e),this},t(function(){t.support.transition=e(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){return t(e.target).is(this)?e.handleObj.handler.apply(this,arguments):void 0}})})}(jQuery),+function(t){"use strict";function e(n,a){var i=t.proxy(this.process,this);this.$body=t("body"),this.$scrollElement=t(n).is("body")?t(window):t(n),this.options=t.extend({},e.DEFAULTS,a),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",i),this.refresh(),this.process()}function n(n){return this.each(function(){var a=t(this),i=a.data("bs.scrollspy"),o="object"==typeof n&&n;i||a.data("bs.scrollspy",i=new e(this,o)),"string"==typeof n&&i[n]()})}e.VERSION="3.2.0",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e="offset",n=0;t.isWindow(this.$scrollElement[0])||(e="position",n=this.$scrollElement.scrollTop()),this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight();var a=this;this.$body.find(this.selector).map(function(){var a=t(this),i=a.data("target")||a.attr("href"),o=/^#./.test(i)&&t(i);return o&&o.length&&o.is(":visible")&&[[o[e]().top+n,i]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){a.offsets.push(this[0]),a.targets.push(this[1])})},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,n=this.getScrollHeight(),a=this.options.offset+n-this.$scrollElement.height(),i=this.offsets,o=this.targets,r=this.activeTarget;if(this.scrollHeight!=n&&this.refresh(),e>=a)return r!=(t=o[o.length-1])&&this.activate(t);if(r&&e<=i[0])return r!=(t=o[0])&&this.activate(t);for(t=i.length;t--;)r!=o[t]&&e>=i[t]&&(!i[t+1]||e<=i[t+1])&&this.activate(o[t])},e.prototype.activate=function(e){this.activeTarget=e,t(this.selector).parentsUntil(this.options.target,".active").removeClass("active");var n=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',a=t(n).parents("li").addClass("active");a.parent(".dropdown-menu").length&&(a=a.closest("li.dropdown").addClass("active")),a.trigger("activate.bs.scrollspy")};var a=t.fn.scrollspy;t.fn.scrollspy=n,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=a,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);n.call(e,e.data())})})}(jQuery),+function(t){"use strict";function e(e,a){return this.each(function(){var i=t(this),o=i.data("bs.modal"),r=t.extend({},n.DEFAULTS,i.data(),"object"==typeof e&&e);o||i.data("bs.modal",o=new n(this,r)),"string"==typeof e?o[e](a):r.show&&o.show(a)})}var n=function(e,n){this.options=n,this.$body=t(document.body),this.$element=t(e),this.$backdrop=this.isShown=null,this.scrollbarWidth=0,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};n.VERSION="3.2.0",n.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},n.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},n.prototype.show=function(e){var n=this,a=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(a),this.isShown||a.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.$body.addClass("modal-open"),this.setScrollbar(),this.escape(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.backdrop(function(){var a=t.support.transition&&n.$element.hasClass("fade");n.$element.parent().length||n.$element.appendTo(n.$body),n.$element.show().scrollTop(0),a&&n.$element[0].offsetWidth,n.$element.addClass("in").attr("aria-hidden",!1),n.enforceFocus();var i=t.Event("shown.bs.modal",{relatedTarget:e});a?n.$element.find(".modal-dialog").one("bsTransitionEnd",function(){n.$element.trigger("focus").trigger(i)}).emulateTransitionEnd(300):n.$element.trigger("focus").trigger(i)}))},n.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.$body.removeClass("modal-open"),this.resetScrollbar(),this.escape(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").attr("aria-hidden",!0).off("click.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(300):this.hideModal())},n.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},n.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keyup.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keyup.dismiss.bs.modal")},n.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$element.trigger("hidden.bs.modal")})},n.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},n.prototype.backdrop=function(e){var n=this,a=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var i=t.support.transition&&a;if(this.$backdrop=t('<div class="modal-backdrop '+a+'" />').appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus.call(this.$element[0]):this.hide.call(this))},this)),i&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;i?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(150):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var o=function(){n.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",o).emulateTransitionEnd(150):o()}else e&&e()},n.prototype.checkScrollbar=function(){document.body.clientWidth>=window.innerWidth||(this.scrollbarWidth=this.scrollbarWidth||this.measureScrollbar())},n.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.scrollbarWidth&&this.$body.css("padding-right",t+this.scrollbarWidth)},n.prototype.resetScrollbar=function(){this.$body.css("padding-right","")},n.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var a=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=n,t.fn.modal.noConflict=function(){return t.fn.modal=a,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(n){var a=t(this),i=a.attr("href"),o=t(a.attr("data-target")||i&&i.replace(/.*(?=#[^\s]+$)/,"")),r=o.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(i)&&i},o.data(),a.data());a.is("a")&&n.preventDefault(),o.one("show.bs.modal",function(t){t.isDefaultPrevented()||o.one("hidden.bs.modal",function(){a.is(":visible")&&a.trigger("focus")})}),e.call(o,r,this)})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var a=t(this),i=a.data("bs.tooltip"),o="object"==typeof e&&e;(i||"destroy"!=e)&&(i||a.data("bs.tooltip",i=new n(this,o)),"string"==typeof e&&i[e]())})}var n=function(t,e){this.type=this.options=this.enabled=this.timeout=this.hoverState=this.$element=null,this.init("tooltip",t,e)};n.VERSION="3.2.0",n.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},n.prototype.init=function(e,n,a){this.enabled=!0,this.type=e,this.$element=t(n),this.options=this.getOptions(a),this.$viewport=this.options.viewport&&t(this.options.viewport.selector||this.options.viewport);for(var i=this.options.trigger.split(" "),o=i.length;o--;){var r=i[o];if("click"==r)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=r){var s="hover"==r?"mouseenter":"focusin",l="hover"==r?"mouseleave":"focusout";this.$element.on(s+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.getOptions=function(e){return e=t.extend({},this.getDefaults(),this.$element.data(),e),e.delay&&"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e},n.prototype.getDelegateOptions=function(){var e={},n=this.getDefaults();return this._options&&t.each(this._options,function(t,a){n[t]!=a&&(e[t]=a)}),e},n.prototype.enter=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),clearTimeout(n.timeout),n.hoverState="in",n.options.delay&&n.options.delay.show?(n.timeout=setTimeout(function(){"in"==n.hoverState&&n.show()},n.options.delay.show),void 0):n.show()},n.prototype.leave=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),clearTimeout(n.timeout),n.hoverState="out",n.options.delay&&n.options.delay.hide?(n.timeout=setTimeout(function(){"out"==n.hoverState&&n.hide()},n.options.delay.hide),void 0):n.hide()},n.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var n=t.contains(document.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!n)return;var a=this,i=this.tip(),o=this.getUID(this.type);this.setContent(),i.attr("id",o),this.$element.attr("aria-describedby",o),this.options.animation&&i.addClass("fade");var r="function"==typeof this.options.placement?this.options.placement.call(this,i[0],this.$element[0]):this.options.placement,s=/\s?auto?\s?/i,l=s.test(r);l&&(r=r.replace(s,"")||"top"),i.detach().css({top:0,left:0,display:"block"}).addClass(r).data("bs."+this.type,this),this.options.container?i.appendTo(this.options.container):i.insertAfter(this.$element);var c=this.getPosition(),u=i[0].offsetWidth,d=i[0].offsetHeight;if(l){var p=r,f=this.$element.parent(),m=this.getPosition(f);r="bottom"==r&&c.top+c.height+d-m.scroll>m.height?"top":"top"==r&&c.top-m.scroll-d<0?"bottom":"right"==r&&c.right+u>m.width?"left":"left"==r&&c.left-u<m.left?"right":r,i.removeClass(p).addClass(r)}var h=this.getCalculatedOffset(r,c,u,d);this.applyPlacement(h,r);var g=function(){a.$element.trigger("shown.bs."+a.type),a.hoverState=null};t.support.transition&&this.$tip.hasClass("fade")?i.one("bsTransitionEnd",g).emulateTransitionEnd(150):g()}},n.prototype.applyPlacement=function(e,n){var a=this.tip(),i=a[0].offsetWidth,o=a[0].offsetHeight,r=parseInt(a.css("margin-top"),10),s=parseInt(a.css("margin-left"),10);isNaN(r)&&(r=0),isNaN(s)&&(s=0),e.top=e.top+r,e.left=e.left+s,t.offset.setOffset(a[0],t.extend({using:function(t){a.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),a.addClass("in");var l=a[0].offsetWidth,c=a[0].offsetHeight;"top"==n&&c!=o&&(e.top=e.top+o-c);var u=this.getViewportAdjustedDelta(n,e,l,c);u.left?e.left+=u.left:e.top+=u.top;var d=u.left?2*u.left-i+l:2*u.top-o+c,p=u.left?"left":"top",f=u.left?"offsetWidth":"offsetHeight";a.offset(e),this.replaceArrow(d,a[0][f],p)},n.prototype.replaceArrow=function(t,e,n){this.arrow().css(n,t?50*(1-t/e)+"%":"")},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},n.prototype.hide=function(){function e(){"in"!=n.hoverState&&a.detach(),n.$element.trigger("hidden.bs."+n.type)}var n=this,a=this.tip(),i=t.Event("hide.bs."+this.type);return this.$element.removeAttr("aria-describedby"),this.$element.trigger(i),i.isDefaultPrevented()?void 0:(a.removeClass("in"),t.support.transition&&this.$tip.hasClass("fade")?a.one("bsTransitionEnd",e).emulateTransitionEnd(150):e(),this.hoverState=null,this)},n.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},n.prototype.hasContent=function(){return this.getTitle()},n.prototype.getPosition=function(e){e=e||this.$element;var n=e[0],a="BODY"==n.tagName;return t.extend({},"function"==typeof n.getBoundingClientRect?n.getBoundingClientRect():null,{scroll:a?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop(),width:a?t(window).width():e.outerWidth(),height:a?t(window).height():e.outerHeight()},a?{top:0,left:0}:e.offset())},n.prototype.getCalculatedOffset=function(t,e,n,a){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-n/2}:"top"==t?{top:e.top-a,left:e.left+e.width/2-n/2}:"left"==t?{top:e.top+e.height/2-a/2,left:e.left-n}:{top:e.top+e.height/2-a/2,left:e.left+e.width}},n.prototype.getViewportAdjustedDelta=function(t,e,n,a){var i={top:0,left:0};if(!this.$viewport)return i;var o=this.options.viewport&&this.options.viewport.padding||0,r=this.getPosition(this.$viewport);if(/right|left/.test(t)){var s=e.top-o-r.scroll,l=e.top+o-r.scroll+a;s<r.top?i.top=r.top-s:l>r.top+r.height&&(i.top=r.top+r.height-l)}else{var c=e.left-o,u=e.left+o+n;c<r.left?i.left=r.left-c:u>r.width&&(i.left=r.left+r.width-u)}return i},n.prototype.getTitle=function(){var t,e=this.$element,n=this.options;return t=e.attr("data-original-title")||("function"==typeof n.title?n.title.call(e[0]):n.title)},n.prototype.getUID=function(t){do t+=~~(1e6*Math.random());while(document.getElementById(t));return t},n.prototype.tip=function(){return this.$tip=this.$tip||t(this.options.template)},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},n.prototype.validate=function(){this.$element[0].parentNode||(this.hide(),this.$element=null,this.options=null)},n.prototype.enable=function(){this.enabled=!0},n.prototype.disable=function(){this.enabled=!1},n.prototype.toggleEnabled=function(){this.enabled=!this.enabled},n.prototype.toggle=function(e){var n=this;e&&(n=t(e.currentTarget).data("bs."+this.type),n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n))),n.tip().hasClass("in")?n.leave(n):n.enter(n)},n.prototype.destroy=function(){clearTimeout(this.timeout),this.hide().$element.off("."+this.type).removeData("bs."+this.type)};var a=t.fn.tooltip;t.fn.tooltip=e,t.fn.tooltip.Constructor=n,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=a,this}}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var a=t(this),i=a.data("bs.popover"),o="object"==typeof e&&e;(i||"destroy"!=e)&&(i||a.data("bs.popover",i=new n(this,o)),"string"==typeof e&&i[e]())})}var n=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");n.VERSION="3.2.0",n.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),n.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),n.prototype.constructor=n,n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),n=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").empty()[this.options.html?"string"==typeof n?"html":"append":"text"](n),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},n.prototype.hasContent=function(){return this.getTitle()||this.getContent()},n.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")},n.prototype.tip=function(){return this.$tip||(this.$tip=t(this.options.template)),this.$tip};var a=t.fn.popover;t.fn.popover=e,t.fn.popover.Constructor=n,t.fn.popover.noConflict=function(){return t.fn.popover=a,this}}(jQuery),angular.module("ui.bootstrap",["ui.bootstrap.tpls","ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.bindHtml","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.position","ui.bootstrap.datepicker","ui.bootstrap.dropdown","ui.bootstrap.modal","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.transition","ui.bootstrap.typeahead"]),angular.module("ui.bootstrap.tpls",["template/accordion/accordion-group.html","template/accordion/accordion.html","template/alert/alert.html","template/carousel/carousel.html","template/carousel/slide.html","template/datepicker/datepicker.html","template/datepicker/day.html","template/datepicker/month.html","template/datepicker/popup.html","template/datepicker/year.html","template/modal/backdrop.html","template/modal/window.html","template/pagination/pager.html","template/pagination/pagination.html","template/tooltip/tooltip-html-popup.html","template/tooltip/tooltip-html-unsafe-popup.html","template/tooltip/tooltip-popup.html","template/tooltip/tooltip-template-popup.html","template/popover/popover-html.html","template/popover/popover-template.html","template/popover/popover.html","template/progressbar/bar.html","template/progressbar/progress.html","template/progressbar/progressbar.html","template/rating/rating.html","template/tabs/tab.html","template/tabs/tabset.html","template/timepicker/timepicker.html","template/typeahead/typeahead-match.html","template/typeahead/typeahead-popup.html"]),angular.module("ui.bootstrap.collapse",[]).directive("collapse",["$animate",function(t){return{link:function(e,n,a){function i(){n.removeClass("collapse").addClass("collapsing").attr("aria-expanded",!0).attr("aria-hidden",!1),t.addClass(n,"in",{to:{height:n[0].scrollHeight+"px"}}).then(o)}function o(){n.removeClass("collapsing"),n.css({height:"auto"})}function r(){return n.hasClass("collapse")||n.hasClass("in")?(n.css({height:n[0].scrollHeight+"px"}).removeClass("collapse").addClass("collapsing").attr("aria-expanded",!1).attr("aria-hidden",!0),t.removeClass(n,"in",{to:{height:"0"}}).then(s),void 0):s()}function s(){n.css({height:"0"}),n.removeClass("collapsing"),n.addClass("collapse")}e.$watch(a.collapse,function(t){t?r():i()})}}}]),angular.module("ui.bootstrap.accordion",["ui.bootstrap.collapse"]).constant("accordionConfig",{closeOthers:!0}).controller("AccordionController",["$scope","$attrs","accordionConfig",function(t,e,n){this.groups=[],this.closeOthers=function(a){var i=angular.isDefined(e.closeOthers)?t.$eval(e.closeOthers):n.closeOthers;i&&angular.forEach(this.groups,function(t){t!==a&&(t.isOpen=!1)})},this.addGroup=function(t){var e=this;this.groups.push(t),t.$on("$destroy",function(){e.removeGroup(t)})},this.removeGroup=function(t){var e=this.groups.indexOf(t);-1!==e&&this.groups.splice(e,1)}}]).directive("accordion",function(){return{restrict:"EA",controller:"AccordionController",controllerAs:"accordion",transclude:!0,replace:!1,templateUrl:function(t,e){return e.templateUrl||"template/accordion/accordion.html"}}}).directive("accordionGroup",function(){return{require:"^accordion",restrict:"EA",transclude:!0,replace:!0,templateUrl:function(t,e){return e.templateUrl||"template/accordion/accordion-group.html"},scope:{heading:"@",isOpen:"=?",isDisabled:"=?"},controller:function(){this.setHeading=function(t){this.heading=t}},link:function(t,e,n,a){a.addGroup(t),t.openClass=n.openClass||"panel-open",t.panelClass=n.panelClass,t.$watch("isOpen",function(n){e.toggleClass(t.openClass,n),n&&a.closeOthers(t)}),t.toggleOpen=function(e){t.isDisabled||e&&32!==e.which||(t.isOpen=!t.isOpen)}}}}).directive("accordionHeading",function(){return{restrict:"EA",transclude:!0,template:"",replace:!0,require:"^accordionGroup",link:function(t,e,n,a,i){a.setHeading(i(t,angular.noop))}}}).directive("accordionTransclude",function(){return{require:"^accordionGroup",link:function(t,e,n,a){t.$watch(function(){return a[n.accordionTransclude]},function(t){t&&(e.find("span").html(""),e.find("span").append(t))})}}}),angular.module("ui.bootstrap.alert",[]).controller("AlertController",["$scope","$attrs",function(t,e){t.closeable=!!e.close,this.close=t.close}]).directive("alert",function(){return{controller:"AlertController",controllerAs:"alert",templateUrl:function(t,e){return e.templateUrl||"template/alert/alert.html"},transclude:!0,replace:!0,scope:{type:"@",close:"&"}}}).directive("dismissOnTimeout",["$timeout",function(t){return{require:"alert",link:function(e,n,a,i){t(function(){i.close()},parseInt(a.dismissOnTimeout,10))}}}]),angular.module("ui.bootstrap.bindHtml",[]).value("$bindHtmlUnsafeSuppressDeprecated",!1).directive("bindHtmlUnsafe",["$log","$bindHtmlUnsafeSuppressDeprecated",function(t,e){return function(n,a,i){e||t.warn("bindHtmlUnsafe is now deprecated. Use ngBindHtml instead"),a.addClass("ng-binding").data("$binding",i.bindHtmlUnsafe),n.$watch(i.bindHtmlUnsafe,function(t){a.html(t||"")})}}]),angular.module("ui.bootstrap.buttons",[]).constant("buttonConfig",{activeClass:"active",toggleEvent:"click"}).controller("ButtonsController",["buttonConfig",function(t){this.activeClass=t.activeClass||"active",this.toggleEvent=t.toggleEvent||"click"}]).directive("btnRadio",function(){return{require:["btnRadio","ngModel"],controller:"ButtonsController",controllerAs:"buttons",link:function(t,e,n,a){var i=a[0],o=a[1];e.find("input").css({display:"none"}),o.$render=function(){e.toggleClass(i.activeClass,angular.equals(o.$modelValue,t.$eval(n.btnRadio)))},e.bind(i.toggleEvent,function(){if(!n.disabled){var a=e.hasClass(i.activeClass);(!a||angular.isDefined(n.uncheckable))&&t.$apply(function(){o.$setViewValue(a?null:t.$eval(n.btnRadio)),o.$render()})}})}}}).directive("btnCheckbox",["$document",function(t){return{require:["btnCheckbox","ngModel"],controller:"ButtonsController",controllerAs:"button",link:function(e,n,a,i){function o(){return s(a.btnCheckboxTrue,!0)}function r(){return s(a.btnCheckboxFalse,!1)}function s(t,n){var a=e.$eval(t);return angular.isDefined(a)?a:n}var l=i[0],c=i[1];n.find("input").css({display:"none"}),c.$render=function(){n.toggleClass(l.activeClass,angular.equals(c.$modelValue,o()))},n.bind(l.toggleEvent,function(){a.disabled||e.$apply(function(){c.$setViewValue(n.hasClass(l.activeClass)?r():o()),c.$render()})}),n.on("keypress",function(i){a.disabled||32!==i.which||t[0].activeElement!==n[0]||e.$apply(function(){c.$setViewValue(n.hasClass(l.activeClass)?r():o()),c.$render()})})}}}]),angular.module("ui.bootstrap.carousel",[]).controller("CarouselController",["$scope","$element","$interval","$animate",function(t,e,n,a){function i(e,n,i){v||(angular.extend(e,{direction:i,active:!0}),angular.extend(d.currentSlide||{},{direction:i,active:!1}),a.enabled()&&!t.noTransition&&!t.$currentTransition&&e.$element&&d.slides.length>1&&(e.$element.data(h,e.direction),d.currentSlide&&d.currentSlide.$element&&d.currentSlide.$element.data(h,e.direction),t.$currentTransition=!0,f?a.on("addClass",e.$element,function(e,n){"close"===n&&(t.$currentTransition=null,a.off("addClass",e))}):e.$element.one("$animate:close",function(){t.$currentTransition=null})),d.currentSlide=e,g=n,r())}function o(t){if(angular.isUndefined(p[t].index))return p[t];{var e;p.length}for(e=0;e<p.length;++e)if(p[e].index==t)return p[e]}function r(){s();var e=+t.interval;!isNaN(e)&&e>0&&(c=n(l,e))}function s(){c&&(n.cancel(c),c=null)}function l(){var e=+t.interval;u&&!isNaN(e)&&e>0&&p.length?t.next():t.pause()}var c,u,d=this,p=d.slides=t.slides=[],f=angular.version.minor>=4,m="uib-noTransition",h="uib-slideDirection",g=-1;d.currentSlide=null;var v=!1;d.select=t.select=function(e,n){var a=t.indexOfSlide(e);void 0===n&&(n=a>d.getCurrentIndex()?"next":"prev"),e&&e!==d.currentSlide&&!t.$currentTransition&&i(e,a,n)},t.$on("$destroy",function(){v=!0}),d.getCurrentIndex=function(){return d.currentSlide&&angular.isDefined(d.currentSlide.index)?+d.currentSlide.index:g},t.indexOfSlide=function(t){return angular.isDefined(t.index)?+t.index:p.indexOf(t)},t.next=function(){var e=(d.getCurrentIndex()+1)%p.length;return 0===e&&t.noWrap()?(t.pause(),void 0):d.select(o(e),"next")},t.prev=function(){var e=d.getCurrentIndex()-1<0?p.length-1:d.getCurrentIndex()-1;
return t.noWrap()&&e===p.length-1?(t.pause(),void 0):d.select(o(e),"prev")},t.isActive=function(t){return d.currentSlide===t},t.$watch("interval",r),t.$on("$destroy",s),t.play=function(){u||(u=!0,r())},t.pause=function(){t.noPause||(u=!1,s())},d.addSlide=function(e,n){e.$element=n,p.push(e),1===p.length||e.active?(d.select(p[p.length-1]),1==p.length&&t.play()):e.active=!1},d.removeSlide=function(t){angular.isDefined(t.index)&&p.sort(function(t,e){return+t.index>+e.index});var e=p.indexOf(t);p.splice(e,1),p.length>0&&t.active?e>=p.length?d.select(p[e-1]):d.select(p[e]):g>e&&g--,0===p.length&&(d.currentSlide=null)},t.$watch("noTransition",function(t){e.data(m,t)})}]).directive("carousel",[function(){return{restrict:"EA",transclude:!0,replace:!0,controller:"CarouselController",controllerAs:"carousel",require:"carousel",templateUrl:function(t,e){return e.templateUrl||"template/carousel/carousel.html"},scope:{interval:"=",noTransition:"=",noPause:"=",noWrap:"&"}}}]).directive("slide",function(){return{require:"^carousel",restrict:"EA",transclude:!0,replace:!0,templateUrl:function(t,e){return e.templateUrl||"template/carousel/slide.html"},scope:{active:"=?",actual:"=?",index:"=?"},link:function(t,e,n,a){a.addSlide(t,e),t.$on("$destroy",function(){a.removeSlide(t)}),t.$watch("active",function(e){e&&a.select(t)})}}}).animation(".item",["$injector","$animate",function(t,e){function n(t,e,n){t.removeClass(e),n&&n()}var a="uib-noTransition",i="uib-slideDirection",o=null;return t.has("$animateCss")&&(o=t.get("$animateCss")),{beforeAddClass:function(t,r,s){if("active"==r&&t.parent()&&!t.parent().data(a)){var l=!1,c=t.data(i),u="next"==c?"left":"right",d=n.bind(this,t,u+" "+c,s);return t.addClass(c),o?o(t,{addClass:u}).start().done(d):e.addClass(t,u).then(function(){l||d(),s()}),function(){l=!0}}s()},beforeRemoveClass:function(t,r,s){if("active"===r&&t.parent()&&!t.parent().data(a)){var l=!1,c=t.data(i),u="next"==c?"left":"right",d=n.bind(this,t,u,s);return o?o(t,{addClass:u}).start().done(d):e.addClass(t,u).then(function(){l||d(),s()}),function(){l=!0}}s()}}}]),angular.module("ui.bootstrap.dateparser",[]).service("dateParser",["$log","$locale","orderByFilter",function(t,e,n){function a(t){var e=[],a=t.split("");return angular.forEach(r,function(n,i){var o=t.indexOf(i);if(o>-1){t=t.split(""),a[o]="("+n.regex+")",t[o]="$";for(var r=o+1,s=o+i.length;s>r;r++)a[r]="",t[r]="$";t=t.join(""),e.push({index:o,apply:n.apply})}}),{regex:new RegExp("^"+a.join("")+"$"),map:n(e,"index")}}function i(t,e,n){return 1>n?!1:1===e&&n>28?29===n&&(t%4===0&&t%100!==0||t%400===0):3===e||5===e||8===e||10===e?31>n:!0}var o=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;this.parsers={};var r={yyyy:{regex:"\\d{4}",apply:function(t){this.year=+t}},yy:{regex:"\\d{2}",apply:function(t){this.year=+t+2e3}},y:{regex:"\\d{1,4}",apply:function(t){this.year=+t}},MMMM:{regex:e.DATETIME_FORMATS.MONTH.join("|"),apply:function(t){this.month=e.DATETIME_FORMATS.MONTH.indexOf(t)}},MMM:{regex:e.DATETIME_FORMATS.SHORTMONTH.join("|"),apply:function(t){this.month=e.DATETIME_FORMATS.SHORTMONTH.indexOf(t)}},MM:{regex:"0[1-9]|1[0-2]",apply:function(t){this.month=t-1}},M:{regex:"[1-9]|1[0-2]",apply:function(t){this.month=t-1}},dd:{regex:"[0-2][0-9]{1}|3[0-1]{1}",apply:function(t){this.date=+t}},d:{regex:"[1-2]?[0-9]{1}|3[0-1]{1}",apply:function(t){this.date=+t}},EEEE:{regex:e.DATETIME_FORMATS.DAY.join("|")},EEE:{regex:e.DATETIME_FORMATS.SHORTDAY.join("|")},HH:{regex:"(?:0|1)[0-9]|2[0-3]",apply:function(t){this.hours=+t}},hh:{regex:"0[0-9]|1[0-2]",apply:function(t){this.hours=+t}},H:{regex:"1?[0-9]|2[0-3]",apply:function(t){this.hours=+t}},h:{regex:"[0-9]|1[0-2]",apply:function(t){this.hours=+t}},mm:{regex:"[0-5][0-9]",apply:function(t){this.minutes=+t}},m:{regex:"[0-9]|[1-5][0-9]",apply:function(t){this.minutes=+t}},sss:{regex:"[0-9][0-9][0-9]",apply:function(t){this.milliseconds=+t}},ss:{regex:"[0-5][0-9]",apply:function(t){this.seconds=+t}},s:{regex:"[0-9]|[1-5][0-9]",apply:function(t){this.seconds=+t}},a:{regex:e.DATETIME_FORMATS.AMPMS.join("|"),apply:function(t){12===this.hours&&(this.hours=0),"PM"===t&&(this.hours+=12)}}};this.parse=function(n,r,s){if(!angular.isString(n)||!r)return n;r=e.DATETIME_FORMATS[r]||r,r=r.replace(o,"\\$&"),this.parsers[r]||(this.parsers[r]=a(r));var l=this.parsers[r],c=l.regex,u=l.map,d=n.match(c);if(d&&d.length){var p,f;angular.isDate(s)&&!isNaN(s.getTime())?p={year:s.getFullYear(),month:s.getMonth(),date:s.getDate(),hours:s.getHours(),minutes:s.getMinutes(),seconds:s.getSeconds(),milliseconds:s.getMilliseconds()}:(s&&t.warn("dateparser:","baseDate is not a valid date"),p={year:1900,month:0,date:1,hours:0,minutes:0,seconds:0,milliseconds:0});for(var m=1,h=d.length;h>m;m++){var g=u[m-1];g.apply&&g.apply.call(p,d[m])}return i(p.year,p.month,p.date)&&(f=new Date(p.year,p.month,p.date,p.hours,p.minutes,p.seconds,p.milliseconds||0)),f}}}]),angular.module("ui.bootstrap.position",[]).factory("$position",["$document","$window",function(t,e){function n(t,n){return t.currentStyle?t.currentStyle[n]:e.getComputedStyle?e.getComputedStyle(t)[n]:t.style[n]}function a(t){return"static"===(n(t,"position")||"static")}var i=function(e){for(var n=t[0],i=e.offsetParent||n;i&&i!==n&&a(i);)i=i.offsetParent;return i||n};return{position:function(e){var n=this.offset(e),a={top:0,left:0},o=i(e[0]);o!=t[0]&&(a=this.offset(angular.element(o)),a.top+=o.clientTop-o.scrollTop,a.left+=o.clientLeft-o.scrollLeft);var r=e[0].getBoundingClientRect();return{width:r.width||e.prop("offsetWidth"),height:r.height||e.prop("offsetHeight"),top:n.top-a.top,left:n.left-a.left}},offset:function(n){var a=n[0].getBoundingClientRect();return{width:a.width||n.prop("offsetWidth"),height:a.height||n.prop("offsetHeight"),top:a.top+(e.pageYOffset||t[0].documentElement.scrollTop),left:a.left+(e.pageXOffset||t[0].documentElement.scrollLeft)}},positionElements:function(t,e,n,a){var i,o,r,s,l=n.split("-"),c=l[0],u=l[1]||"center";i=a?this.offset(t):this.position(t),o=e.prop("offsetWidth"),r=e.prop("offsetHeight");var d={center:function(){return i.left+i.width/2-o/2},left:function(){return i.left},right:function(){return i.left+i.width}},p={center:function(){return i.top+i.height/2-r/2},top:function(){return i.top},bottom:function(){return i.top+i.height}};switch(c){case"right":s={top:p[u](),left:d[c]()};break;case"left":s={top:p[u](),left:i.left-o};break;case"bottom":s={top:p[c](),left:d[u]()};break;default:s={top:i.top-r,left:d[u]()}}return s}}}]),angular.module("ui.bootstrap.datepicker",["ui.bootstrap.dateparser","ui.bootstrap.position"]).value("$datepickerSuppressError",!1).constant("datepickerConfig",{formatDay:"dd",formatMonth:"MMMM",formatYear:"yyyy",formatDayHeader:"EEE",formatDayTitle:"MMMM yyyy",formatMonthTitle:"yyyy",datepickerMode:"day",minMode:"day",maxMode:"year",showWeeks:!0,startingDay:0,yearRange:20,minDate:null,maxDate:null,shortcutPropagation:!1}).controller("DatepickerController",["$scope","$attrs","$parse","$interpolate","$log","dateFilter","datepickerConfig","$datepickerSuppressError",function(t,e,n,a,i,o,r,s){var l=this,c={$setViewValue:angular.noop};this.modes=["day","month","year"],angular.forEach(["formatDay","formatMonth","formatYear","formatDayHeader","formatDayTitle","formatMonthTitle","showWeeks","startingDay","yearRange","shortcutPropagation"],function(n,i){l[n]=angular.isDefined(e[n])?6>i?a(e[n])(t.$parent):t.$parent.$eval(e[n]):r[n]}),angular.forEach(["minDate","maxDate"],function(a){e[a]?t.$parent.$watch(n(e[a]),function(t){l[a]=t?new Date(t):null,l.refreshView()}):l[a]=r[a]?new Date(r[a]):null}),angular.forEach(["minMode","maxMode"],function(a){e[a]?t.$parent.$watch(n(e[a]),function(n){l[a]=angular.isDefined(n)?n:e[a],t[a]=l[a],("minMode"==a&&l.modes.indexOf(t.datepickerMode)<l.modes.indexOf(l[a])||"maxMode"==a&&l.modes.indexOf(t.datepickerMode)>l.modes.indexOf(l[a]))&&(t.datepickerMode=l[a])}):(l[a]=r[a]||null,t[a]=l[a])}),t.datepickerMode=t.datepickerMode||r.datepickerMode,t.uniqueId="datepicker-"+t.$id+"-"+Math.floor(1e4*Math.random()),angular.isDefined(e.initDate)?(this.activeDate=t.$parent.$eval(e.initDate)||new Date,t.$parent.$watch(e.initDate,function(t){t&&(c.$isEmpty(c.$modelValue)||c.$invalid)&&(l.activeDate=t,l.refreshView())})):this.activeDate=new Date,t.isActive=function(e){return 0===l.compare(e.date,l.activeDate)?(t.activeDateId=e.uid,!0):!1},this.init=function(t){c=t,c.$render=function(){l.render()}},this.render=function(){if(c.$viewValue){var t=new Date(c.$viewValue),e=!isNaN(t);e?this.activeDate=t:s||i.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')}this.refreshView()},this.refreshView=function(){if(this.element){this._refreshView();var t=c.$viewValue?new Date(c.$viewValue):null;c.$setValidity("dateDisabled",!t||this.element&&!this.isDisabled(t))}},this.createDateObject=function(t,e){var n=c.$viewValue?new Date(c.$viewValue):null;return{date:t,label:o(t,e),selected:n&&0===this.compare(t,n),disabled:this.isDisabled(t),current:0===this.compare(t,new Date),customClass:this.customClass(t)}},this.isDisabled=function(n){return this.minDate&&this.compare(n,this.minDate)<0||this.maxDate&&this.compare(n,this.maxDate)>0||e.dateDisabled&&t.dateDisabled({date:n,mode:t.datepickerMode})},this.customClass=function(e){return t.customClass({date:e,mode:t.datepickerMode})},this.split=function(t,e){for(var n=[];t.length>0;)n.push(t.splice(0,e));return n},this.fixTimeZone=function(t){var e=t.getHours();t.setHours(23===e?e+2:0)},t.select=function(e){if(t.datepickerMode===l.minMode){var n=c.$viewValue?new Date(c.$viewValue):new Date(0,0,0,0,0,0,0);n.setFullYear(e.getFullYear(),e.getMonth(),e.getDate()),c.$setViewValue(n),c.$render()}else l.activeDate=e,t.datepickerMode=l.modes[l.modes.indexOf(t.datepickerMode)-1]},t.move=function(t){var e=l.activeDate.getFullYear()+t*(l.step.years||0),n=l.activeDate.getMonth()+t*(l.step.months||0);l.activeDate.setFullYear(e,n,1),l.refreshView()},t.toggleMode=function(e){e=e||1,t.datepickerMode===l.maxMode&&1===e||t.datepickerMode===l.minMode&&-1===e||(t.datepickerMode=l.modes[l.modes.indexOf(t.datepickerMode)+e])},t.keys={13:"enter",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down"};var u=function(){l.element[0].focus()};t.$on("datepicker.focus",u),t.keydown=function(e){var n=t.keys[e.which];if(n&&!e.shiftKey&&!e.altKey)if(e.preventDefault(),l.shortcutPropagation||e.stopPropagation(),"enter"===n||"space"===n){if(l.isDisabled(l.activeDate))return;t.select(l.activeDate),u()}else!e.ctrlKey||"up"!==n&&"down"!==n?(l.handleKeyDown(n,e),l.refreshView()):(t.toggleMode("up"===n?1:-1),u())}}]).directive("datepicker",function(){return{restrict:"EA",replace:!0,templateUrl:function(t,e){return e.templateUrl||"template/datepicker/datepicker.html"},scope:{datepickerMode:"=?",dateDisabled:"&",customClass:"&",shortcutPropagation:"&?"},require:["datepicker","^ngModel"],controller:"DatepickerController",controllerAs:"datepicker",link:function(t,e,n,a){var i=a[0],o=a[1];i.init(o)}}}).directive("daypicker",["dateFilter",function(t){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/day.html",require:"^datepicker",link:function(e,n,a,i){function o(t,e){return 1!==e||t%4!==0||t%100===0&&t%400!==0?l[e]:29}function r(t,e){for(var n,a=new Array(e),o=new Date(t),r=0;e>r;)n=new Date(o),i.fixTimeZone(n),a[r++]=n,o.setDate(o.getDate()+1);return a}function s(t){var e=new Date(t);e.setDate(e.getDate()+4-(e.getDay()||7));var n=e.getTime();return e.setMonth(0),e.setDate(1),Math.floor(Math.round((n-e)/864e5)/7)+1}e.showWeeks=i.showWeeks,i.step={months:1},i.element=n;var l=[31,28,31,30,31,30,31,31,30,31,30,31];i._refreshView=function(){var n=i.activeDate.getFullYear(),a=i.activeDate.getMonth(),o=new Date(n,a,1),l=i.startingDay-o.getDay(),c=l>0?7-l:-l,u=new Date(o);c>0&&u.setDate(-c+1);for(var d=r(u,42),p=0;42>p;p++)d[p]=angular.extend(i.createDateObject(d[p],i.formatDay),{secondary:d[p].getMonth()!==a,uid:e.uniqueId+"-"+p});e.labels=new Array(7);for(var f=0;7>f;f++)e.labels[f]={abbr:t(d[f].date,i.formatDayHeader),full:t(d[f].date,"EEEE")};if(e.title=t(i.activeDate,i.formatDayTitle),e.rows=i.split(d,7),e.showWeeks){e.weekNumbers=[];for(var m=(11-i.startingDay)%7,h=e.rows.length,g=0;h>g;g++)e.weekNumbers.push(s(e.rows[g][m].date))}},i.compare=function(t,e){return new Date(t.getFullYear(),t.getMonth(),t.getDate())-new Date(e.getFullYear(),e.getMonth(),e.getDate())},i.handleKeyDown=function(t){var e=i.activeDate.getDate();if("left"===t)e-=1;else if("up"===t)e-=7;else if("right"===t)e+=1;else if("down"===t)e+=7;else if("pageup"===t||"pagedown"===t){var n=i.activeDate.getMonth()+("pageup"===t?-1:1);i.activeDate.setMonth(n,1),e=Math.min(o(i.activeDate.getFullYear(),i.activeDate.getMonth()),e)}else"home"===t?e=1:"end"===t&&(e=o(i.activeDate.getFullYear(),i.activeDate.getMonth()));i.activeDate.setDate(e)},i.refreshView()}}}]).directive("monthpicker",["dateFilter",function(t){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/month.html",require:"^datepicker",link:function(e,n,a,i){i.step={years:1},i.element=n,i._refreshView=function(){for(var n,a=new Array(12),o=i.activeDate.getFullYear(),r=0;12>r;r++)n=new Date(o,r,1),i.fixTimeZone(n),a[r]=angular.extend(i.createDateObject(n,i.formatMonth),{uid:e.uniqueId+"-"+r});e.title=t(i.activeDate,i.formatMonthTitle),e.rows=i.split(a,3)},i.compare=function(t,e){return new Date(t.getFullYear(),t.getMonth())-new Date(e.getFullYear(),e.getMonth())},i.handleKeyDown=function(t){var e=i.activeDate.getMonth();if("left"===t)e-=1;else if("up"===t)e-=3;else if("right"===t)e+=1;else if("down"===t)e+=3;else if("pageup"===t||"pagedown"===t){var n=i.activeDate.getFullYear()+("pageup"===t?-1:1);i.activeDate.setFullYear(n)}else"home"===t?e=0:"end"===t&&(e=11);i.activeDate.setMonth(e)},i.refreshView()}}}]).directive("yearpicker",["dateFilter",function(){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/year.html",require:"^datepicker",link:function(t,e,n,a){function i(t){return parseInt((t-1)/o,10)*o+1}var o=a.yearRange;a.step={years:o},a.element=e,a._refreshView=function(){for(var e,n=new Array(o),r=0,s=i(a.activeDate.getFullYear());o>r;r++)e=new Date(s+r,0,1),a.fixTimeZone(e),n[r]=angular.extend(a.createDateObject(e,a.formatYear),{uid:t.uniqueId+"-"+r});t.title=[n[0].label,n[o-1].label].join(" - "),t.rows=a.split(n,5)},a.compare=function(t,e){return t.getFullYear()-e.getFullYear()},a.handleKeyDown=function(t){var e=a.activeDate.getFullYear();"left"===t?e-=1:"up"===t?e-=5:"right"===t?e+=1:"down"===t?e+=5:"pageup"===t||"pagedown"===t?e+=("pageup"===t?-1:1)*a.step.years:"home"===t?e=i(a.activeDate.getFullYear()):"end"===t&&(e=i(a.activeDate.getFullYear())+o-1),a.activeDate.setFullYear(e)},a.refreshView()}}}]).constant("datepickerPopupConfig",{datepickerPopup:"yyyy-MM-dd",datepickerPopupTemplateUrl:"template/datepicker/popup.html",datepickerTemplateUrl:"template/datepicker/datepicker.html",html5Types:{date:"yyyy-MM-dd","datetime-local":"yyyy-MM-ddTHH:mm:ss.sss",month:"yyyy-MM"},currentText:"Today",clearText:"Clear",closeText:"Done",closeOnDateSelection:!0,appendToBody:!1,showButtonBar:!0,onOpenFocus:!0}).directive("datepickerPopup",["$compile","$parse","$document","$rootScope","$position","dateFilter","dateParser","datepickerPopupConfig","$timeout",function(t,e,n,a,i,o,r,s,l){return{restrict:"EA",require:"ngModel",scope:{isOpen:"=?",currentText:"@",clearText:"@",closeText:"@",dateDisabled:"&",customClass:"&"},link:function(c,u,d,p){function f(t){return t.replace(/([A-Z])/g,function(t){return"-"+t.toLowerCase()})}function m(t){if(angular.isNumber(t)&&(t=new Date(t)),t){if(angular.isDate(t)&&!isNaN(t))return t;if(angular.isString(t)){var e=r.parse(t,g,c.date);return isNaN(e)?void 0:e}return void 0}return null}function h(t,e){var n=t||e;if(!d.ngRequired&&!n)return!0;if(angular.isNumber(n)&&(n=new Date(n)),n){if(angular.isDate(n)&&!isNaN(n))return!0;if(angular.isString(n)){var a=r.parse(n,g);return!isNaN(a)}return!1}return!0}var g,v=angular.isDefined(d.closeOnDateSelection)?c.$parent.$eval(d.closeOnDateSelection):s.closeOnDateSelection,b=angular.isDefined(d.datepickerAppendToBody)?c.$parent.$eval(d.datepickerAppendToBody):s.appendToBody,y=angular.isDefined(d.onOpenFocus)?c.$parent.$eval(d.onOpenFocus):s.onOpenFocus,$=angular.isDefined(d.datepickerPopupTemplateUrl)?d.datepickerPopupTemplateUrl:s.datepickerPopupTemplateUrl,w=angular.isDefined(d.datepickerTemplateUrl)?d.datepickerTemplateUrl:s.datepickerTemplateUrl,k={};c.showButtonBar=angular.isDefined(d.showButtonBar)?c.$parent.$eval(d.showButtonBar):s.showButtonBar,c.getText=function(t){return c[t+"Text"]||s[t+"Text"]},c.isDisabled=function(t){return"today"===t&&(t=new Date),c.watchData.minDate&&c.compare(t,k.minDate)<0||c.watchData.maxDate&&c.compare(t,k.maxDate)>0},c.compare=function(t,e){return new Date(t.getFullYear(),t.getMonth(),t.getDate())-new Date(e.getFullYear(),e.getMonth(),e.getDate())};var x=!1;if(s.html5Types[d.type]?(g=s.html5Types[d.type],x=!0):(g=d.datepickerPopup||s.datepickerPopup,d.$observe("datepickerPopup",function(t){var e=t||s.datepickerPopup;if(e!==g&&(g=e,p.$modelValue=null,!g))throw new Error("datepickerPopup must have a date format specified.")})),!g)throw new Error("datepickerPopup must have a date format specified.");if(x&&d.datepickerPopup)throw new Error("HTML5 date input types do not support custom formats.");var C=angular.element("<div datepicker-popup-wrap><div datepicker></div></div>");C.attr({"ng-model":"date","ng-change":"dateSelection(date)","template-url":$});var D=angular.element(C.children()[0]);if(D.attr("template-url",w),x&&"month"===d.type&&(D.attr("datepicker-mode",'"month"'),D.attr("min-mode","month")),d.datepickerOptions){var T=c.$parent.$eval(d.datepickerOptions);T&&T.initDate&&(c.initDate=T.initDate,D.attr("init-date","initDate"),delete T.initDate),angular.forEach(T,function(t,e){D.attr(f(e),t)})}c.watchData={},angular.forEach(["minMode","maxMode","minDate","maxDate","datepickerMode","initDate","shortcutPropagation"],function(t){if(d[t]){var n=e(d[t]);if(c.$parent.$watch(n,function(e){c.watchData[t]=e,("minDate"===t||"maxDate"===t)&&(k[t]=new Date(e))}),D.attr(f(t),"watchData."+t),"datepickerMode"===t){var a=n.assign;c.$watch("watchData."+t,function(t,e){angular.isFunction(a)&&t!==e&&a(c.$parent,t)})}}}),d.dateDisabled&&D.attr("date-disabled","dateDisabled({ date: date, mode: mode })"),d.showWeeks&&D.attr("show-weeks",d.showWeeks),d.customClass&&D.attr("custom-class","customClass({ date: date, mode: mode })"),x?p.$formatters.push(function(t){return c.date=t,t}):(p.$$parserName="date",p.$validators.date=h,p.$parsers.unshift(m),p.$formatters.push(function(t){return c.date=t,p.$isEmpty(t)?t:o(t,g)})),c.dateSelection=function(t){angular.isDefined(t)&&(c.date=t);var e=c.date?o(c.date,g):null;u.val(e),p.$setViewValue(e),v&&(c.isOpen=!1,u[0].focus())},p.$viewChangeListeners.push(function(){c.date=r.parse(p.$viewValue,g,c.date)});var S=function(t){!c.isOpen||u[0].contains(t.target)||C[0].contains(t.target)||c.$apply(function(){c.isOpen=!1})},E=function(t){27===t.which&&c.isOpen?(t.preventDefault(),t.stopPropagation(),c.$apply(function(){c.isOpen=!1}),u[0].focus()):40!==t.which||c.isOpen||(t.preventDefault(),t.stopPropagation(),c.$apply(function(){c.isOpen=!0}))};u.bind("keydown",E),c.keydown=function(t){27===t.which&&(c.isOpen=!1,u[0].focus())},c.$watch("isOpen",function(t){t?(c.position=b?i.offset(u):i.position(u),c.position.top=c.position.top+u.prop("offsetHeight"),l(function(){y&&c.$broadcast("datepicker.focus"),n.bind("click",S)},0,!1)):n.unbind("click",S)}),c.select=function(t){if("today"===t){var e=new Date;angular.isDate(c.date)?(t=new Date(c.date),t.setFullYear(e.getFullYear(),e.getMonth(),e.getDate())):t=new Date(e.setHours(0,0,0,0))}c.dateSelection(t)},c.close=function(){c.isOpen=!1,u[0].focus()};var O=t(C)(c);C.remove(),b?n.find("body").append(O):u.after(O),c.$on("$destroy",function(){c.isOpen===!0&&(a.$$phase||c.$apply(function(){c.isOpen=!1})),O.remove(),u.unbind("keydown",E),n.unbind("click",S)})}}}]).directive("datepickerPopupWrap",function(){return{restrict:"EA",replace:!0,transclude:!0,templateUrl:function(t,e){return e.templateUrl||"template/datepicker/popup.html"}}}),angular.module("ui.bootstrap.dropdown",["ui.bootstrap.position"]).constant("dropdownConfig",{openClass:"open"}).service("dropdownService",["$document","$rootScope",function(t,e){var n=null;this.open=function(e){n||(t.bind("click",a),t.bind("keydown",i)),n&&n!==e&&(n.isOpen=!1),n=e},this.close=function(e){n===e&&(n=null,t.unbind("click",a),t.unbind("keydown",i))};var a=function(t){if(n&&(!t||"disabled"!==n.getAutoClose())){var a=n.getToggleElement();if(!(t&&a&&a[0].contains(t.target))){var i=n.getDropdownElement();t&&"outsideClick"===n.getAutoClose()&&i&&i[0].contains(t.target)||(n.isOpen=!1,e.$$phase||n.$apply())}}},i=function(t){27===t.which?(n.focusToggleElement(),a()):n.isKeynavEnabled()&&/(38|40)/.test(t.which)&&n.isOpen&&(t.preventDefault(),t.stopPropagation(),n.focusDropdownEntry(t.which))}}]).controller("DropdownController",["$scope","$attrs","$parse","dropdownConfig","dropdownService","$animate","$position","$document","$compile","$templateRequest",function(t,e,n,a,i,o,r,s,l,c){var u,d,p=this,f=t.$new(),m=a.openClass,h=angular.noop,g=e.onToggle?n(e.onToggle):angular.noop,v=!1,b=!1,y=s.find("body");this.init=function(a){p.$element=a,e.isOpen&&(d=n(e.isOpen),h=d.assign,t.$watch(d,function(t){f.isOpen=!!t})),v=angular.isDefined(e.dropdownAppendToBody),b=angular.isDefined(e.keyboardNav),v&&p.dropdownMenu&&(y.append(p.dropdownMenu),y.addClass("dropdown"),a.on("$destroy",function(){p.dropdownMenu.remove()}))},this.toggle=function(t){return f.isOpen=arguments.length?!!t:!f.isOpen},this.isOpen=function(){return f.isOpen},f.getToggleElement=function(){return p.toggleElement},f.getAutoClose=function(){return e.autoClose||"always"},f.getElement=function(){return p.$element},f.isKeynavEnabled=function(){return b},f.focusDropdownEntry=function(t){var e=p.dropdownMenu?angular.element(p.dropdownMenu).find("a"):angular.element(p.$element).find("ul").eq(0).find("a");switch(t){case 40:p.selectedOption=angular.isNumber(p.selectedOption)?p.selectedOption===e.length-1?p.selectedOption:p.selectedOption+1:0;break;case 38:p.selectedOption=angular.isNumber(p.selectedOption)?0===p.selectedOption?0:p.selectedOption-1:e.length-1}e[p.selectedOption].focus()},f.getDropdownElement=function(){return p.dropdownMenu},f.focusToggleElement=function(){p.toggleElement&&p.toggleElement[0].focus()},f.$watch("isOpen",function(e,n){if(v&&p.dropdownMenu){var a=r.positionElements(p.$element,p.dropdownMenu,"bottom-left",!0),s={top:a.top+"px",display:e?"block":"none"},d=p.dropdownMenu.hasClass("dropdown-menu-right");d?(s.left="auto",s.right=window.innerWidth-(a.left+p.$element.prop("offsetWidth"))+"px"):(s.left=a.left+"px",s.right="auto"),p.dropdownMenu.css(s)}var b=v?y:p.$element;if(o[e?"addClass":"removeClass"](b,m).then(function(){angular.isDefined(e)&&e!==n&&g(t,{open:!!e})}),e)p.dropdownMenuTemplateUrl&&c(p.dropdownMenuTemplateUrl).then(function(t){u=f.$new(),l(t.trim())(u,function(t){var e=t;p.dropdownMenu.replaceWith(e),p.dropdownMenu=e})}),f.focusToggleElement(),i.open(f);else{if(p.dropdownMenuTemplateUrl){u&&u.$destroy();var $=angular.element('<ul class="dropdown-menu"></ul>');p.dropdownMenu.replaceWith($),p.dropdownMenu=$}i.close(f),p.selectedOption=null}angular.isFunction(h)&&h(t,e)}),t.$on("$locationChangeSuccess",function(){"disabled"!==f.getAutoClose()&&(f.isOpen=!1)});var $=t.$on("$destroy",function(){f.$destroy()});f.$on("$destroy",$)}]).directive("dropdown",function(){return{controller:"DropdownController",link:function(t,e,n,a){a.init(e),e.addClass("dropdown")}}}).directive("dropdownMenu",function(){return{restrict:"AC",require:"?^dropdown",link:function(t,e,n,a){if(a){var i=n.templateUrl;i&&(a.dropdownMenuTemplateUrl=i),a.dropdownMenu||(a.dropdownMenu=e)}}}}).directive("keyboardNav",function(){return{restrict:"A",require:"?^dropdown",link:function(t,e,n,a){e.bind("keydown",function(t){if(-1!==[38,40].indexOf(t.which)){t.preventDefault(),t.stopPropagation();var e=a.dropdownMenu.find("a");switch(t.which){case 40:a.selectedOption=angular.isNumber(a.selectedOption)?a.selectedOption===e.length-1?a.selectedOption:a.selectedOption+1:0;break;case 38:a.selectedOption=angular.isNumber(a.selectedOption)?0===a.selectedOption?0:a.selectedOption-1:e.length-1}e[a.selectedOption].focus()}})}}}).directive("dropdownToggle",function(){return{require:"?^dropdown",link:function(t,e,n,a){if(a){e.addClass("dropdown-toggle"),a.toggleElement=e;var i=function(i){i.preventDefault(),e.hasClass("disabled")||n.disabled||t.$apply(function(){a.toggle()})};e.bind("click",i),e.attr({"aria-haspopup":!0,"aria-expanded":!1}),t.$watch(a.isOpen,function(t){e.attr("aria-expanded",!!t)}),t.$on("$destroy",function(){e.unbind("click",i)})}}}}),angular.module("ui.bootstrap.modal",[]).factory("$$stackedMap",function(){return{createNew:function(){var t=[];return{add:function(e,n){t.push({key:e,value:n})},get:function(e){for(var n=0;n<t.length;n++)if(e==t[n].key)return t[n]},keys:function(){for(var e=[],n=0;n<t.length;n++)e.push(t[n].key);return e},top:function(){return t[t.length-1]},remove:function(e){for(var n=-1,a=0;a<t.length;a++)if(e==t[a].key){n=a;break}return t.splice(n,1)[0]},removeTop:function(){return t.splice(t.length-1,1)[0]},length:function(){return t.length}}}}}).factory("$$multiMap",function(){return{createNew:function(){var t={};return{entries:function(){return Object.keys(t).map(function(e){return{key:e,value:t[e]}})},get:function(e){return t[e]},hasKey:function(e){return!!t[e]},keys:function(){return Object.keys(t)},put:function(e,n){t[e]||(t[e]=[]),t[e].push(n)},remove:function(e,n){var a=t[e];if(a){var i=a.indexOf(n);-1!==i&&a.splice(i,1),a.length||delete t[e]}}}}}}).directive("modalBackdrop",["$animate","$injector","$modalStack",function(t,e,n){function a(e,a,o){o.modalInClass&&(i?i(a,{addClass:o.modalInClass}).start():t.addClass(a,o.modalInClass),e.$on(n.NOW_CLOSING_EVENT,function(e,n){var r=n();i?i(a,{removeClass:o.modalInClass}).start().then(r):t.removeClass(a,o.modalInClass).then(r)}))}var i=null;return e.has("$animateCss")&&(i=e.get("$animateCss")),{restrict:"EA",replace:!0,templateUrl:"template/modal/backdrop.html",compile:function(t,e){return t.addClass(e.backdropClass),a}}}]).directive("modalWindow",["$modalStack","$q","$animate","$injector",function(t,e,n,a){var i=null;return a.has("$animateCss")&&(i=a.get("$animateCss")),{restrict:"EA",scope:{index:"@"},replace:!0,transclude:!0,templateUrl:function(t,e){return e.templateUrl||"template/modal/window.html"},link:function(a,o,r){o.addClass(r.windowClass||""),a.size=r.size,a.close=function(e){var n=t.getTop();n&&n.value.backdrop&&"static"!==n.value.backdrop&&e.target===e.currentTarget&&(e.preventDefault(),e.stopPropagation(),t.dismiss(n.key,"backdrop click"))},a.$isRendered=!0;var s=e.defer();r.$observe("modalRender",function(t){"true"==t&&s.resolve()}),s.promise.then(function(){var s=null;r.modalInClass&&(s=i?i(o,{addClass:r.modalInClass}).start():n.addClass(o,r.modalInClass),a.$on(t.NOW_CLOSING_EVENT,function(t,e){var a=e();i?i(o,{removeClass:r.modalInClass}).start().then(a):n.removeClass(o,r.modalInClass).then(a)})),e.when(s).then(function(){var t=o[0].querySelectorAll("[autofocus]");t.length?t[0].focus():o[0].focus()});var l=t.getTop();l&&t.modalRendered(l.key)})}}}]).directive("modalAnimationClass",[function(){return{compile:function(t,e){e.modalAnimation&&t.addClass(e.modalAnimationClass)}}}]).directive("modalTransclude",function(){return{link:function(t,e,n,a,i){i(t.$parent,function(t){e.empty(),e.append(t)})}}}).factory("$modalStack",["$animate","$timeout","$document","$compile","$rootScope","$q","$injector","$$multiMap","$$stackedMap",function(t,e,n,a,i,o,r,s,l){function c(){for(var t=-1,e=y.keys(),n=0;n<e.length;n++)y.get(e[n]).value.backdrop&&(t=n);return t}function u(t,e){var a=n.find("body").eq(0),i=y.get(t).value;y.remove(t),p(i.modalDomEl,i.modalScope,function(){var e=i.openedClass||b;$.remove(e,t),a.toggleClass(e,$.hasKey(e))}),d(),e&&e.focus?e.focus():a.focus()}function d(){if(h&&-1==c()){var t=g;p(h,g,function(){t=null}),h=void 0,g=void 0}}function p(e,n,a){function i(){i.done||(i.done=!0,m?m(e,{event:"leave"}).start().then(function(){e.remove()}):t.leave(e),n.$destroy(),a&&a())}var r,s=null,l=function(){return r||(r=o.defer(),s=r.promise),function(){r.resolve()}};return n.$broadcast(w.NOW_CLOSING_EVENT,l),o.when(s).then(i)}function f(t,e,n){return!t.value.modalScope.$broadcast("modal.closing",e,n).defaultPrevented}var m=null;r.has("$animateCss")&&(m=r.get("$animateCss"));var h,g,v,b="modal-open",y=l.createNew(),$=s.createNew(),w={NOW_CLOSING_EVENT:"modal.stack.now-closing"},k=0,x="a[href], area[href], input:not([disabled]), button:not([disabled]),select:not([disabled]), textarea:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable=true]";return i.$watch(c,function(t){g&&(g.index=t)}),n.bind("keydown",function(t){if(t.isDefaultPrevented())return t;var e=y.top();if(e&&e.value.keyboard)switch(t.which){case 27:t.preventDefault(),i.$apply(function(){w.dismiss(e.key,"escape key press")});break;case 9:w.loadFocusElementList(e);var n=!1;t.shiftKey?w.isFocusInFirstItem(t)&&(n=w.focusLastFocusableElement()):w.isFocusInLastItem(t)&&(n=w.focusFirstFocusableElement()),n&&(t.preventDefault(),t.stopPropagation())}}),w.open=function(t,e){var o=n[0].activeElement,r=e.openedClass||b;y.add(t,{deferred:e.deferred,renderDeferred:e.renderDeferred,modalScope:e.scope,backdrop:e.backdrop,keyboard:e.keyboard,openedClass:e.openedClass}),$.put(r,t);var s=n.find("body").eq(0),l=c();if(l>=0&&!h){g=i.$new(!0),g.index=l;var u=angular.element('<div modal-backdrop="modal-backdrop"></div>');u.attr("backdrop-class",e.backdropClass),e.animation&&u.attr("modal-animation","true"),h=a(u)(g),s.append(h)}var d=angular.element('<div modal-window="modal-window"></div>');d.attr({"template-url":e.windowTemplateUrl,"window-class":e.windowClass,size:e.size,index:y.length()-1,animate:"animate"}).html(e.content),e.animation&&d.attr("modal-animation","true");var p=a(d)(e.scope);y.top().value.modalDomEl=p,y.top().value.modalOpener=o,s.append(p),s.addClass(r),w.clearFocusListCache()},w.close=function(t,e){var n=y.get(t);return n&&f(n,e,!0)?(n.value.modalScope.$$uibDestructionScheduled=!0,n.value.deferred.resolve(e),u(t,n.value.modalOpener),!0):!n},w.dismiss=function(t,e){var n=y.get(t);return n&&f(n,e,!1)?(n.value.modalScope.$$uibDestructionScheduled=!0,n.value.deferred.reject(e),u(t,n.value.modalOpener),!0):!n},w.dismissAll=function(t){for(var e=this.getTop();e&&this.dismiss(e.key,t);)e=this.getTop()},w.getTop=function(){return y.top()},w.modalRendered=function(t){var e=y.get(t);e&&e.value.renderDeferred.resolve()},w.focusFirstFocusableElement=function(){return v.length>0?(v[0].focus(),!0):!1},w.focusLastFocusableElement=function(){return v.length>0?(v[v.length-1].focus(),!0):!1},w.isFocusInFirstItem=function(t){return v.length>0?(t.target||t.srcElement)==v[0]:!1},w.isFocusInLastItem=function(t){return v.length>0?(t.target||t.srcElement)==v[v.length-1]:!1},w.clearFocusListCache=function(){v=[],k=0},w.loadFocusElementList=function(t){if((void 0===v||!v.length0)&&t){var e=t.value.modalDomEl;e&&e.length&&(v=e[0].querySelectorAll(x))}},w}]).provider("$modal",function(){var t={options:{animation:!0,backdrop:!0,keyboard:!0},$get:["$injector","$rootScope","$q","$templateRequest","$controller","$modalStack",function(e,n,a,i,o,r){function s(t){return t.template?a.when(t.template):i(angular.isFunction(t.templateUrl)?t.templateUrl():t.templateUrl)}function l(t){var n=[];return angular.forEach(t,function(t){angular.isFunction(t)||angular.isArray(t)?n.push(a.when(e.invoke(t))):angular.isString(t)?n.push(a.when(e.get(t))):n.push(a.when(t))}),n}var c={},u=null;return c.getPromiseChain=function(){return u
},c.open=function(e){var i=a.defer(),c=a.defer(),d=a.defer(),p={result:i.promise,opened:c.promise,rendered:d.promise,close:function(t){return r.close(p,t)},dismiss:function(t){return r.dismiss(p,t)}};if(e=angular.extend({},t.options,e),e.resolve=e.resolve||{},!e.template&&!e.templateUrl)throw new Error("One of template or templateUrl options is required.");var f,m=a.all([s(e)].concat(l(e.resolve)));return f=u=a.all([u]).then(function(){return m},function(){return m}).then(function(t){var a=(e.scope||n).$new();a.$close=p.close,a.$dismiss=p.dismiss,a.$on("$destroy",function(){a.$$uibDestructionScheduled||a.$dismiss("$uibUnscheduledDestruction")});var s,l={},u=1;e.controller&&(l.$scope=a,l.$modalInstance=p,angular.forEach(e.resolve,function(e,n){l[n]=t[u++]}),s=o(e.controller,l),e.controllerAs&&(e.bindToController&&angular.extend(s,a),a[e.controllerAs]=s)),r.open(p,{scope:a,deferred:i,renderDeferred:d,content:t[0],animation:e.animation,backdrop:e.backdrop,keyboard:e.keyboard,backdropClass:e.backdropClass,windowClass:e.windowClass,windowTemplateUrl:e.windowTemplateUrl,size:e.size,openedClass:e.openedClass}),c.resolve(!0)},function(t){c.reject(t),i.reject(t)}).finally(function(){u===f&&(u=null)}),p},c}]};return t}),angular.module("ui.bootstrap.pagination",[]).controller("PaginationController",["$scope","$attrs","$parse",function(t,e,n){var a=this,i={$setViewValue:angular.noop},o=e.numPages?n(e.numPages).assign:angular.noop;this.init=function(r,s){i=r,this.config=s,i.$render=function(){a.render()},e.itemsPerPage?t.$parent.$watch(n(e.itemsPerPage),function(e){a.itemsPerPage=parseInt(e,10),t.totalPages=a.calculateTotalPages()}):this.itemsPerPage=s.itemsPerPage,t.$watch("totalItems",function(){t.totalPages=a.calculateTotalPages()}),t.$watch("totalPages",function(e){o(t.$parent,e),t.page>e?t.selectPage(e):i.$render()})},this.calculateTotalPages=function(){var e=this.itemsPerPage<1?1:Math.ceil(t.totalItems/this.itemsPerPage);return Math.max(e||0,1)},this.render=function(){t.page=parseInt(i.$viewValue,10)||1},t.selectPage=function(e,n){n&&n.preventDefault();var a=!t.ngDisabled||!n;a&&t.page!==e&&e>0&&e<=t.totalPages&&(n&&n.target&&n.target.blur(),i.$setViewValue(e),i.$render())},t.getText=function(e){return t[e+"Text"]||a.config[e+"Text"]},t.noPrevious=function(){return 1===t.page},t.noNext=function(){return t.page===t.totalPages}}]).constant("paginationConfig",{itemsPerPage:10,boundaryLinks:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0}).directive("pagination",["$parse","paginationConfig",function(t,e){return{restrict:"EA",scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@",ngDisabled:"="},require:["pagination","?ngModel"],controller:"PaginationController",controllerAs:"pagination",templateUrl:function(t,e){return e.templateUrl||"template/pagination/pagination.html"},replace:!0,link:function(n,a,i,o){function r(t,e,n){return{number:t,text:e,active:n}}function s(t,e){var n=[],a=1,i=e,o=angular.isDefined(u)&&e>u;o&&(d?(a=Math.max(t-Math.floor(u/2),1),i=a+u-1,i>e&&(i=e,a=i-u+1)):(a=(Math.ceil(t/u)-1)*u+1,i=Math.min(a+u-1,e)));for(var s=a;i>=s;s++){var l=r(s,s,s===t);n.push(l)}if(o&&!d){if(a>1){var c=r(a-1,"...",!1);n.unshift(c)}if(e>i){var p=r(i+1,"...",!1);n.push(p)}}return n}var l=o[0],c=o[1];if(c){var u=angular.isDefined(i.maxSize)?n.$parent.$eval(i.maxSize):e.maxSize,d=angular.isDefined(i.rotate)?n.$parent.$eval(i.rotate):e.rotate;n.boundaryLinks=angular.isDefined(i.boundaryLinks)?n.$parent.$eval(i.boundaryLinks):e.boundaryLinks,n.directionLinks=angular.isDefined(i.directionLinks)?n.$parent.$eval(i.directionLinks):e.directionLinks,l.init(c,e),i.maxSize&&n.$parent.$watch(t(i.maxSize),function(t){u=parseInt(t,10),l.render()});var p=l.render;l.render=function(){p(),n.page>0&&n.page<=n.totalPages&&(n.pages=s(n.page,n.totalPages))}}}}}]).constant("pagerConfig",{itemsPerPage:10,previousText:"« Previous",nextText:"Next »",align:!0}).directive("pager",["pagerConfig",function(t){return{restrict:"EA",scope:{totalItems:"=",previousText:"@",nextText:"@",ngDisabled:"="},require:["pager","?ngModel"],controller:"PaginationController",controllerAs:"pagination",templateUrl:function(t,e){return e.templateUrl||"template/pagination/pager.html"},replace:!0,link:function(e,n,a,i){var o=i[0],r=i[1];r&&(e.align=angular.isDefined(a.align)?e.$parent.$eval(a.align):t.align,o.init(r,t))}}}]),angular.module("ui.bootstrap.tooltip",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).provider("$tooltip",function(){function t(t){var e=/[A-Z]/g,n="-";return t.replace(e,function(t,e){return(e?n:"")+t.toLowerCase()})}var e={placement:"top",animation:!0,popupDelay:0,useContentExp:!1},n={mouseenter:"mouseleave",click:"click",focus:"blur",none:""},a={};this.options=function(t){angular.extend(a,t)},this.setTriggers=function(t){angular.extend(n,t)},this.$get=["$window","$compile","$timeout","$document","$position","$interpolate","$rootScope","$parse",function(i,o,r,s,l,c,u,d){return function(i,p,f,m){function h(t){var e=(t||m.trigger||f).split(" "),a=e.map(function(t){return n[t]||t});return{show:e,hide:a}}m=angular.extend({},e,a,m);var g=t(i),v=c.startSymbol(),b=c.endSymbol(),y="<div "+g+'-popup title="'+v+"title"+b+'" '+(m.useContentExp?'content-exp="contentExp()" ':'content="'+v+"content"+b+'" ')+'placement="'+v+"placement"+b+'" popup-class="'+v+"popupClass"+b+'" animation="animation" is-open="isOpen"origin-scope="origScope" ></div>';return{restrict:"EA",compile:function(){var t=o(y);return function(e,n,a){function o(){I.isOpen?f():c()}function c(){(!P||e.$eval(a[p+"Enable"]))&&($(),I.popupDelay?E||(E=r(g,I.popupDelay,!1)):g())}function f(){v(),u.$$phase||u.$digest()}function g(){return E=null,S&&(r.cancel(S),S=null),(m.useContentExp?I.contentExp():I.content)?(b(),I.isOpen=!0,L&&L.assign(I.origScope,I.isOpen),u.$$phase||I.$apply(),D.css({display:"block"}),U(),void 0):angular.noop}function v(){I.isOpen=!1,L&&L.assign(I.origScope,I.isOpen),r.cancel(E),E=null,r.cancel(O),O=null,I.animation?S||(S=r(y,500)):y()}function b(){D&&y(),T=I.$new(),D=t(T,function(t){M?s.find("body").append(t):n.after(t)}),m.useContentExp&&(T.$watch("contentExp()",function(t){!t&&I.isOpen&&v()}),T.$watch(function(){F||(F=!0,T.$$postDigest(function(){F=!1,I.isOpen&&U()}))}))}function y(){S=null,D&&(D.remove(),D=null),T&&(T.$destroy(),T=null)}function $(){w(),k(),x()}function w(){I.popupClass=a[p+"Class"]}function k(){var t=a[p+"Placement"];I.placement=angular.isDefined(t)?t:m.placement}function x(){var t=a[p+"PopupDelay"],e=parseInt(t,10);I.popupDelay=isNaN(e)?m.popupDelay:e}function C(){var t=a[p+"Trigger"];N(),A=h(t),"none"!==A.show&&A.show.forEach(function(t,e){t===A.hide[e]?n[0].addEventListener(t,o):t&&(n[0].addEventListener(t,c),n[0].addEventListener(A.hide[e],f))})}var D,T,S,E,O,M=angular.isDefined(m.appendToBody)?m.appendToBody:!1,A=h(void 0),P=angular.isDefined(a[p+"Enable"]),I=e.$new(!0),F=!1,L=angular.isDefined(a[p+"IsOpen"])?d(a[p+"IsOpen"]):!1,U=function(){D&&(O||(O=r(function(){D.css({top:0,left:0,width:"auto",height:"auto"});var t=l.position(D),e=l.positionElements(n,D,I.placement,M);e.top+="px",e.left+="px",e.width=t.width+"px",e.height=t.height+"px",D.css(e),O=null},0,!1)))};I.origScope=e,I.isOpen=!1,I.contentExp=function(){return e.$eval(a[i])},m.useContentExp||a.$observe(i,function(t){I.content=t,!t&&I.isOpen?v():U()}),a.$observe("disabled",function(t){E&&t&&(r.cancel(E),E=null),t&&I.isOpen&&v()}),a.$observe(p+"Title",function(t){I.title=t,U()}),a.$observe(p+"Placement",function(){I.isOpen&&(k(),U())}),L&&e.$watch(L,function(t){t!==I.isOpen&&o()});var N=function(){A.show.forEach(function(t){n.unbind(t,c)}),A.hide.forEach(function(t){n.unbind(t,f)})};C();var V=e.$eval(a[p+"Animation"]);I.animation=angular.isDefined(V)?!!V:m.animation;var H=e.$eval(a[p+"AppendToBody"]);M=angular.isDefined(H)?H:M,M&&e.$on("$locationChangeSuccess",function(){I.isOpen&&v()}),e.$on("$destroy",function(){r.cancel(S),r.cancel(E),r.cancel(O),N(),y(),I=null})}}}}}]}).directive("tooltipTemplateTransclude",["$animate","$sce","$compile","$templateRequest",function(t,e,n,a){return{link:function(i,o,r){var s,l,c,u=i.$eval(r.tooltipTemplateTranscludeScope),d=0,p=function(){l&&(l.remove(),l=null),s&&(s.$destroy(),s=null),c&&(t.leave(c).then(function(){l=null}),l=c,c=null)};i.$watch(e.parseAsResourceUrl(r.tooltipTemplateTransclude),function(e){var r=++d;e?(a(e,!0).then(function(a){if(r===d){var i=u.$new(),l=a,f=n(l)(i,function(e){p(),t.enter(e,o)});s=i,c=f,s.$emit("$includeContentLoaded",e)}},function(){r===d&&(p(),i.$emit("$includeContentError",e))}),i.$emit("$includeContentRequested",e)):p()}),i.$on("$destroy",p)}}}]).directive("tooltipClasses",function(){return{restrict:"A",link:function(t,e,n){t.placement&&e.addClass(t.placement),t.popupClass&&e.addClass(t.popupClass),t.animation()&&e.addClass(n.tooltipAnimationClass)}}}).directive("tooltipPopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-popup.html"}}).directive("tooltip",["$tooltip",function(t){return t("tooltip","tooltip","mouseenter")}]).directive("tooltipTemplatePopup",function(){return{restrict:"EA",replace:!0,scope:{contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&",originScope:"&"},templateUrl:"template/tooltip/tooltip-template-popup.html"}}).directive("tooltipTemplate",["$tooltip",function(t){return t("tooltipTemplate","tooltip","mouseenter",{useContentExp:!0})}]).directive("tooltipHtmlPopup",function(){return{restrict:"EA",replace:!0,scope:{contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-html-popup.html"}}).directive("tooltipHtml",["$tooltip",function(t){return t("tooltipHtml","tooltip","mouseenter",{useContentExp:!0})}]).directive("tooltipHtmlUnsafePopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-html-unsafe-popup.html"}}).value("tooltipHtmlUnsafeSuppressDeprecated",!1).directive("tooltipHtmlUnsafe",["$tooltip","tooltipHtmlUnsafeSuppressDeprecated","$log",function(t,e,n){return e||n.warn("tooltip-html-unsafe is now deprecated. Use tooltip-html or tooltip-template instead."),t("tooltipHtmlUnsafe","tooltip","mouseenter")}]),angular.module("ui.bootstrap.popover",["ui.bootstrap.tooltip"]).directive("popoverTemplatePopup",function(){return{restrict:"EA",replace:!0,scope:{title:"@",contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&",originScope:"&"},templateUrl:"template/popover/popover-template.html"}}).directive("popoverTemplate",["$tooltip",function(t){return t("popoverTemplate","popover","click",{useContentExp:!0})}]).directive("popoverHtmlPopup",function(){return{restrict:"EA",replace:!0,scope:{contentExp:"&",title:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/popover/popover-html.html"}}).directive("popoverHtml",["$tooltip",function(t){return t("popoverHtml","popover","click",{useContentExp:!0})}]).directive("popoverPopup",function(){return{restrict:"EA",replace:!0,scope:{title:"@",content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/popover/popover.html"}}).directive("popover",["$tooltip",function(t){return t("popover","popover","click")}]),angular.module("ui.bootstrap.progressbar",[]).constant("progressConfig",{animate:!0,max:100}).value("$progressSuppressWarning",!1).controller("ProgressController",["$scope","$attrs","progressConfig",function(t,e,n){var a=this,i=angular.isDefined(e.animate)?t.$parent.$eval(e.animate):n.animate;this.bars=[],t.max=angular.isDefined(t.max)?t.max:n.max,this.addBar=function(e,n){i||n.css({transition:"none"}),this.bars.push(e),e.max=t.max,e.$watch("value",function(){e.recalculatePercentage()}),e.recalculatePercentage=function(){e.percent=+(100*e.value/e.max).toFixed(2);var t=a.bars.reduce(function(t,e){return t+e.percent},0);t>100&&(e.percent-=t-100)},e.$on("$destroy",function(){n=null,a.removeBar(e)})},this.removeBar=function(t){this.bars.splice(this.bars.indexOf(t),1)},t.$watch("max",function(){a.bars.forEach(function(e){e.max=t.max,e.recalculatePercentage()})})}]).directive("uibProgress",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",require:"uibProgress",scope:{max:"=?"},templateUrl:"template/progressbar/progress.html"}}).directive("progress",["$log","$progressSuppressWarning",function(t,e){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",require:"progress",scope:{max:"=?"},templateUrl:"template/progressbar/progress.html",link:function(){e&&t.warn("progress is now deprecated. Use uib-progress instead")}}}]).directive("uibBar",function(){return{restrict:"EA",replace:!0,transclude:!0,require:"^uibProgress",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/bar.html",link:function(t,e,n,a){a.addBar(t,e)}}}).directive("bar",["$log","$progressSuppressWarning",function(t,e){return{restrict:"EA",replace:!0,transclude:!0,require:"^progress",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/bar.html",link:function(n,a,i,o){e&&t.warn("bar is now deprecated. Use uib-bar instead"),o.addBar(n,a)}}}]).directive("progressbar",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",scope:{value:"=",max:"=?",type:"@"},templateUrl:"template/progressbar/progressbar.html",link:function(t,e,n,a){a.addBar(t,angular.element(e.children()[0]))}}}),angular.module("ui.bootstrap.rating",[]).constant("ratingConfig",{max:5,stateOn:null,stateOff:null,titles:["one","two","three","four","five"]}).controller("RatingController",["$scope","$attrs","ratingConfig",function(t,e,n){var a={$setViewValue:angular.noop};this.init=function(i){a=i,a.$render=this.render,a.$formatters.push(function(t){return angular.isNumber(t)&&t<<0!==t&&(t=Math.round(t)),t}),this.stateOn=angular.isDefined(e.stateOn)?t.$parent.$eval(e.stateOn):n.stateOn,this.stateOff=angular.isDefined(e.stateOff)?t.$parent.$eval(e.stateOff):n.stateOff;var o=angular.isDefined(e.titles)?t.$parent.$eval(e.titles):n.titles;this.titles=angular.isArray(o)&&o.length>0?o:n.titles;var r=angular.isDefined(e.ratingStates)?t.$parent.$eval(e.ratingStates):new Array(angular.isDefined(e.max)?t.$parent.$eval(e.max):n.max);t.range=this.buildTemplateObjects(r)},this.buildTemplateObjects=function(t){for(var e=0,n=t.length;n>e;e++)t[e]=angular.extend({index:e},{stateOn:this.stateOn,stateOff:this.stateOff,title:this.getTitle(e)},t[e]);return t},this.getTitle=function(t){return t>=this.titles.length?t+1:this.titles[t]},t.rate=function(e){!t.readonly&&e>=0&&e<=t.range.length&&(a.$setViewValue(a.$viewValue===e?0:e),a.$render())},t.enter=function(e){t.readonly||(t.value=e),t.onHover({value:e})},t.reset=function(){t.value=a.$viewValue,t.onLeave()},t.onKeydown=function(e){/(37|38|39|40)/.test(e.which)&&(e.preventDefault(),e.stopPropagation(),t.rate(t.value+(38===e.which||39===e.which?1:-1)))},this.render=function(){t.value=a.$viewValue}}]).directive("rating",function(){return{restrict:"EA",require:["rating","ngModel"],scope:{readonly:"=?",onHover:"&",onLeave:"&"},controller:"RatingController",templateUrl:"template/rating/rating.html",replace:!0,link:function(t,e,n,a){var i=a[0],o=a[1];i.init(o)}}}),angular.module("ui.bootstrap.tabs",[]).controller("TabsetController",["$scope",function(t){var e=this,n=e.tabs=t.tabs=[];e.select=function(t){angular.forEach(n,function(e){e.active&&e!==t&&(e.active=!1,e.onDeselect(),t.selectCalled=!1)}),t.active=!0,t.selectCalled||(t.onSelect(),t.selectCalled=!0)},e.addTab=function(t){n.push(t),1===n.length&&t.active!==!1?t.active=!0:t.active?e.select(t):t.active=!1},e.removeTab=function(t){var i=n.indexOf(t);if(t.active&&n.length>1&&!a){var o=i==n.length-1?i-1:i+1;e.select(n[o])}n.splice(i,1)};var a;t.$on("$destroy",function(){a=!0})}]).directive("tabset",function(){return{restrict:"EA",transclude:!0,replace:!0,scope:{type:"@"},controller:"TabsetController",templateUrl:"template/tabs/tabset.html",link:function(t,e,n){t.vertical=angular.isDefined(n.vertical)?t.$parent.$eval(n.vertical):!1,t.justified=angular.isDefined(n.justified)?t.$parent.$eval(n.justified):!1}}}).directive("tab",["$parse","$log",function(t,e){return{require:"^tabset",restrict:"EA",replace:!0,templateUrl:"template/tabs/tab.html",transclude:!0,scope:{active:"=?",heading:"@",onSelect:"&select",onDeselect:"&deselect"},controller:function(){},link:function(n,a,i,o,r){n.$watch("active",function(t){t&&o.select(n)}),n.disabled=!1,i.disable&&n.$parent.$watch(t(i.disable),function(t){n.disabled=!!t}),i.disabled&&(e.warn('Use of "disabled" attribute has been deprecated, please use "disable"'),n.$parent.$watch(t(i.disabled),function(t){n.disabled=!!t})),n.select=function(){n.disabled||(n.active=!0)},o.addTab(n),n.$on("$destroy",function(){o.removeTab(n)}),n.$transcludeFn=r}}}]).directive("tabHeadingTransclude",function(){return{restrict:"A",require:"^tab",link:function(t,e){t.$watch("headingElement",function(t){t&&(e.html(""),e.append(t))})}}}).directive("tabContentTransclude",function(){function t(t){return t.tagName&&(t.hasAttribute("tab-heading")||t.hasAttribute("data-tab-heading")||t.hasAttribute("x-tab-heading")||"tab-heading"===t.tagName.toLowerCase()||"data-tab-heading"===t.tagName.toLowerCase()||"x-tab-heading"===t.tagName.toLowerCase())}return{restrict:"A",require:"^tabset",link:function(e,n,a){var i=e.$eval(a.tabContentTransclude);i.$transcludeFn(i.$parent,function(e){angular.forEach(e,function(e){t(e)?i.headingElement=e:n.append(e)})})}}}),angular.module("ui.bootstrap.timepicker",[]).constant("timepickerConfig",{hourStep:1,minuteStep:1,showMeridian:!0,meridians:null,readonlyInput:!1,mousewheel:!0,arrowkeys:!0,showSpinners:!0}).controller("TimepickerController",["$scope","$attrs","$parse","$log","$locale","timepickerConfig",function(t,e,n,a,i,o){function r(){var e=parseInt(t.hours,10),n=t.showMeridian?e>0&&13>e:e>=0&&24>e;return n?(t.showMeridian&&(12===e&&(e=0),t.meridian===g[1]&&(e+=12)),e):void 0}function s(){var e=parseInt(t.minutes,10);return e>=0&&60>e?e:void 0}function l(t){return angular.isDefined(t)&&t.toString().length<2?"0"+t:t.toString()}function c(t){u(),h.$setViewValue(new Date(m)),d(t)}function u(){h.$setValidity("time",!0),t.invalidHours=!1,t.invalidMinutes=!1}function d(e){var n=m.getHours(),a=m.getMinutes();t.showMeridian&&(n=0===n||12===n?12:n%12),t.hours="h"===e?n:l(n),"m"!==e&&(t.minutes=l(a)),t.meridian=m.getHours()<12?g[0]:g[1]}function p(t,e){var n=new Date(t.getTime()+6e4*e),a=new Date(t);return a.setHours(n.getHours(),n.getMinutes()),a}function f(t){m=p(m,t),c()}var m=new Date,h={$setViewValue:angular.noop},g=angular.isDefined(e.meridians)?t.$parent.$eval(e.meridians):o.meridians||i.DATETIME_FORMATS.AMPMS;this.init=function(n,a){h=n,h.$render=this.render,h.$formatters.unshift(function(t){return t?new Date(t):null});var i=a.eq(0),r=a.eq(1),s=angular.isDefined(e.mousewheel)?t.$parent.$eval(e.mousewheel):o.mousewheel;s&&this.setupMousewheelEvents(i,r);var l=angular.isDefined(e.arrowkeys)?t.$parent.$eval(e.arrowkeys):o.arrowkeys;l&&this.setupArrowkeyEvents(i,r),t.readonlyInput=angular.isDefined(e.readonlyInput)?t.$parent.$eval(e.readonlyInput):o.readonlyInput,this.setupInputEvents(i,r)};var v=o.hourStep;e.hourStep&&t.$parent.$watch(n(e.hourStep),function(t){v=parseInt(t,10)});var b=o.minuteStep;e.minuteStep&&t.$parent.$watch(n(e.minuteStep),function(t){b=parseInt(t,10)});var y;t.$parent.$watch(n(e.min),function(t){var e=new Date(t);y=isNaN(e)?void 0:e});var $;t.$parent.$watch(n(e.max),function(t){var e=new Date(t);$=isNaN(e)?void 0:e}),t.noIncrementHours=function(){var t=p(m,60*v);return t>$||m>t&&y>t},t.noDecrementHours=function(){var t=p(m,60*-v);return y>t||t>m&&t>$},t.noIncrementMinutes=function(){var t=p(m,b);return t>$||m>t&&y>t},t.noDecrementMinutes=function(){var t=p(m,-b);return y>t||t>m&&t>$},t.noToggleMeridian=function(){return m.getHours()<13?p(m,720)>$:p(m,-720)<y},t.showMeridian=o.showMeridian,e.showMeridian&&t.$parent.$watch(n(e.showMeridian),function(e){if(t.showMeridian=!!e,h.$error.time){var n=r(),a=s();angular.isDefined(n)&&angular.isDefined(a)&&(m.setHours(n),c())}else d()}),this.setupMousewheelEvents=function(e,n){var a=function(t){t.originalEvent&&(t=t.originalEvent);var e=t.wheelDelta?t.wheelDelta:-t.deltaY;return t.detail||e>0};e.bind("mousewheel wheel",function(e){t.$apply(a(e)?t.incrementHours():t.decrementHours()),e.preventDefault()}),n.bind("mousewheel wheel",function(e){t.$apply(a(e)?t.incrementMinutes():t.decrementMinutes()),e.preventDefault()})},this.setupArrowkeyEvents=function(e,n){e.bind("keydown",function(e){38===e.which?(e.preventDefault(),t.incrementHours(),t.$apply()):40===e.which&&(e.preventDefault(),t.decrementHours(),t.$apply())}),n.bind("keydown",function(e){38===e.which?(e.preventDefault(),t.incrementMinutes(),t.$apply()):40===e.which&&(e.preventDefault(),t.decrementMinutes(),t.$apply())})},this.setupInputEvents=function(e,n){if(t.readonlyInput)return t.updateHours=angular.noop,t.updateMinutes=angular.noop,void 0;var a=function(e,n){h.$setViewValue(null),h.$setValidity("time",!1),angular.isDefined(e)&&(t.invalidHours=e),angular.isDefined(n)&&(t.invalidMinutes=n)};t.updateHours=function(){var t=r(),e=s();angular.isDefined(t)&&angular.isDefined(e)?(m.setHours(t),y>m||m>$?a(!0):c("h")):a(!0)},e.bind("blur",function(){!t.invalidHours&&t.hours<10&&t.$apply(function(){t.hours=l(t.hours)})}),t.updateMinutes=function(){var t=s(),e=r();angular.isDefined(t)&&angular.isDefined(e)?(m.setMinutes(t),y>m||m>$?a(void 0,!0):c("m")):a(void 0,!0)},n.bind("blur",function(){!t.invalidMinutes&&t.minutes<10&&t.$apply(function(){t.minutes=l(t.minutes)})})},this.render=function(){var e=h.$viewValue;isNaN(e)?(h.$setValidity("time",!1),a.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')):(e&&(m=e),y>m||m>$?(h.$setValidity("time",!1),t.invalidHours=!0,t.invalidMinutes=!0):u(),d())},t.showSpinners=angular.isDefined(e.showSpinners)?t.$parent.$eval(e.showSpinners):o.showSpinners,t.incrementHours=function(){t.noIncrementHours()||f(60*v)},t.decrementHours=function(){t.noDecrementHours()||f(60*-v)},t.incrementMinutes=function(){t.noIncrementMinutes()||f(b)},t.decrementMinutes=function(){t.noDecrementMinutes()||f(-b)},t.toggleMeridian=function(){t.noToggleMeridian()||f(720*(m.getHours()<12?1:-1))}}]).directive("timepicker",function(){return{restrict:"EA",require:["timepicker","?^ngModel"],controller:"TimepickerController",controllerAs:"timepicker",replace:!0,scope:{},templateUrl:function(t,e){return e.templateUrl||"template/timepicker/timepicker.html"},link:function(t,e,n,a){var i=a[0],o=a[1];o&&i.init(o,e.find("input"))}}}),angular.module("ui.bootstrap.transition",[]).value("$transitionSuppressDeprecated",!1).factory("$transition",["$q","$timeout","$rootScope","$log","$transitionSuppressDeprecated",function(t,e,n,a,i){function o(t){for(var e in t)if(void 0!==s.style[e])return t[e]}i||a.warn("$transition is now deprecated. Use $animate from ngAnimate instead.");var r=function(a,i,o){o=o||{};var s=t.defer(),l=r[o.animation?"animationEndEventName":"transitionEndEventName"],c=function(){n.$apply(function(){a.unbind(l,c),s.resolve(a)})};return l&&a.bind(l,c),e(function(){angular.isString(i)?a.addClass(i):angular.isFunction(i)?i(a):angular.isObject(i)&&a.css(i),l||s.resolve(a)}),s.promise.cancel=function(){l&&a.unbind(l,c),s.reject("Transition cancelled")},s.promise},s=document.createElement("trans"),l={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"},c={WebkitTransition:"webkitAnimationEnd",MozTransition:"animationend",OTransition:"oAnimationEnd",transition:"animationend"};return r.transitionEndEventName=o(l),r.animationEndEventName=o(c),r}]),angular.module("ui.bootstrap.typeahead",["ui.bootstrap.position"]).factory("typeaheadParser",["$parse",function(t){var e=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;return{parse:function(n){var a=n.match(e);if(!a)throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "'+n+'".');return{itemName:a[3],source:t(a[4]),viewMapper:t(a[2]||a[1]),modelMapper:t(a[1])}}}}]).directive("typeahead",["$compile","$parse","$q","$timeout","$document","$window","$rootScope","$position","typeaheadParser",function(t,e,n,a,i,o,r,s,l){var c=[9,13,27,38,40],u=200;return{require:["ngModel","^?ngModelOptions"],link:function(d,p,f,m){function h(){U.moveInProgress||(U.moveInProgress=!0,U.$digest()),q&&a.cancel(q),q=a(function(){U.matches.length&&g(),U.moveInProgress=!1,U.$digest()},u)}function g(){U.position=O?s.offset(p):s.position(p),U.position.top+=p.prop("offsetHeight")}var v=m[0],b=m[1],y=d.$eval(f.typeaheadMinLength);y||0===y||(y=1);var $,w,k=d.$eval(f.typeaheadWaitMs)||0,x=d.$eval(f.typeaheadEditable)!==!1,C=e(f.typeaheadLoading).assign||angular.noop,D=e(f.typeaheadOnSelect),T=angular.isDefined(f.typeaheadSelectOnBlur)?d.$eval(f.typeaheadSelectOnBlur):!1,S=e(f.typeaheadNoResults).assign||angular.noop,E=f.typeaheadInputFormatter?e(f.typeaheadInputFormatter):void 0,O=f.typeaheadAppendToBody?d.$eval(f.typeaheadAppendToBody):!1,M=d.$eval(f.typeaheadFocusFirst)!==!1,A=f.typeaheadSelectOnExact?d.$eval(f.typeaheadSelectOnExact):!1,P=e(f.ngModel),I=e(f.ngModel+"($$$p)"),F=function(t,e){return angular.isFunction(P(d))&&b&&b.$options&&b.$options.getterSetter?I(t,{$$$p:e}):P.assign(t,e)},L=l.parse(f.typeahead),U=d.$new(),N=d.$on("$destroy",function(){U.$destroy()});U.$on("$destroy",N);var V="typeahead-"+U.$id+"-"+Math.floor(1e4*Math.random());p.attr({"aria-autocomplete":"list","aria-expanded":!1,"aria-owns":V});var H=angular.element("<div typeahead-popup></div>");H.attr({id:V,matches:"matches",active:"activeIdx",select:"select(activeIdx)","move-in-progress":"moveInProgress",query:"query",position:"position"}),angular.isDefined(f.typeaheadTemplateUrl)&&H.attr("template-url",f.typeaheadTemplateUrl),angular.isDefined(f.typeaheadPopupTemplateUrl)&&H.attr("popup-template-url",f.typeaheadPopupTemplateUrl);var z=function(){U.matches=[],U.activeIdx=-1,p.attr("aria-expanded",!1)},j=function(t){return V+"-option-"+t};U.$watch("activeIdx",function(t){0>t?p.removeAttr("aria-activedescendant"):p.attr("aria-activedescendant",j(t))});var R=function(t,e){return U.matches.length>e&&t?t.toUpperCase()===U.matches[e].label.toUpperCase():!1},_=function(t){var e={$viewValue:t};C(d,!0),S(d,!1),n.when(L.source(d,e)).then(function(n){var a=t===v.$viewValue;if(a&&$)if(n&&n.length>0){U.activeIdx=M?0:-1,S(d,!1),U.matches.length=0;for(var i=0;i<n.length;i++)e[L.itemName]=n[i],U.matches.push({id:j(i),label:L.viewMapper(U,e),model:n[i]});U.query=t,g(),p.attr("aria-expanded",!0),A&&1===U.matches.length&&R(t,0)&&U.select(0)}else z(),S(d,!0);a&&C(d,!1)},function(){z(),C(d,!1),S(d,!0)})};O&&(angular.element(o).bind("resize",h),i.find("body").bind("scroll",h));var q;U.moveInProgress=!1,z(),U.query=void 0;var B,W=function(t){B=a(function(){_(t)},k)},G=function(){B&&a.cancel(B)};v.$parsers.unshift(function(t){return $=!0,0===y||t&&t.length>=y?k>0?(G(),W(t)):_(t):(C(d,!1),G(),z()),x?t:t?(v.$setValidity("editable",!1),void 0):(v.$setValidity("editable",!0),null)}),v.$formatters.push(function(t){var e,n,a={};return x||v.$setValidity("editable",!0),E?(a.$model=t,E(d,a)):(a[L.itemName]=t,e=L.viewMapper(d,a),a[L.itemName]=void 0,n=L.viewMapper(d,a),e!==n?e:t)}),U.select=function(t){var e,n,i={};w=!0,i[L.itemName]=n=U.matches[t].model,e=L.modelMapper(d,i),F(d,e),v.$setValidity("editable",!0),v.$setValidity("parse",!0),D(d,{$item:n,$model:e,$label:L.viewMapper(d,i)}),z(),U.$eval(f.typeaheadFocusOnSelect)!==!1&&a(function(){p[0].focus()},0,!1)},p.bind("keydown",function(t){if(0!==U.matches.length&&-1!==c.indexOf(t.which)){if(-1===U.activeIdx&&(9===t.which||13===t.which))return z(),U.$digest(),void 0;t.preventDefault(),40===t.which?(U.activeIdx=(U.activeIdx+1)%U.matches.length,U.$digest()):38===t.which?(U.activeIdx=(U.activeIdx>0?U.activeIdx:U.matches.length)-1,U.$digest()):13===t.which||9===t.which?U.$apply(function(){U.select(U.activeIdx)}):27===t.which&&(t.stopPropagation(),z(),U.$digest())}}),p.bind("blur",function(){T&&U.matches.length&&-1!==U.activeIdx&&!w&&(w=!0,U.$apply(function(){U.select(U.activeIdx)})),$=!1,w=!1});var K=function(t){p[0]!==t.target&&3!==t.which&&0!==U.matches.length&&(z(),r.$$phase||U.$digest())};i.bind("click",K),d.$on("$destroy",function(){i.unbind("click",K),O&&Y.remove(),H.remove()});var Y=t(H)(U);O?i.find("body").append(Y):p.after(Y)}}}]).directive("typeaheadPopup",function(){return{restrict:"EA",scope:{matches:"=",query:"=",active:"=",position:"&",moveInProgress:"=",select:"&"},replace:!0,templateUrl:function(t,e){return e.popupTemplateUrl||"template/typeahead/typeahead-popup.html"},link:function(t,e,n){t.templateUrl=n.templateUrl,t.isOpen=function(){return t.matches.length>0},t.isActive=function(e){return t.active==e},t.selectActive=function(e){t.active=e},t.selectMatch=function(e){t.select({activeIdx:e})}}}}).directive("typeaheadMatch",["$templateRequest","$compile","$parse",function(t,e,n){return{restrict:"EA",scope:{index:"=",match:"=",query:"="},link:function(a,i,o){var r=n(o.templateUrl)(a.$parent)||"template/typeahead/typeahead-match.html";t(r).then(function(t){e(t.trim())(a,function(t){i.replaceWith(t)})})}}}]).filter("typeaheadHighlight",["$sce","$injector","$log",function(t,e,n){function a(t){return t.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")}function i(t){return/<.*>/g.test(t)}var o;return o=e.has("$sanitize"),function(e,r){return!o&&i(e)&&n.warn("Unsafe use of typeahead please use ngSanitize"),e=r?(""+e).replace(new RegExp(a(r),"gi"),"<strong>$&</strong>"):e,o||(e=t.trustAsHtml(e)),e}}]),angular.module("template/accordion/accordion-group.html",[]).run(["$templateCache",function(t){t.put("template/accordion/accordion-group.html",'<div class="panel {{panelClass || \'panel-default\'}}">\n  <div class="panel-heading" ng-keypress="toggleOpen($event)">\n    <h4 class="panel-title">\n      <a href tabindex="0" class="accordion-toggle" ng-click="toggleOpen()" accordion-transclude="heading"><span ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n    </h4>\n  </div>\n  <div class="panel-collapse collapse" collapse="!isOpen">\n	  <div class="panel-body" ng-transclude></div>\n  </div>\n</div>\n')}]),angular.module("template/accordion/accordion.html",[]).run(["$templateCache",function(t){t.put("template/accordion/accordion.html",'<div class="panel-group" ng-transclude></div>')}]),angular.module("template/alert/alert.html",[]).run(["$templateCache",function(t){t.put("template/alert/alert.html",'<div class="alert" ng-class="[\'alert-\' + (type || \'warning\'), closeable ? \'alert-dismissible\' : null]" role="alert">\n    <button ng-show="closeable" type="button" class="close" ng-click="close($event)">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <div ng-transclude></div>\n</div>\n')}]),angular.module("template/carousel/carousel.html",[]).run(["$templateCache",function(t){t.put("template/carousel/carousel.html",'<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" ng-swipe-right="prev()" ng-swipe-left="next()">\n    <ol class="carousel-indicators" ng-show="slides.length > 1">\n        <li ng-repeat="slide in slides | orderBy:indexOfSlide track by $index" ng-class="{active: isActive(slide)}" ng-click="select(slide)"></li>\n    </ol>\n    <div class="carousel-inner" ng-transclude></div>\n    <a class="left carousel-control" ng-click="prev()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-left"></span></a>\n    <a class="right carousel-control" ng-click="next()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-right"></span></a>\n</div>\n')
}]),angular.module("template/carousel/slide.html",[]).run(["$templateCache",function(t){t.put("template/carousel/slide.html",'<div ng-class="{\n    \'active\': active\n  }" class="item text-center" ng-transclude></div>\n')}]),angular.module("template/datepicker/datepicker.html",[]).run(["$templateCache",function(t){t.put("template/datepicker/datepicker.html",'<div ng-switch="datepickerMode" role="application" ng-keydown="keydown($event)">\n  <daypicker ng-switch-when="day" tabindex="0"></daypicker>\n  <monthpicker ng-switch-when="month" tabindex="0"></monthpicker>\n  <yearpicker ng-switch-when="year" tabindex="0"></yearpicker>\n</div>')}]),angular.module("template/datepicker/day.html",[]).run(["$templateCache",function(t){t.put("template/datepicker/day.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{::5 + showWeeks}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n    <tr>\n      <th ng-if="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in ::labels track by $index" class="text-center"><small aria-label="{{::label.full}}">{{::label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-if="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}" ng-class="::dt.customClass">\n        <button type="button" style="min-width:100%;" class="btn btn-default btn-sm" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/month.html",[]).run(["$templateCache",function(t){t.put("template/datepicker/month.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}" ng-class="::dt.customClass">\n        <button type="button" style="min-width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/popup.html",[]).run(["$templateCache",function(t){t.put("template/datepicker/popup.html",'<ul class="dropdown-menu" ng-if="isOpen" style="display: block" ng-style="{top: position.top+\'px\', left: position.left+\'px\'}" ng-keydown="keydown($event)" ng-click="$event.stopPropagation()">\n	<li ng-transclude></li>\n	<li ng-if="showButtonBar" style="padding:10px 9px 2px">\n		<span class="btn-group pull-left">\n			<button type="button" class="btn btn-sm btn-info" ng-click="select(\'today\')" ng-disabled="isDisabled(\'today\')">{{ getText(\'current\') }}</button>\n			<button type="button" class="btn btn-sm btn-danger" ng-click="select(null)">{{ getText(\'clear\') }}</button>\n		</span>\n		<button type="button" class="btn btn-sm btn-success pull-right" ng-click="close()">{{ getText(\'close\') }}</button>\n	</li>\n</ul>\n')}]),angular.module("template/datepicker/year.html",[]).run(["$templateCache",function(t){t.put("template/datepicker/year.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="3"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}">\n        <button type="button" style="min-width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/modal/backdrop.html",[]).run(["$templateCache",function(t){t.put("template/modal/backdrop.html",'<div class="modal-backdrop"\n     modal-animation-class="fade"\n     modal-in-class="in"\n     ng-style="{\'z-index\': 1040 + (index && 1 || 0) + index*10}"\n></div>\n')}]),angular.module("template/modal/window.html",[]).run(["$templateCache",function(t){t.put("template/modal/window.html",'<div modal-render="{{$isRendered}}" tabindex="-1" role="dialog" class="modal"\n    modal-animation-class="fade"\n    modal-in-class="in"\n	ng-style="{\'z-index\': 1050 + index*10, display: \'block\'}" ng-click="close($event)">\n    <div class="modal-dialog" ng-class="size ? \'modal-\' + size : \'\'"><div class="modal-content" modal-transclude></div></div>\n</div>\n')}]),angular.module("template/pagination/pager.html",[]).run(["$templateCache",function(t){t.put("template/pagination/pager.html",'<ul class="pager">\n  <li ng-class="{disabled: noPrevious()||ngDisabled, previous: align}"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n  <li ng-class="{disabled: noNext()||ngDisabled, next: align}"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n</ul>\n')}]),angular.module("template/pagination/pagination.html",[]).run(["$templateCache",function(t){t.put("template/pagination/pagination.html",'<ul class="pagination">\n  <li ng-if="::boundaryLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-first"><a href ng-click="selectPage(1, $event)">{{::getText(\'first\')}}</a></li>\n  <li ng-if="::directionLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-prev"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n  <li ng-repeat="page in pages track by $index" ng-class="{active: page.active,disabled: ngDisabled&&!page.active}" class="pagination-page"><a href ng-click="selectPage(page.number, $event)">{{page.text}}</a></li>\n  <li ng-if="::directionLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-next"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n  <li ng-if="::boundaryLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-last"><a href ng-click="selectPage(totalPages, $event)">{{::getText(\'last\')}}</a></li>\n</ul>\n')}]),angular.module("template/tooltip/tooltip-html-popup.html",[]).run(["$templateCache",function(t){t.put("template/tooltip/tooltip-html-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind-html="contentExp()"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-html-unsafe-popup.html",[]).run(["$templateCache",function(t){t.put("template/tooltip/tooltip-html-unsafe-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" bind-html-unsafe="content"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-popup.html",[]).run(["$templateCache",function(t){t.put("template/tooltip/tooltip-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind="content"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-template-popup.html",[]).run(["$templateCache",function(t){t.put("template/tooltip/tooltip-template-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner"\n    tooltip-template-transclude="contentExp()"\n    tooltip-template-transclude-scope="originScope()"></div>\n</div>\n')}]),angular.module("template/popover/popover-html.html",[]).run(["$templateCache",function(t){t.put("template/popover/popover-html.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content" ng-bind-html="contentExp()"></div>\n  </div>\n</div>\n')}]),angular.module("template/popover/popover-template.html",[]).run(["$templateCache",function(t){t.put("template/popover/popover-template.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content"\n        tooltip-template-transclude="contentExp()"\n        tooltip-template-transclude-scope="originScope()"></div>\n  </div>\n</div>\n')}]),angular.module("template/popover/popover.html",[]).run(["$templateCache",function(t){t.put("template/popover/popover.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content" ng-bind="content"></div>\n  </div>\n</div>\n')}]),angular.module("template/progressbar/bar.html",[]).run(["$templateCache",function(t){t.put("template/progressbar/bar.html",'<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" style="min-width: 0;" ng-transclude></div>\n')}]),angular.module("template/progressbar/progress.html",[]).run(["$templateCache",function(t){t.put("template/progressbar/progress.html",'<div class="progress" ng-transclude></div>')}]),angular.module("template/progressbar/progressbar.html",[]).run(["$templateCache",function(t){t.put("template/progressbar/progressbar.html",'<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" style="min-width: 0;" ng-transclude></div>\n</div>\n')}]),angular.module("template/rating/rating.html",[]).run(["$templateCache",function(t){t.put("template/rating/rating.html",'<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}">\n    <span ng-repeat-start="r in range track by $index" class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    <i ng-repeat-end ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')" ng-attr-title="{{r.title}}" ></i>\n</span>\n')}]),angular.module("template/tabs/tab.html",[]).run(["$templateCache",function(t){t.put("template/tabs/tab.html",'<li ng-class="{active: active, disabled: disabled}">\n  <a href ng-click="select()" tab-heading-transclude>{{heading}}</a>\n</li>\n')}]),angular.module("template/tabs/tabset.html",[]).run(["$templateCache",function(t){t.put("template/tabs/tabset.html",'<div>\n  <ul class="nav nav-{{type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane" \n         ng-repeat="tab in tabs" \n         ng-class="{active: tab.active}"\n         tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n')}]),angular.module("template/timepicker/timepicker.html",[]).run(["$templateCache",function(t){t.put("template/timepicker/timepicker.html",'<table>\n  <tbody>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td><a ng-click="incrementHours()" ng-class="{disabled: noIncrementHours()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td>&nbsp;</td>\n      <td><a ng-click="incrementMinutes()" ng-class="{disabled: noIncrementMinutes()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n    <tr>\n      <td class="form-group" ng-class="{\'has-error\': invalidHours}">\n        <input style="width:50px;" type="text" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2">\n      </td>\n      <td>:</td>\n      <td class="form-group" ng-class="{\'has-error\': invalidMinutes}">\n        <input style="width:50px;" type="text" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2">\n      </td>\n      <td ng-show="showMeridian"><button type="button" ng-class="{disabled: noToggleMeridian()}" class="btn btn-default text-center" ng-click="toggleMeridian()">{{meridian}}</button></td>\n    </tr>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td><a ng-click="decrementHours()" ng-class="{disabled: noDecrementHours()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td>&nbsp;</td>\n      <td><a ng-click="decrementMinutes()" ng-class="{disabled: noDecrementMinutes()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/typeahead/typeahead-match.html",[]).run(["$templateCache",function(t){t.put("template/typeahead/typeahead-match.html",'<a href tabindex="-1" ng-bind-html="match.label | typeaheadHighlight:query"></a>\n')}]),angular.module("template/typeahead/typeahead-popup.html",[]).run(["$templateCache",function(t){t.put("template/typeahead/typeahead-popup.html",'<ul class="dropdown-menu" ng-show="isOpen() && !moveInProgress" ng-style="{top: position().top+\'px\', left: position().left+\'px\'}" style="display: block;" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index)" role="option" id="{{::match.id}}">\n        <div typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n')}]),!angular.$$csp()&&angular.element(document).find("head").prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>'),"undefined"==typeof TEMPLATES)var TEMPLATES={};TEMPLATES["alignment.html"]='<div class="btn-group alignment">\n  <button type="button" class="btn btn-default btn-sm btn-alignment dropdown-toggle"\n    data-toggle="dropdown" data-wysihtml5-command-value="left">\n    <i class="fa fa-align-left"></i>\n    <span class="caret"></span>\n  </button>\n  <div class="dropdown-menu" role="menu">\n    <div class="btn-group">\n      <button type="button" class="btn btn-default btn-sm" data-wysihtml5-command="alignment"\n        data-wysihtml5-command-value="left" tabindex="-1">\n        <i class="fa fa-align-left"></i>\n      </button>\n      <button type="button" class="btn btn-default btn-sm" data-wysihtml5-command="alignment"\n        data-wysihtml5-command-value="center" tabindex="-1">\n        <i class="fa fa-align-center"></i>\n      </button>\n      <button type="button" class="btn btn-default btn-sm" data-wysihtml5-command="alignment"\n        data-wysihtml5-command-value="right" tabindex="-1">\n        <i class="fa fa-align-right"></i>\n      </button>\n      <button type="button" class="btn btn-default btn-sm" data-wysihtml5-command="alignment"\n        data-wysihtml5-command-value="justify" tabindex="-1">\n        <i class="fa fa-align-justify"></i>\n      </button>\n    </div>\n  </div>\n</div>\n',function(t,e,n,a){"use strict";function i(e,n){function i(){l.append(a["alignment.html"]),c=l.find(".btn-alignment"),r(n.align),l.find(".dropdown-menu button").on("click",function(){var e=t(this).data("wysihtml5-command-value");r(e),l.trigger("alignmentChanged",e)})}function o(){return c.data("wysihtml5-command-value")}function r(t){var e=l.find(".btn-alignment .fa"),n=e.attr("class").match(/fa-align-[a-z]+/g),a="fa-align-"+t;n&&n.length>0&&e.removeClass(n[0]),e.addClass(a),c.data("wysihtml5-command-value",t)}function s(){r(u)}var l=t(e),c=null,u="left";return n=t.extend({},{align:u},n),i(),{getAlignment:o,setAlignment:r,reset:s}}var o="alignment";t.fn.alignment=function(e){return this.each(function(){t.data(this,"plugin_"+o)||t.data(this,"plugin_"+o,new i(this,e))})}}(jQuery,window,document,TEMPLATES);var WIDGET_SETTINGS_UI_CONFIG={families:"Andale Mono=andale mono,monospace;Arial=arial,helvetica,sans-serif;Arial Black=arial black,sans-serif;Book Antiqua=book antiqua,palatino,serif;Comic Sans MS=comic sans ms,sans-serif;Courier New=courier new,courier,monospace;Georgia=georgia,palatino,serif;Helvetica=helvetica,arial,sans-serif;Impact=impact,sans-serif;Symbol=symbol;Tahoma=tahoma,arial,helvetica,sans-serif;Terminal=terminal,monaco,monospace;Times New Roman=times new roman,times,serif;Trebuchet MS=trebuchet ms,geneva,sans-serif;Verdana=verdana,geneva,sans-serif;",sizes:"8px 9px 10px 11px 12px 14px 18px 24px 30px 36px 48px 60px 72px 96px"};!function(){"use strict";angular.module("risevision.widget.common.url-field",["risevision.common.i18n","risevision.widget.common.tooltip"]).directive("urlField",["$templateCache","$log",function(t,e){return{restrict:"E",require:"?ngModel",scope:{url:"=",hideLabel:"@",fileType:"@"},template:t.get("_angular/url-field/url-field.html"),link:function(t,n,a,i){function o(t,e){var n,a=t.toLowerCase();switch(e){case"image":n=[".jpg",".jpeg",".png",".bmp",".svg",".gif"];break;case"video":n=[".webm",".mp4",".ogv",".ogg"];break;default:n=[]}for(var i=0,o=n.length;o>i;i++)if(-1!==a.indexOf(n[i]))return!0;return!1}function r(){if("undefined"!==t.fileType&&"undefined"!==t.url&&"image"===t.fileType){var e=new Image;e.onload=function(){t.valid=!0,t.$apply()},e.onerror=function(){t.valid=!1,t.invalidType=t.fileType,t.$apply()},e.src=t.url}}function s(e){var n,a;return n=/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/i,-1===e.indexOf("://")&&(e="http://"+e),a=n.test(e),a&&"undefined"!=typeof t.fileType?(a=o(e,t.fileType),a||(t.invalidType=t.fileType)):t.invalidType="url",a&&r(),a}t.doValidation=!0,t.forcedValid=!1,t.valid=!0,t.invalidType="url",t.allowInitEmpty="undefined"!=typeof a.initEmpty,t.blur=function(){t.$emit("urlFieldBlur")},t.$watch("url",function(e){"undefined"!=typeof e&&null!==e&&(""!==e&&t.allowInitEmpty&&(t.allowInitEmpty=!1),t.doValidation&&!t.allowInitEmpty&&(t.valid=s(t.url)))}),t.$watch("valid",function(t){i&&(e.info("Calling $setValidity() on parent controller"),i.$setValidity("valid",t))}),t.$watch("doValidation",function(e){"undefined"!=typeof t.url&&(e?(t.forcedValid=!1,t.allowInitEmpty||(t.valid=s(t.url))):(t.forcedValid=!0,t.valid=!0))})}}}])}(),function(t){try{t=angular.module("risevision.widget.common.url-field")}catch(e){t=angular.module("risevision.widget.common.url-field",[])}t.run(["$templateCache",function(t){"use strict";t.put("_angular/url-field/url-field.html",'<div class="form-group" >\n  <label ng-if="!hideLabel">{{ "url.label" | translate }}</label>\n  <div>\n    <input name="url" type="text" ng-model="url" ng-blur="blur()" class="form-control" placeholder="http://">\n  </div>\n  <p ng-if="!valid && invalidType === \'url\'" class="text-danger">{{ "url.errors.url" | translate }}</p>\n  <p ng-if="!valid && invalidType === \'image\'" class="text-danger">{{ "url.errors.image" | translate }}</p>\n  <p ng-if="!valid && invalidType === \'video\'" class="text-danger">{{ "url.errors.video" | translate }}</p>\n  <div class="checkbox" ng-show="forcedValid || !valid">\n    <label>\n      <input name="validate-url" ng-click="doValidation = !doValidation" type="checkbox"\n             value="validate-url"> {{"url.validate.label" | translate}}\n    </label>\n  </div>\n</div>\n')}])}(),function(){"use strict";angular.module("risevision.widget.common.font-setting",["angularLoad","ui.tinymce","risevision.common.i18n","risevision.widget.common.url-field"]).directive("fontSetting",["$templateCache","$log","$window","googleFontLoader",function(t,e,n,a){return{restrict:"AE",scope:{fontData:"=",previewText:"@",verticalAlign:"@"},template:t.get("_angular/font-setting/font-setting.html"),transclude:!1,link:function(t,e){function i(){t.tinymceOptions={font_formats:"Use Custom Font=custom;"+WIDGET_SETTINGS_UI_CONFIG.families+t.googleFontList,fontsize_formats:"Custom "+(""!==t.fontData.customSize?t.fontData.customSize+" ":"")+WIDGET_SETTINGS_UI_CONFIG.sizes,menubar:!1,plugins:"textcolor colorpicker",skin_url:"//s3.amazonaws.com/rise-common/styles/tinymce/rise",statusbar:!1,toolbar:"fontselect fontsizeselect | alignleft aligncenter alignright alignjustify"+(t.verticalAlign?" aligntop alignmiddle alignbottom":"")+" | forecolor backcolor | bold italic underline",setup:function(e){t.verticalAlign&&p(e),e.on("init",function(){o(e),v=!1}),e.on("ExecCommand",function(t){r(e,t)})},init_instance_callback:function(t){var e=t.formatter.apply,n=t.formatter.remove;t.formatter.apply=function(n,a,i){var o={command:n,value:a.value};e(n,a,i),t.fire("ExecCommand",o)},t.formatter.remove=function(e,a,i){var o={command:e,value:a&&a.value?a.value:null};n(e,a,i),t.fire("ExecCommand",o)}}}}function o(e){if(t.fontData){switch("custom"===t.fontData.font.type&&t.fontData.font.url?e.execCommand("FontName",!1,"custom"):e.execCommand("FontName",!1,t.fontData.font.family),e.execCommand("FontSize",!1,t.fontData.size),t.fontData.align){case"left":e.execCommand("JustifyLeft",!1);break;case"center":e.execCommand("JustifyCenter",!1);break;case"right":e.execCommand("JustifyRight",!1);break;case"justify":e.execCommand("JustifyFull",!1)}t.verticalAlign&&e.execCommand("mceToggleVertical",!1,t.fontData.verticalAlign),m.find(".mce-colorbutton[aria-label='Text color'] span").css("background-color",t.fontData.forecolor),m.find(".mce-colorbutton[aria-label='Background color'] span").css("background-color",t.fontData.backcolor),t.fontData.bold&&s(m.find(".mce-btn[aria-label='Bold']")),t.fontData.italic&&s(m.find(".mce-btn[aria-label='Italic']")),t.fontData.underline&&s(m.find(".mce-btn[aria-label='Underline']"))}}function r(e,n){switch(n.command){case"FontName":if(v)return;if("custom"===n.value)return h.modal("show"),void 0;t.fontData.font.family=n.value,t.fontData.font.type=c(n.value);break;case"FontSize":if(v)return;if("Custom"===n.value)return g.modal("show"),void 0;t.fontData.size=n.value;break;case"JustifyLeft":t.fontData.align="left";break;case"JustifyCenter":t.fontData.align="center";break;case"JustifyRight":t.fontData.align="right";break;case"JustifyFull":t.fontData.align="justify";break;case"mceToggleVertical":n.value?(f(n.value),t.fontData.verticalAlign!==n.value&&f(t.fontData.verticalAlign)):f(t.defaultFont.verticalAlign),t.fontData.verticalAlign=n.value?n.value:t.defaultFont.verticalAlign;break;case"forecolor":t.fontData.forecolor=n.value?n.value:t.defaultFont.forecolor;break;case"hilitecolor":t.fontData.backcolor=n.value?n.value:t.defaultFont.backcolor;break;case"mceToggleFormat":"bold"===n.value?(t.fontData.bold=!t.fontData.bold,s(m.find(".mce-btn[aria-label='Bold']"))):"italic"===n.value?(t.fontData.italic=!t.fontData.italic,s(m.find(".mce-btn[aria-label='Italic']"))):"underline"===n.value&&(t.fontData.underline=!t.fontData.underline,s(m.find(".mce-btn[aria-label='Underline']")))}l(t.fontData)}function s(t){t.toggleClass("mce-active")}function l(e){var n=m.find(".text-container"),a=m.find(".text");t.previewText&&e&&(a.css("fontFamily",e.font.family),a.css("fontSize",e.size),a.css("fontWeight",e.bold?"bold":"normal"),a.css("fontStyle",e.italic?"italic":"normal"),a.css("textDecoration",e.underline?"underline":"none"),a.css("color",e.forecolor),a.css("backgroundColor",e.backcolor),n.css("textAlign",e.align))}function c(e){return-1!==WIDGET_SETTINGS_UI_CONFIG.families.indexOf(e)?"standard":-1!==t.googleFontList.indexOf(e)?"google":"custom"}function u(){var e=null;return t.fontData.font.url?(e=decodeURI(t.fontData.font.url.trim()),e.split("/").pop().split(".")[0]):null}function d(e){var n=null,a=$.trim(t.fontData.font.url),i="font-family: "+e+"; src: url('"+a+"');";n=document.styleSheets[0],null!==n&&n.addRule("@font-face",i)}function p(t){t.addButton("aligntop",{image:"//s3.amazonaws.com/Rise-Images/Icons/align-top.svg",tooltip:"Align Top",onclick:function(){t.execCommand("mceToggleVertical",!1,"top")}}),t.addButton("alignmiddle",{image:"//s3.amazonaws.com/Rise-Images/Icons/align-vertical-middle.svg",tooltip:"Align Middle",onclick:function(){t.execCommand("mceToggleVertical",!1,"middle")}}),t.addButton("alignbottom",{image:"//s3.amazonaws.com/Rise-Images/Icons/align-bottom.svg",tooltip:"Align Bottom",onclick:function(){t.execCommand("mceToggleVertical",!1,"bottom")}}),t.addCommand("mceToggleVertical",function(){})}function f(t){switch(t){case"top":s(m.find(".mce-btn[aria-label='Align Top']"));break;case"middle":s(m.find(".mce-btn[aria-label='Align Middle']"));break;case"bottom":s(m.find(".mce-btn[aria-label='Align Bottom']"))}}var m=$(e),h=m.find(".custom-font"),g=m.find(".custom-font-size"),v=!0;t.googleFontList="",t.defaultFont={font:{family:"verdana,geneva,sans-serif",type:"standard",url:""},size:"24px",customSize:"",align:"left",verticalAlign:"middle",bold:!1,italic:!1,underline:!1,forecolor:"black",backcolor:"transparent"},a.getFonts().then(function(e){t.googleFontList=e}),t.customFontSize=null,t.applyCustomFont=function(){var e=u();null!==e&&(d(e),t.fontData.font.family=e,t.fontData.font.type="custom",l(t.fontData)),h.modal("hide")},t.applyCustomFontSize=function(){g.modal("hide"),null!==t.customFontSize&&t.customFontSize>=8&&t.customFontSize+"px"!==t.fontData.size&&(t.fontData.size=t.customFontSize+"px",-1!==WIDGET_SETTINGS_UI_CONFIG.sizes.indexOf(t.fontData.size)||t.fontData.customSize===t.fontData.size?n.tinymce.activeEditor.execCommand("FontSize",!1,t.fontData.size):(t.fontData.customSize=t.customFontSize+"px",t.tinymceOptions.fontsize_formats="Custom "+(""!==t.fontData.customSize?t.fontData.customSize+" ":"")+WIDGET_SETTINGS_UI_CONFIG.sizes)),t.customFontSize=null},t.defaults=function(t){if(t)for(var e=1,n=arguments.length;n>e;e++){var a=arguments[e];for(var i in a)void 0===t[i]&&(t[i]=a[i])}return t};var b=t.$watchGroup(["fontData","googleFontList"],function(e){var n=null,a=e[0],o=e[1];a&&o&&(t.defaults(a,t.defaultFont),t.fontData.font.url&&(n=u(),null!==n&&d(n)),l(a),i(),b(),t.previewText&&t.$watch("fontData",l,!0))});t.$watch("tinymceOptions.fontsize_formats",function(e){"undefined"==typeof e||v||t.$broadcast("$tinymce:refresh")})}}}])}(),function(){"use strict";angular.module("risevision.widget.common.font-setting").factory("googleFontLoader",["$http","angularLoad",function(t,e){var n="https://www.googleapis.com/webfonts/v1/webfonts?key=AIzaSyBXxVK_IOV7LNQMuVVo_l7ZvN53ejN86zY",a="//fonts.googleapis.com/css?family=",i=["Buda","Coda Caption","Open Sans Condensed","UnifrakturCook","Molle"],o=",sans-serif;",r={};return r.getFonts=function(){return t.get(n,{cache:!0}).then(function(t){var n="",r="",s=!1;if(t.data&&t.data.items)for(var l=0;l<t.data.items.length;l++)n=t.data.items[l].family,-1===i.indexOf(n)&&(e.loadCSS(a+n).then(function(){}),/\s/.test(n)&&(s=!0),r+=s?n+"='"+n+"'"+o:n+"="+n+o);return r})},r}])}(),function(t){try{t=angular.module("risevision.widget.common.font-setting")}catch(e){t=angular.module("risevision.widget.common.font-setting",[])}t.run(["$templateCache",function(t){"use strict";t.put("_angular/font-setting/font-setting.html",'<div class="font-setting">\n  <div class="row">\n    <div class="col-md-12">\n      <div ng-class="{\'form-group\': !previewText}">\n        <textarea ui-tinymce="tinymceOptions" ng-model="tinymceModel" ng-if="tinymceOptions"></textarea>\n      </div>\n    </div>\n  </div>\n  <div class="row" ng-if="previewText">\n    <div class="col-md-12">\n      <div class="text-container form-group">\n        <span class="text">{{previewText}}</span>\n      </div>\n    </div>\n  </div>\n\n  <!-- Custom Font -->\n  <div class="custom-font modal" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="false">\n    <div class="modal-dialog">\n      <div class="modal-content">\n\n        <div class="modal-header">\n          <button type="button" class="close" data-dismiss="modal">\n            <i class="fa fa-times half-top"></i>\n          </button>\n          <h2 class="modal-title">{{"font-setting.custom-font" | translate}}</h2>\n        </div>\n\n        <form role="form" name="customFontForm">\n          <div class="modal-body">\n            <url-field url="fontData.font.url" ng-model="customFont" init-empty></url-field>\n          </div>\n\n          <div class="modal-footer">\n            <button type="button" class="select btn btn-primary btn-fixed-width" ng-click="applyCustomFont()" ng-disabled="customFontForm.$invalid">\n              <span>{{"common.select" | translate}}</span>\n              <i class="fa fa-white fa-check icon-right"></i>\n            </button>\n            <button type="button" class="cancel btn btn-default btn-fixed-width" data-dismiss="modal">\n              <span>{{"common.cancel" | translate}}</span>\n              <i class="fa fa-white fa-times icon-right"></i>\n            </button>\n          </div>\n        </form>\n\n      </div>\n    </div>\n  </div>\n\n  <!-- Custom Font Size -->\n  <div class="custom-font-size modal" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="false">\n    <div class="modal-dialog">\n      <div class="modal-content">\n\n        <div class="modal-header">\n          <button type="button" class="close" data-dismiss="modal">\n            <i class="fa fa-times half-top"></i>\n          </button>\n          <h2 class="modal-title">{{"font-setting.custom-font-size" | translate}}</h2>\n        </div>\n\n        <form role="form" name="customFontSizeForm">\n          <div class="modal-body">\n            <div class="row">\n              <div class="col-md-3">\n                <div class="input-group">\n                  <input type="number" ng-model="customFontSize" class="form-control" />\n                  <span class="input-group-addon">{{\'common.units.pixels\' | translate}}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class="modal-footer">\n            <button type="button" class="select btn btn-primary btn-fixed-width" ng-click="applyCustomFontSize()" ng-disabled="customFontSizeForm.$invalid">\n              <span>{{"common.select" | translate}}</span>\n              <i class="fa fa-white fa-check icon-right"></i>\n            </button>\n            <button type="button" class="cancel btn btn-default btn-fixed-width" data-dismiss="modal">\n              <span>{{"common.cancel" | translate}}</span>\n              <i class="fa fa-white fa-times icon-right"></i>\n            </button>\n          </div>\n        </form>\n\n      </div>\n    </div>\n  </div>\n</div>\n')
}])}(),function(){"use strict";angular.module("risevision.widget.common.transition-setting",["risevision.common.i18n","risevision.widget.common.tooltip"]).directive("transitionSetting",["$templateCache","$log",function(t){return{restrict:"E",scope:{transition:"=",hideFade:"@"},template:t.get("_angular/transition-setting/transition-setting.html"),link:function(t){t.defaultSetting={type:"none",direction:"up",duration:10,pud:10,resume:5,speed:"medium"},t.defaults=function(t){if(t)for(var e=1,n=arguments.length;n>e;e++){var a=arguments[e];for(var i in a)void 0===t[i]&&(t[i]=a[i])}return t},t.$watch("transition",function(e){t.defaults(e,t.defaultSetting)})}}}])}(),function(t){try{t=angular.module("risevision.widget.common.transition-setting")}catch(e){t=angular.module("risevision.widget.common.transition-setting",[])}t.run(["$templateCache",function(t){"use strict";t.put("_angular/transition-setting/transition-setting.html",'<div class="row">\n  <div class="col-md-3">\n    <div class="form-group">\n      <label class="control-label">{{"transition.heading" | translate}}</label>\n      <select name="transition-by" ng-model="transition.type" class="form-control">\n        <option value="none">{{"transition.type.none" | translate}}</option>\n        <option value="fade" ng-if="!hideFade">{{"transition.type.fade" | translate}}</option>\n        <option value="scroll">{{"transition.type.scroll" | translate}}</option>\n        <option value="page">{{"transition.type.page" | translate}}</option>\n      </select>\n    </div>\n  </div>\n</div>\n<div class="row">\n  <div class="col-md-3" ng-if="transition.type !== \'scroll\'">\n    <div class="form-group">\n      <label class="control-label">{{"transition.duration" | translate }}</label>\n      <div class="input-group">\n        <input name="transition-duration" type="number"  class="form-control" ng-model="transition.duration">\n        <span class="input-group-addon">sec</span>\n      </div>\n    </div>\n  </div>\n  <div class="col-md-3" ng-if="transition.type === \'scroll\'">\n    <div class="form-group">\n      <label class="control-label">{{"transition.direction.label" | translate}}</label>\n      <select name="transition-direction" ng-model="transition.direction" class="form-control">\n        <option value="up">{{"transition.direction.up" | translate}}</option>\n        <option value="left">{{"transition.direction.left" | translate}}</option>\n      </select>\n    </div>\n  </div>\n  <div class="col-md-3" ng-if="transition.type === \'scroll\'">\n    <div class="form-group">\n      <label class="control-label">{{"transition.speed.label" | translate}}</label>\n      <select name="transition-speed" ng-model="transition.speed" class="form-control">\n        <option value="slow">{{"transition.speed.slow" | translate}}</option>\n        <option value="medium">{{"transition.speed.medium" | translate}}</option>\n        <option value="fast">{{"transition.speed.fast" | translate}}</option>\n      </select>\n    </div>\n  </div>\n  <div class="col-md-3" ng-if="transition.type === \'scroll\' && transition.direction === \'up\' || transition.type === \'page\'">\n    <div class="form-group">\n      <label class="control-label">{{"transition.resume.label" | translate}}</label>\n      <span popover="{{\'transition.resume.tooltip\' | translate}}" popover-trigger="click"\n            popover-placement="right" rv-tooltip></span>\n      <div class="input-group">\n        <input name="transition-resume" type="number" ng-model="transition.resume" class="form-control" />\n        <span class="input-group-addon">{{"common.units.seconds" | translate}}</span>\n      </div>\n    </div>\n  </div>\n  <div class="col-md-3" ng-if="transition.type === \'scroll\' && transition.direction === \'up\' || transition.type === \'page\'">\n    <div class="form-group">\n      <label class="control-label">{{"transition.pud.label" | translate}}</label>\n      <span popover="{{\'transition.pud.tooltip\' | translate}}" popover-trigger="click"\n            popover-placement="right" rv-tooltip></span>\n      <div class="input-group">\n        <input name="transition-pud" type="number" ng-model="transition.pud" class="form-control" />\n        <span class="input-group-addon">{{"common.units.seconds" | translate}}</span>\n      </div>\n    </div>\n  </div>\n</div>\n')}])}(),angular.module("colorpicker.module",[]).factory("Helper",function(){"use strict";return{closestSlider:function(t){var e=t.matches||t.webkitMatchesSelector||t.mozMatchesSelector||t.msMatchesSelector;return e.bind(t)("I")?t.parentNode:t},getOffset:function(t,e){for(var n=0,a=0,i=t.getBoundingClientRect();t&&!isNaN(t.offsetLeft)&&!isNaN(t.offsetTop);)e||"BODY"!==t.tagName?(n+=t.scrollLeft,a+=t.scrollTop):(n+=document.documentElement.scrollLeft||t.scrollLeft,a+=document.documentElement.scrollTop||t.scrollTop),t=t.offsetParent;return{top:i.top+window.pageYOffset,left:i.left+window.pageXOffset,scrollX:n,scrollY:a}},stringParsers:[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,parse:function(t){return[t[1],t[2],t[3],t[4]]}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,parse:function(t){return[2.55*t[1],2.55*t[2],2.55*t[3],t[4]]}},{re:/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,parse:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]}},{re:/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/,parse:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]}}]}}).factory("Color",["Helper",function(t){"use strict";return{value:{h:1,s:1,b:1,a:1},rgb:function(){var t=this.toRGB();return"rgb("+t.r+","+t.g+","+t.b+")"},rgba:function(){var t=this.toRGB();return"rgba("+t.r+","+t.g+","+t.b+","+t.a+")"},hex:function(){return this.toHex()},RGBtoHSB:function(t,e,n,a){t/=255,e/=255,n/=255;var i,o,r,s;return r=Math.max(t,e,n),s=r-Math.min(t,e,n),i=0===s?null:r===t?(e-n)/s:r===e?(n-t)/s+2:(t-e)/s+4,i=(i+360)%6*60/360,o=0===s?0:s/r,{h:i||1,s:o,b:r,a:a||1}},setColor:function(e){e=e?e.toLowerCase():e;for(var n in t.stringParsers)if(t.stringParsers.hasOwnProperty(n)){var a=t.stringParsers[n],i=a.re.exec(e),o=i&&a.parse(i);if(o)return this.value=this.RGBtoHSB.apply(null,o),!1}},setHue:function(t){this.value.h=1-t},setSaturation:function(t){this.value.s=t},setLightness:function(t){this.value.b=1-t},setAlpha:function(t){this.value.a=parseInt(100*(1-t),10)/100},toRGB:function(t,e,n,a){t||(t=this.value.h,e=this.value.s,n=this.value.b),t*=360;var i,o,r,s,l;return t=t%360/60,l=n*e,s=l*(1-Math.abs(t%2-1)),i=o=r=n-l,t=~~t,i+=[l,s,0,0,s,l][t],o+=[s,l,l,s,0,0][t],r+=[0,0,s,l,l,s][t],{r:Math.round(255*i),g:Math.round(255*o),b:Math.round(255*r),a:a||this.value.a}},toHex:function(t,e,n,a){var i=this.toRGB(t,e,n,a);return"#"+(1<<24|parseInt(i.r,10)<<16|parseInt(i.g,10)<<8|parseInt(i.b,10)).toString(16).substr(1)}}}]).factory("Slider",["Helper",function(t){"use strict";var e={maxLeft:0,maxTop:0,callLeft:null,callTop:null,knob:{top:0,left:0}},n={};return{getSlider:function(){return e},getLeftPosition:function(t){return Math.max(0,Math.min(e.maxLeft,e.left+((t.pageX||n.left)-n.left)))},getTopPosition:function(t){return Math.max(0,Math.min(e.maxTop,e.top+((t.pageY||n.top)-n.top)))},setSlider:function(a,i){var o=t.closestSlider(a.target),r=t.getOffset(o,i),s=o.getBoundingClientRect(),l=a.clientX-s.left,c=a.clientY-s.top;e.knob=o.children[0].style,e.left=a.pageX-r.left-window.pageXOffset+r.scrollX,e.top=a.pageY-r.top-window.pageYOffset+r.scrollY,n={left:a.pageX-(l-e.left),top:a.pageY-(c-e.top)}},setSaturation:function(t,n){e={maxLeft:100,maxTop:100,callLeft:"setSaturation",callTop:"setLightness"},this.setSlider(t,n)},setHue:function(t,n){e={maxLeft:0,maxTop:100,callLeft:!1,callTop:"setHue"},this.setSlider(t,n)},setAlpha:function(t,n){e={maxLeft:0,maxTop:100,callLeft:!1,callTop:"setAlpha"},this.setSlider(t,n)},setKnob:function(t,n){e.knob.top=t+"px",e.knob.left=n+"px"}}}]).directive("colorpicker",["$document","$compile","Color","Slider","Helper",function(t,e,n,a,i){"use strict";return{require:"?ngModel",restrict:"A",link:function(o,r,s,l){function c(){t.on("mousemove",d),t.on("mouseup",p)}function u(){try{F.css("backgroundColor",A[$]())}catch(t){F.css("backgroundColor",A.toHex())}I.css("backgroundColor",A.toHex(A.value.h,1,1,1)),"rgba"===$&&(y.css.backgroundColor=A.toHex())}function d(t){var e=a.getLeftPosition(t),n=a.getTopPosition(t),i=a.getSlider();a.setKnob(n,e),i.callLeft&&A[i.callLeft].call(A,e/100),i.callTop&&A[i.callTop].call(A,n/100),u();var s=A[$]();return r.val(s),l&&o.$apply(l.$setViewValue(s)),T&&U.val(s),!1}function p(){v("colorpicker-selected"),t.off("mousemove",d),t.off("mouseup",p)}function f(t){A.setColor(r.val()),T&&!t&&U.val(r.val()),L.eq(0).css({left:100*A.value.s+"px",top:100-100*A.value.b+"px"}),L.eq(1).css("top",100*(1-A.value.h)+"px"),L.eq(2).css("top",100*(1-A.value.a)+"px"),u()}function m(){var t,e=i.getOffset(r[0]);return angular.isDefined(s.colorpickerParent)&&(e.left=0,e.top=0),"top"===k?t={top:e.top-147,left:e.left}:"right"===k?t={top:e.top,left:e.left+126}:"bottom"===k?t={top:e.top+r[0].offsetHeight+2,left:e.left}:"left"===k&&(t={top:e.top,left:e.left-150}),{top:t.top+"px",left:t.left+"px"}}function h(){b()}function g(){M.hasClass("colorpicker-visible")||(f(),M.addClass("colorpicker-visible").css(m()),v("colorpicker-shown"),x===!1&&t.on("mousedown",h),s.colorpickerIsOpen&&(o[s.colorpickerIsOpen]=!0,o.$$phase||o.$digest()))}function v(t){l&&o.$emit(t,{name:s.ngModel,value:l.$modelValue})}function b(){M.hasClass("colorpicker-visible")&&(M.removeClass("colorpicker-visible"),v("colorpicker-closed"),t.off("mousedown",h),s.colorpickerIsOpen&&(o[s.colorpickerIsOpen]=!1,o.$$phase||o.$digest()))}var y,$=s.colorpicker?s.colorpicker:"hex",w=angular.isDefined(s.backgroundSetting)?!0:!1,k=angular.isDefined(s.colorpickerPosition)?s.colorpickerPosition:"bottom",x=angular.isDefined(s.colorpickerInline)?s.colorpickerInline:!1,C=angular.isDefined(s.colorpickerFixedPosition)?s.colorpickerFixedPosition:!1,D=angular.isDefined(s.colorpickerParent)?r.parent():angular.element(document.body),T=angular.isDefined(s.colorpickerWithInput)?s.colorpickerWithInput:!1,S=T?'<input type="text" name="colorpicker-input" spellcheck="false">':"",E=x?"":'<button type="button" class="close close-colorpicker">&times;</button>',O=w?'<div class="colorpicker dropdown"><div class="dropdown-menu"><colorpicker-saturation><i></i></colorpicker-saturation><colorpicker-hue><i></i></colorpicker-hue><colorpicker-alpha><i></i></colorpicker-alpha>'+S+"</div></div>":'<div class="colorpicker dropdown"><div class="dropdown-menu"><colorpicker-saturation><i></i></colorpicker-saturation><colorpicker-hue><i></i></colorpicker-hue><colorpicker-alpha><i></i></colorpicker-alpha><colorpicker-preview></colorpicker-preview>'+S+E+"</div></div>",M=angular.element(O),A=n,P=M.find("colorpicker-hue"),I=M.find("colorpicker-saturation"),F=M.find("colorpicker-preview"),L=M.find("i");if(e(M)(o),T){var U=M.find("input");U.on("mousedown",function(t){t.stopPropagation()}).on("keyup",function(){var t=this.value;r.val(t),l&&l.$modelValue!==t&&(o.$apply(l.$setViewValue(t)),f(!0))})}"rgba"===$&&(M.addClass("alpha"),y=M.find("colorpicker-alpha"),y.on("click",function(t){a.setAlpha(t,C),d(t)}).on("mousedown",function(t){a.setAlpha(t,C),c()}).on("mouseup",function(){v("colorpicker-selected-alpha")})),P.on("click",function(t){a.setHue(t,C),d(t)}).on("mousedown",function(t){a.setHue(t,C),c()}).on("mouseup",function(){v("colorpicker-selected-hue")}),I.on("click",function(t){a.setSaturation(t,C),d(t),angular.isDefined(s.colorpickerCloseOnSelect)&&b()}).on("mousedown",function(t){a.setSaturation(t,C),c()}).on("mouseup",function(){v("colorpicker-selected-saturation")}),C&&M.addClass("colorpicker-fixed-position"),M.addClass("colorpicker-position-"+k),"true"===x&&M.addClass("colorpicker-inline"),D.append(M),l&&(l.$render=function(){r.val(l.$viewValue),f()}),r.on("blur keyup change",function(){f()}),r.on("$destroy",function(){M.remove()}),x===!1?r.on("click",g):g(),M.on("mousedown",function(t){t.stopPropagation(),t.preventDefault()}),M.find("button").on("click",function(){b()}),s.colorpickerIsOpen&&o.$watch(s.colorpickerIsOpen,function(t){t===!0?g():t===!1&&b()})}}}]),angular.module("ui.tinymce",[]).value("uiTinymceConfig",{}).directive("uiTinymce",["$rootScope","$compile","$timeout","$window","$sce","uiTinymceConfig","uiTinymceService",function(t,e,n,a,i,o,r){return o=o||{},o.baseUrl&&(tinymce.baseURL=o.baseUrl),{require:["ngModel","^?form"],priority:599,link:function(s,l,c,u){function d(t){t?(p(),m&&m.getBody().setAttribute("contenteditable",!1)):(p(),m&&!m.settings.readonly&&m.getDoc()&&m.getBody().setAttribute("contenteditable",!0))}function p(){m||(m=tinymce.get(c.id))}if(a.tinymce){var f,m,h=u[0],g=u[1]||null,v={debounce:!0},b=function(e){var n=e.getContent({format:v.format}).trim();n=i.trustAsHtml(n),h.$setViewValue(n),t.$$phase||s.$digest()},y=r.getUniqueId();c.$set("id",y),f={},angular.extend(f,s.$eval(c.uiTinymce));var $=function(t){var e;return function(a){n.cancel(e),e=n(function(){return function(t){t.isDirty()&&(t.save(),b(t))}(a)},t)}}(400),w={setup:function(e){e.on("init",function(){h.$render(),h.$setPristine(),h.$setUntouched(),g&&g.$setPristine()}),e.on("ExecCommand change NodeChange ObjectResized",function(){return v.debounce?($(e),void 0):(e.save(),b(e),void 0)}),e.on("blur",function(){l[0].blur(),h.$setTouched(),t.$$phase||s.$digest()}),e.on("remove",function(){l.remove()}),o.setup&&o.setup(e,{updateView:b}),f.setup&&f.setup(e,{updateView:b})},format:f.format||"html",selector:"#"+c.id};angular.extend(v,o,f,w),n(function(){v.baseURL&&(tinymce.baseURL=v.baseURL);var t=tinymce.init(v);t&&"function"==typeof t.then?t.then(function(){d(s.$eval(c.ngDisabled))}):d(s.$eval(c.ngDisabled))}),h.$formatters.unshift(function(t){return t?i.trustAsHtml(t):""}),h.$parsers.unshift(function(t){return t?i.getTrustedHtml(t):""}),h.$render=function(){p();var t=h.$viewValue?i.getTrustedHtml(h.$viewValue):"";m&&m.getDoc()&&(m.setContent(t),m.fire("change"))},c.$observe("disabled",d),s.$on("$tinymce:refresh",function(t,n){var a=c.id;if(angular.isUndefined(n)||n===a){var i=l.parent(),o=l.clone();o.removeAttr("id"),o.removeAttr("style"),o.removeAttr("aria-hidden"),tinymce.execCommand("mceRemoveEditor",!1,a),i.append(e(o)(s))}}),s.$on("$destroy",function(){p(),m&&(m.remove(),m=null)})}}}}]).service("uiTinymceService",[function(){var t=function(){var t="ui-tinymce",e=0,n=function(){return e++,t+"-"+e};return{getUniqueId:n}};return new t}]),function(){"use strict";angular.module("risevision.widget.common.widget-button-toolbar",["risevision.common.i18n"]).directive("widgetButtonToolbar",["$templateCache",function(t){return{restrict:"E",scope:{save:"&",cancel:"&",disableSave:"&"},template:t.get("_angular/widget-button-toolbar/widget-button-toolbar.html")}}])}(),function(t){try{t=angular.module("risevision.widget.common.widget-button-toolbar")}catch(e){t=angular.module("risevision.widget.common.widget-button-toolbar",[])}t.run(["$templateCache",function(t){"use strict";t.put("_angular/widget-button-toolbar/widget-button-toolbar.html",'<div class="pull-right">\n  <button id="save" class="btn btn-primary btn-fixed-width" type="button" ng-click="save()" ng-disabled="disableSave()">\n    <span>{{"common.save" | translate}}</span>\n    <i class="fa fa-white fa-check icon-right"></i>\n  </button>\n  <button id="cancel" class="btn btn-default btn-fixed-width" type="button" ng-click="cancel()">\n    <span>{{"common.cancel" | translate}}</span>\n    <i class="fa fa-white fa-times icon-right"></i>\n  </button>\n</div>\n')}])}(),function(){"use strict";angular.module("risevision.widget.common.tooltip",["ui.bootstrap"]).directive("rvTooltip",[function(){return{restrict:"A",link:function(t,e){e.addClass("fa"),e.addClass("fa-question-circle"),e.addClass("fa-lg")}}}])}();var config={};"undefined"!=typeof angular&&(angular.module("risevision.widget.rss.config",[]).value("layout4x1","https://s3.amazonaws.com/widget-rss/1.0.0/dist/layout-4x1.html").value("layout2x1","https://s3.amazonaws.com/widget-rss/1.0.0/dist/layout-2x1.html").value("layout1x2","https://s3.amazonaws.com/widget-rss/1.0.0/dist/layout-1x2.html"),angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json")),angular.module("risevision.widget.rss.settings",["risevision.common.i18n","risevision.widget.rss.config","risevision.widget.common","risevision.widget.common.widget-button-toolbar","risevision.widget.common.tooltip","risevision.widget.common.font-setting","risevision.widget.common.transition-setting","colorpicker.module"]),angular.module("risevision.widget.common",[]),angular.module("risevision.widget.common").controller("settingsController",["$scope","settingsSaver","settingsGetter","settingsCloser",function(t,e,n,a){t.settings={params:{},additionalParams:{}},t.alerts=[],t.getAdditionalParam=function(e,n){var a=t.settings.additionalParams[e];return angular.isUndefined(a)?n:a},t.setAdditionalParam=function(e,n){t.settings.additionalParams[e]=n},t.loadAdditionalParams=function(){n.getAdditionalParams().then(function(e){t.settings.additionalParams=e,t.$broadcast("loadAdditionalParams",e)},function(t){alert(t)})},t.setAdditionalParams=function(e,n){t.settings.additionalParams[e]=n},t.saveSettings=function(){t.alerts=[],t.$broadcast("collectAdditionalParams"),e.saveSettings(t.settings).then(function(){},function(e){t.alerts=e.alerts})},t.closeSettings=function(){a.closeSettings().then(function(){},function(e){t.alerts=e.alerts})},t.settings.params=n.getParams(),t.loadAdditionalParams()}]).directive("scrollOnAlerts",function(){return{restrict:"A",scope:!1,link:function(t,e){t.$watchCollection("alerts",function(t,n){t.length>0&&0===n.length&&$("body").animate({scrollTop:e.offset().top},"fast")})}}}),angular.module("risevision.widget.common").constant("STORAGE_FILE_URL_BASE","storage.googleapis.com/risemedialibrary-").constant("STORAGE_FOLDER_URL_BASE","googleapis.com/storage/").factory("commonSettings",["$log","STORAGE_FILE_URL_BASE","STORAGE_FOLDER_URL_BASE",function(t,e,n){var a={getStorageUrlData:function(t){function a(t){return-1!==t.indexOf(e)?"file":-1!==t.indexOf(n)?"folder":null}function i(t){var e=t.split("risemedialibrary-");return e[1].slice(0,e[1].indexOf("/"))}var o,r,s,l,c={};if("file"===a(t))o=t.split(e)[1],o=decodeURIComponent(o.slice(o.indexOf("/")+1)),r=o.split("/"),c.companyId=i(t),c.fileName=r.pop(),c.folder=r.length>0?r.join("/"):"",""!==c.folder&&(c.folder+="/");else if("folder"===a(t)){s=t.split("?");for(var u=0;u<s.length;u++)if(l=s[u].split("="),"prefix"===l[0]&&"undefined"!=typeof l[1]&&""!==l[1]){c.companyId=i(t),c.folder=decodeURIComponent(l[1]),c.fileName="";break}}return c}};return a}]),angular.module("risevision.widget.common").factory("gadgetsApi",["$window",function(t){return t.gadgets}]),angular.module("risevision.widget.common").factory("googleFontLoader",["$http","angularLoad",function(t,e){function n(){for(var t="",n="",a="",o=[],r=!1,s=",sans-serif;",l="//fonts.googleapis.com/css?family=",c=["Buda","Coda Caption","Open Sans Condensed","UnifrakturCook","Molle"],u=0;u<i.length;u++)t=i[u],-1===c.indexOf(t)&&(a=l+t,e.loadCSS(a),o.push(a),/\s/.test(t)&&(r=!0),n+=r?t+"='"+t+"'"+s:t+"="+t+s);return{fonts:n,urls:o}}var a={},i=[];return a.getGoogleFonts=function(){return 0===i.length?t.get("https://www.googleapis.com/webfonts/v1/webfonts?key=AIzaSyBXxVK_IOV7LNQMuVVo_l7ZvN53ejN86zY&sort=alpha",{cache:!0}).then(function(t){var e=null;if(t.data&&t.data.items){for(var a=0,o=t.data.items.length;o>a;a++)e=t.data.items[a],e.subsets&&1===e.subsets.length&&"khmer"===e.subsets[0].toLowerCase()||i.push(e.family);return n()}}):n()},a.getFontsUsed=function(t){var e=[];return angular.forEach(i,function(n){-1!==t.indexOf(n)&&e.push(n)}),e},a}]),angular.module("risevision.widget.common").service("i18nLoader",["$window","$q",function(t,e){var n=e.defer();t.i18n.init({fallbackLng:"en",resGetPath:"locales/__ns_____lng__.json"},function(){n.resolve(t.i18n)}),this.get=function(){return n.promise}}]),angular.module("risevision.widget.common").factory("imageValidator",["$q",function(t){var e={isImage:function(e){var n=t.defer(),a=new Image;return a.onload=function(){n.resolve(!0)},a.onerror=function(){n.resolve(!1)},a.src=e,n.promise}};return e}]),angular.module("risevision.widget.common").service("settingsSaver",["$q","$log","gadgetsApi","settingsParser",function(t,e,n,a){function i(t){var e=angular.copy(t);return delete e.params.id,delete e.params.companyId,delete e.params.rsW,delete e.params.rsH,e}this.saveSettings=function(o,r){var s=t.defer(),l=[],c="";o=i(o),r&&(l=r(o)),l.length>0&&(e.debug("Validation failed.",l),s.reject({alerts:l})),o.params.hasOwnProperty("layoutURL")&&(c+=o.params.layoutURL+"?",delete o.params.layoutURL),c+=a.encodeParams(o.params);var u=a.encodeAdditionalParams(o.additionalParams);return n.rpc.call("","rscmd_saveSettings",function(t){e.debug("encoded settings",JSON.stringify(t)),e.debug("Settings saved. ",o),s.resolve(t)},{params:c,additionalParams:u}),s.promise}}]).service("settingsGetter",["$q","gadgetsApi","$log","settingsParser","$window","defaultSettings",function(t,e,n,a,i,o){this.getAdditionalParams=function(){var i=t.defer(),r=o.additionalParams||{};return e.rpc.call("","rscmd_getAdditionalParams",function(t){t=t?a.parseAdditionalParams(t):{},n.debug("getAdditionalParams returns ",t),i.resolve($.extend(!0,r,t))}),i.promise},this.getParams=function(){var t=o.params||{};return angular.extend(t,a.parseParams(i.location.search))}}]).service("settingsParser",[function(){function t(t){return 0===t.indexOf("up_")?t.slice(3):null}this.parseAdditionalParams=function(t){return t?JSON.parse(t):{}},this.encodeAdditionalParams=function(t){return JSON.stringify(t)},this.encodeParams=function(t){var e=[];for(var n in t)if(t.hasOwnProperty(n)){var a;a="object"==typeof t[n]?JSON.stringify(t[n]):t[n],e.push("up_"+encodeURIComponent(n)+"="+encodeURIComponent(a))}return e.join("&")},this.parseParams=function(e){"?"===e[0]&&(e=e.slice(1));for(var n={},a=e.split("&"),i=0;i<a.length;i++){var o=a[i].split("="),r=t(decodeURIComponent(o[0]));if(r)try{n[r]=JSON.parse(decodeURIComponent(o[1]))}catch(s){n[r]=decodeURIComponent(o[1])}}return n}}]).service("settingsCloser",["$q","$log","gadgetsApi",function(t,e,n){this.closeSettings=function(){var e=t.defer();return n.rpc.call("","rscmd_closeSettings",function(){e.resolve(!0)}),e.promise}}]).value("defaultSettings",{}),function(t){"use strict";t.module("risevision.widget.common.visualization",[]).factory("visualizationApi",["$q","$window",function(t,e){var n,a=t.defer(),i={get:function(){return n||(n=a.promise,e.google.visualization?a.resolve(e.google.visualization):e.google.setOnLoadCallback(function(){a.resolve(e.google.visualization)})),n}};return i}])}(angular),angular.module("risevision.widget.rss.settings").controller("rssSettingsController",["$scope","$log","feedValidator",function(t,e,n){function a(){return"left"===t.settings.additionalParams.transition.direction&&"scroll"===t.settings.additionalParams.transition.type}t.feedValid=!0,t.requiresAuthentication=!1,t.notAFeed=!1,t.horizontalScrolling=!1,t.validateFeed=function(){n.isValid(t.settings.additionalParams.url).then(function(e){t.feedValid=e})},t.checkWithFeedParser=function(){t.settings.additionalParams.url&&t.settingsForm.rssUrl.$valid?n.isParsable(t.settings.additionalParams.url).then(function(e){"401 Unauthorized"===e?t.requiresAuthentication=!0:"Not a feed"===e&&(t.notAFeed=!0),e||(t.requiresAuthentication=!1,t.notAFeed=!1,t.validateFeed())}):(t.requiresAuthentication=!1,t.notAFeed=!1,t.feedValid=!0)},t.$on("urlFieldBlur",function(){t.checkWithFeedParser()}),t.$watch("settings.additionalParams.url",function(e,n){"undefined"==typeof n&&e&&""!==e?t.checkWithFeedParser():"undefined"!=typeof e&&(t.feedValid=!0,t.requiresAuthentication=!1)}),t.$watch("settings.additionalParams.transition.type",function(e){"undefined"!=typeof e&&(t.horizontalScrolling=a())}),t.$watch("settings.additionalParams.transition.direction",function(e){"undefined"!=typeof e&&(t.horizontalScrolling=a())}),t.$watch("settings.additionalParams.dataSelection.showTitle",function(e){"undefined"==typeof e||""===e||e||(t.settings.additionalParams.headline.fontStyle={})}),t.$watch("settings.additionalParams.dataSelection.showTimestamp",function(e){"undefined"==typeof e||""===e||e||(t.settings.additionalParams.timestamp.fontStyle={})}),t.$watch("settings.additionalParams.dataSelection.showAuthor",function(e){"undefined"==typeof e||""===e||e||(t.settings.additionalParams.author.fontStyle={})}),t.$watch("settings.additionalParams.dataSelection.showDescription",function(e){"undefined"!=typeof e&&"snippet"!==e&&(t.settings.additionalParams.dataSelection.snippetLength=t.settings.additionalParams.dataSelection.snippetLength?t.settings.additionalParams.dataSelection.snippetLength:120)})}]).filter("escape",function(){return window.encodeURIComponent}).value("defaultSettings",{params:{},additionalParams:{url:"",itemsInQueue:5,itemsToShow:1,headline:{fontStyle:{font:{family:"verdana,geneva,sans-serif",type:"standard",url:""},size:"24px",customSize:"",align:"left",bold:!0,italic:!1,underline:!1,forecolor:"black",backcolor:"transparent"}},story:{fontStyle:{font:{family:"verdana,geneva,sans-serif",type:"standard",url:""},size:"18px",customSize:"",align:"left",bold:!0,italic:!1,underline:!1,forecolor:"black",backcolor:"transparent"}},timestamp:{fontStyle:{font:{family:"verdana,geneva,sans-serif",type:"standard",url:""},size:"14px",customSize:"",align:"left",bold:!0,italic:!1,underline:!1,forecolor:"#969696",backcolor:"transparent"}},author:{fontStyle:{font:{family:"verdana,geneva,sans-serif",type:"standard",url:""},size:"14px",customSize:"",align:"left",bold:!0,italic:!1,underline:!1,forecolor:"#969696",backcolor:"transparent"}},transition:{},dataSelection:{showTitle:!0,showTimestamp:!0,showAuthor:!0,showImage:!0,showDescription:"snippet",snippetLength:120},layout:"layout-4x1",layoutUrl:"",separator:{show:!0,size:1,color:"rgb(238,238,238)"}}}),angular.module("risevision.widget.rss.settings").factory("feedValidator",["$log","$http","$window",function(t,e,n){var a={isValid:function(a){return e({method:"GET",url:"https://proxy.risevision.com/https://validator.w3.org/feed/check.cgi?url="+a+"&output=soap12"}).then(function(t){var e,a;return t&&t.data?(e=n.xmlToJSON.parseString(t.data),a=e.Envelope[0].Body[0].feedvalidationresponse[0],a.validity[0]._text):void 0},function(e){t.debug("Validation request failed with status code "+e.status+": "+e.statusText)})},isParsable:function(n){return e({method:"GET",url:"https://feed-parser.risevision.com/"+n}).then(function(t){return t&&t.data&&t.data.Error?t.data.Error:null},function(e){return t.debug("Feed parser check failed with status code "+e.status+": "+e.statusText),null})}};return a}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
